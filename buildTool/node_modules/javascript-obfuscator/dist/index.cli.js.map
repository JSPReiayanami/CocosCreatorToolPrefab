{"version":3,"sources":["webpack://JavaScriptObfuscator/webpack/bootstrap","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/interopRequireDefault\"","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/classCallCheck\"","webpack://JavaScriptObfuscator/external \"inversify\"","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/createClass\"","webpack://JavaScriptObfuscator/external \"tslib\"","webpack://JavaScriptObfuscator/./src/container/ServiceIdentifiers.ts","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/getPrototypeOf\"","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/inherits\"","webpack://JavaScriptObfuscator/./src/node/NodeGuards.ts","webpack://JavaScriptObfuscator/./src/decorators/Initializable.ts","webpack://JavaScriptObfuscator/./src/node/NodeUtils.ts","webpack://JavaScriptObfuscator/./src/enums/node-transformers/TransformationStage.ts","webpack://JavaScriptObfuscator/./src/node-transformers/AbstractNodeTransformer.ts","webpack://JavaScriptObfuscator/./src/node/NodeFactory.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/AbstractCustomNode.ts","webpack://JavaScriptObfuscator/external \"estraverse\"","webpack://JavaScriptObfuscator/./src/node/NodeMetadata.ts","webpack://JavaScriptObfuscator/external \"string-template\"","webpack://JavaScriptObfuscator/./src/enums/node/NodeType.ts","webpack://JavaScriptObfuscator/./src/container/InversifyContainerFacade.ts","webpack://JavaScriptObfuscator/./src/enums/custom-nodes/ControlFlowCustomNode.ts","webpack://JavaScriptObfuscator/./src/enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer.ts","webpack://JavaScriptObfuscator/./src/enums/ObfuscationTarget.ts","webpack://JavaScriptObfuscator/./src/node/NodeStatementUtils.ts","webpack://JavaScriptObfuscator/./src/node/NodeAppender.ts","webpack://JavaScriptObfuscator/./src/enums/event-emitters/ObfuscationEvent.ts","webpack://JavaScriptObfuscator/./src/node/NodeLexicalScopeUtils.ts","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/toConsumableArray\"","webpack://JavaScriptObfuscator/./src/enums/node-transformers/NodeTransformer.ts","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/slicedToArray\"","webpack://JavaScriptObfuscator/./src/enums/custom-nodes/CustomNode.ts","webpack://JavaScriptObfuscator/./src/JavaScriptObfuscatorFacade.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/AbstractCustomNodeGroup.ts","webpack://JavaScriptObfuscator/./src/utils/Utils.ts","webpack://JavaScriptObfuscator/./src/enums/generators/identifier-names-generators/IdentifierNamesGenerator.ts","webpack://JavaScriptObfuscator/./src/enums/source-map/SourceMapMode.ts","webpack://JavaScriptObfuscator/./src/enums/StringArrayEncoding.ts","webpack://JavaScriptObfuscator/./src/options/presets/NoCustomNodes.ts","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/get\"","webpack://JavaScriptObfuscator/./src/utils/NumberUtils.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/obfuscating-replacers/AbstractObfuscatingReplacer.ts","webpack://JavaScriptObfuscator/./src/analyzers/stack-trace-analyzer/callee-data-extractors/AbstractCalleeDataExtractor.ts","webpack://JavaScriptObfuscator/./src/node-transformers/control-flow-transformers/control-flow-replacers/AbstractControlFlowReplacer.ts","webpack://JavaScriptObfuscator/external \"escodegen-wallaby\"","webpack://JavaScriptObfuscator/./src/templates/GlobalVariableNoEvalTemplate.ts","webpack://JavaScriptObfuscator/./src/options/presets/Default.ts","webpack://JavaScriptObfuscator/./src/enums/analyzers/stack-trace-analyzer/CalleeDataExtractor.ts","webpack://JavaScriptObfuscator/./src/enums/node-transformers/obfuscating-transformers/obfuscating-replacers/ControlFlowReplacer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/control-flow-transformers/control-flow-replacers/ExpressionWithOperatorControlFlowReplacer.ts","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/typeof\"","webpack://JavaScriptObfuscator/external \"espree\"","webpack://JavaScriptObfuscator/./src/enums/custom-nodes/DeadCodeInjectionCustomNode.ts","webpack://JavaScriptObfuscator/./src/enums/node-transformers/converting-transformers/properties-extractors/PropertiesExtractor.ts","webpack://JavaScriptObfuscator/./src/node-transformers/converting-transformers/properties-extractors/AbstractPropertiesExtractor.ts","webpack://JavaScriptObfuscator/./src/enums/custom-nodes/CustomNodeGroup.ts","webpack://JavaScriptObfuscator/./src/generators/identifier-names-generators/AbstractIdentifierNamesGenerator.ts","webpack://JavaScriptObfuscator/./src/enums/node-transformers/obfuscating-transformers/obfuscating-replacers/LiteralObfuscatingReplacer.ts","webpack://JavaScriptObfuscator/./src/enums/node-transformers/preparing-transformers/obfuscating-guards/ObfuscatingGuard.ts","webpack://JavaScriptObfuscator/./src/storages/MapStorage.ts","webpack://JavaScriptObfuscator/./src/utils/RandomGenerator.ts","webpack://JavaScriptObfuscator/external \"chalk\"","webpack://JavaScriptObfuscator/external \"reflect-metadata\"","webpack://JavaScriptObfuscator/./src/logger/Logger.ts","webpack://JavaScriptObfuscator/./src/enums/logger/LoggingPrefix.ts","webpack://JavaScriptObfuscator/external \"@babel/runtime/helpers/construct\"","webpack://JavaScriptObfuscator/./src/container/modules/analyzers/AnalyzersModule.ts","webpack://JavaScriptObfuscator/./src/analyzers/stack-trace-analyzer/callee-data-extractors/FunctionDeclarationCalleeDataExtractor.ts","webpack://JavaScriptObfuscator/./src/analyzers/stack-trace-analyzer/callee-data-extractors/FunctionExpressionCalleeDataExtractor.ts","webpack://JavaScriptObfuscator/./src/analyzers/stack-trace-analyzer/callee-data-extractors/ObjectExpressionCalleeDataExtractor.ts","webpack://JavaScriptObfuscator/./src/analyzers/stack-trace-analyzer/StackTraceAnalyzer.ts","webpack://JavaScriptObfuscator/./src/container/modules/node-transformers/ControlFlowTransformersModule.ts","webpack://JavaScriptObfuscator/./src/node-transformers/control-flow-transformers/control-flow-replacers/BinaryExpressionControlFlowReplacer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/control-flow-transformers/BlockStatementControlFlowTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/control-flow-transformers/control-flow-replacers/CallExpressionControlFlowReplacer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/dead-code-injection-transformers/DeadCodeInjectionTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/control-flow-transformers/FunctionControlFlowTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/control-flow-transformers/control-flow-replacers/LogicalExpressionControlFlowReplacer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/control-flow-transformers/control-flow-replacers/StringLiteralControlFlowReplacer.ts","webpack://JavaScriptObfuscator/./src/container/modules/node-transformers/ConvertingTransformersModule.ts","webpack://JavaScriptObfuscator/./src/node-transformers/converting-transformers/properties-extractors/AssignmentExpressionPropertiesExtractor.ts","webpack://JavaScriptObfuscator/./src/node-transformers/converting-transformers/MemberExpressionTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/converting-transformers/MethodDefinitionTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/converting-transformers/ObjectExpressionKeysTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/converting-transformers/ObjectExpressionTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/converting-transformers/TemplateLiteralTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/converting-transformers/properties-extractors/VariableDeclaratorPropertiesExtractor.ts","webpack://JavaScriptObfuscator/./src/container/modules/custom-nodes/CustomNodesModule.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/console-output-nodes/group/ConsoleOutputCustomNodeGroup.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/debug-protection-nodes/group/DebugProtectionCustomNodeGroup.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/domain-lock-nodes/group/DomainLockCustomNodeGroup.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/self-defending-nodes/group/SelfDefendingCustomNodeGroup.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/string-array-nodes/group/StringArrayCustomNodeGroup.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/BinaryExpressionFunctionNode.ts","webpack://JavaScriptObfuscator/./src/templates/GlobalVariableTemplate1.ts","webpack://JavaScriptObfuscator/./src/templates/GlobalVariableTemplate2.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/BlockStatementControlFlowFlatteningNode.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/dead-code-injection-nodes/BlockStatementDeadCodeInjectionNode.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/control-flow-storage-nodes/CallExpressionControlFlowStorageCallNode.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/CallExpressionFunctionNode.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/control-flow-storage-nodes/ControlFlowStorageNode.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/console-output-nodes/ConsoleOutputDisableExpressionNode.ts","webpack://JavaScriptObfuscator/./src/templates/console-output-nodes/console-output-disable-expression-node/ConsoleOutputDisableExpressionTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/debug-protection-nodes/DebugProtectionFunctionCallNode.ts","webpack://JavaScriptObfuscator/./src/templates/debug-protection-nodes/debug-protection-function-call-node/DebugProtectionFunctionCallTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/debug-protection-nodes/DebugProtectionFunctionIntervalNode.ts","webpack://JavaScriptObfuscator/./src/templates/debug-protection-nodes/debug-protection-function-interval-node/DebugProtectionFunctionIntervalTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/debug-protection-nodes/DebugProtectionFunctionNode.ts","webpack://JavaScriptObfuscator/./src/templates/debug-protection-nodes/debug-protection-function-node/DebuggerTemplate.ts","webpack://JavaScriptObfuscator/./src/templates/debug-protection-nodes/debug-protection-function-node/DebuggerTemplateNoEval.ts","webpack://JavaScriptObfuscator/./src/templates/debug-protection-nodes/debug-protection-function-node/DebugProtectionFunctionTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/domain-lock-nodes/DomainLockNode.ts","webpack://JavaScriptObfuscator/./src/templates/domain-lock-nodes/domain-lock-node/DomainLockNodeTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/control-flow-storage-nodes/ExpressionWithOperatorControlFlowStorageCallNode.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/LogicalExpressionFunctionNode.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/node-calls-controller-nodes/NodeCallsControllerFunctionNode.ts","webpack://JavaScriptObfuscator/./src/templates/SingleNodeCallControllerTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/self-defending-nodes/SelfDefendingUnicodeNode.ts","webpack://JavaScriptObfuscator/./src/templates/self-defending-nodes/self-defending-unicode-node/SelfDefendingTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/string-array-nodes/StringArrayCallsWrapper.ts","webpack://JavaScriptObfuscator/./src/templates/AtobTemplate.ts","webpack://JavaScriptObfuscator/./src/templates/Rc4Template.ts","webpack://JavaScriptObfuscator/./src/templates/string-array-nodes/string-array-calls-wrapper/SelfDefendingTemplate.ts","webpack://JavaScriptObfuscator/./src/templates/string-array-nodes/string-array-calls-wrapper/StringArrayBase64DecodeNodeTemplate.ts","webpack://JavaScriptObfuscator/./src/templates/string-array-nodes/string-array-calls-wrapper/StringArrayCallsWrapperTemplate.ts","webpack://JavaScriptObfuscator/./src/templates/string-array-nodes/string-array-calls-wrapper/StringArrayRC4DecodeNodeTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/string-array-nodes/StringArrayNode.ts","webpack://JavaScriptObfuscator/./src/templates/string-array-nodes/string-array-node/StringArrayTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/string-array-nodes/StringArrayRotateFunctionNode.ts","webpack://JavaScriptObfuscator/./src/templates/string-array-nodes/string-array-rotate-function-node/SelfDefendingTemplate.ts","webpack://JavaScriptObfuscator/./src/templates/string-array-nodes/string-array-rotate-function-node/StringArrayRotateFunctionTemplate.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/control-flow-storage-nodes/StringLiteralControlFlowStorageCallNode.ts","webpack://JavaScriptObfuscator/./src/custom-nodes/control-flow-flattening-nodes/StringLiteralNode.ts","webpack://JavaScriptObfuscator/./src/container/modules/node-transformers/FinalizingTransformersModule.ts","webpack://JavaScriptObfuscator/./src/container/modules/generators/GeneratorsModule.ts","webpack://JavaScriptObfuscator/./src/generators/identifier-names-generators/HexadecimalIdentifierNamesGenerator.ts","webpack://JavaScriptObfuscator/./src/generators/identifier-names-generators/MangledIdentifierNamesGenerator.ts","webpack://JavaScriptObfuscator/./src/container/modules/node-transformers/NodeTransformersModule.ts","webpack://JavaScriptObfuscator/./src/container/modules/node-transformers/ObfuscatingTransformersModule.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/obfuscating-replacers/identifier-obfuscating-replacers/BaseIdentifierObfuscatingReplacer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/obfuscating-replacers/literal-obfuscating-replacers/BooleanLiteralObfuscatingReplacer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/CatchClauseTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/ClassDeclarationTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/FunctionDeclarationTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/FunctionTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/ImportDeclarationTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/LabeledStatementTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/LiteralTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/obfuscating-replacers/literal-obfuscating-replacers/NumberLiteralObfuscatingReplacer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/obfuscating-replacers/literal-obfuscating-replacers/StringLiteralObfuscatingReplacer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/obfuscating-transformers/VariableDeclarationTransformer.ts","webpack://JavaScriptObfuscator/./src/container/modules/options/OptionsModule.ts","webpack://JavaScriptObfuscator/./src/options/Options.ts","webpack://JavaScriptObfuscator/external \"class-validator\"","webpack://JavaScriptObfuscator/./src/options/ValidationErrorsFormatter.ts","webpack://JavaScriptObfuscator/./src/options/OptionsNormalizer.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/ControlFlowFlatteningThresholdRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/DeadCodeInjectionRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/DeadCodeInjectionThresholdRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/DomainLockRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/InputFileNameRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/SelfDefendingRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/SourceMapBaseUrlRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/SourceMapFileNameRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/StringArrayRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/StringArrayEncodingRule.ts","webpack://JavaScriptObfuscator/./src/options/normalizer-rules/StringArrayThresholdRule.ts","webpack://JavaScriptObfuscator/./src/container/modules/node-transformers/PreparingTransformersModule.ts","webpack://JavaScriptObfuscator/./src/node-transformers/preparing-transformers/obfuscating-guards/BlackListObfuscatingGuard.ts","webpack://JavaScriptObfuscator/./src/node-transformers/preparing-transformers/CommentsTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/preparing-transformers/obfuscating-guards/ConditionalCommentObfuscatingGuard.ts","webpack://JavaScriptObfuscator/./src/node-transformers/preparing-transformers/CustomNodesTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/preparing-transformers/EvaCallExpressionTransformer.ts","webpack://JavaScriptObfuscator/external \"js-string-escape\"","webpack://JavaScriptObfuscator/./src/node-transformers/preparing-transformers/MetadataTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/preparing-transformers/ObfuscatingGuardsTransformer.ts","webpack://JavaScriptObfuscator/./src/node-transformers/preparing-transformers/ParentificationTransformer.ts","webpack://JavaScriptObfuscator/./src/container/modules/storages/StoragesModule.ts","webpack://JavaScriptObfuscator/./src/storages/control-flow/ControlFlowStorage.ts","webpack://JavaScriptObfuscator/./src/storages/custom-node-group/CustomNodeGroupStorage.ts","webpack://JavaScriptObfuscator/./src/storages/string-array/StringArrayStorage.ts","webpack://JavaScriptObfuscator/./src/storages/ArrayStorage.ts","webpack://JavaScriptObfuscator/./src/container/modules/utils/UtilsModule.ts","webpack://JavaScriptObfuscator/./src/utils/ArrayUtils.ts","webpack://JavaScriptObfuscator/./src/utils/CryptUtils.ts","webpack://JavaScriptObfuscator/external \"md5\"","webpack://JavaScriptObfuscator/external \"chance\"","webpack://JavaScriptObfuscator/./src/utils/EscapeSequenceEncoder.ts","webpack://JavaScriptObfuscator/./src/JavaScriptObfuscator.ts","webpack://JavaScriptObfuscator/./src/enums/logger/LoggingMessage.ts","webpack://JavaScriptObfuscator/./src/EspreeFacade.ts","webpack://JavaScriptObfuscator/./src/event-emitters/ObfuscationEventEmitter.ts","webpack://JavaScriptObfuscator/external \"events\"","webpack://JavaScriptObfuscator/./src/source-code/ObfuscatedCode.ts","webpack://JavaScriptObfuscator/./src/source-code/SourceCode.ts","webpack://JavaScriptObfuscator/./src/node-transformers/TransformersRunner.ts","webpack://JavaScriptObfuscator/./src/enums/node-transformers/VisitorDirection.ts","webpack://JavaScriptObfuscator/./src/cli/JavaScriptObfuscatorCLI.ts","webpack://JavaScriptObfuscator/external \"path\"","webpack://JavaScriptObfuscator/external \"fs\"","webpack://JavaScriptObfuscator/./index.cli.ts","webpack://JavaScriptObfuscator/./src/JavaScriptObfuscatorCLIFacade.ts","webpack://JavaScriptObfuscator/external \"commander\"","webpack://JavaScriptObfuscator/./src/cli/sanitizers/ArraySanitizer.ts","webpack://JavaScriptObfuscator/./src/cli/sanitizers/BooleanSanitizer.ts","webpack://JavaScriptObfuscator/./src/cli/sanitizers/IdentifierNamesGeneratorSanitizer.ts","webpack://JavaScriptObfuscator/./src/cli/sanitizers/ObfuscatingTargetSanitizer.ts","webpack://JavaScriptObfuscator/./src/cli/sanitizers/SourceMapModeSanitizer.ts","webpack://JavaScriptObfuscator/./src/cli/sanitizers/StringArrayEncodingSanitizer.ts","webpack://JavaScriptObfuscator/./src/cli/utils/CLIUtils.ts","webpack://JavaScriptObfuscator/external \"mkdirp\"","webpack://JavaScriptObfuscator/./src/cli/utils sync","webpack://JavaScriptObfuscator/./src/cli/utils/SourceCodeReader.ts","webpack://JavaScriptObfuscator/external \"multimatch\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ServiceIdentifiers","NodeType_1","NodeGuards","node","type","NodeType","ArrayPattern","ArrowFunctionExpression","AssignmentPattern","AwaitExpression","BlockStatement","BreakStatement","CallExpression","CatchClause","ClassDeclaration","ContinueStatement","ExportNamedDeclaration","ExpressionStatement","isFunctionDeclarationNode","isFunctionExpressionNode","isArrowFunctionExpressionNode","FunctionDeclaration","FunctionExpression","Identifier","ImportDeclaration","ImportSpecifier","parentNode","parentNodeIsLabeledStatementNode","isLabeledStatementNode","label","parentNodeIsContinueStatementNode","isContinueStatementNode","parentNodeIsBreakStatementNode","isBreakStatementNode","LabeledStatement","Literal","MemberExpression","MethodDefinition","undefined","isProgramNode","isFunctionNode","isBlockStatementNode","nodesWithLexicalStatements","includes","isSwitchCaseNode","Boolean","leadingComments","trailingComments","ObjectPattern","ObjectExpression","Program","Property","isIdentifierNode","parentNodeIsPropertyNode","isPropertyNode","computed","parentNodeIsMemberExpressionNode","isMemberExpressionNode","parentNodeIsMethodDefinitionNode","isMethodDefinitionNode","isLabelIdentifierNode","RestElement","ReturnStatement","Super","SwitchCase","TaggedTemplateExpression","TemplateLiteral","UnaryExpression","directive","VariableDeclaration","VariableDeclarator","WhileStatement","defaultDescriptor","configurable","initializedTargetMetadataKey","initializablePropertiesSetMetadataKey","wrappedMethodsSetMetadataKey","constructorMethodName","initializeTargetMetadata","metadataKey","metadataValue","target","Reflect","hasMetadata","defineMetadata","initializable","initializeMethodName","arguments","length","decoratorName","keys","this","propertyKey","initializeMethod","Error","concat","Set","ownPropertyNames","getOwnPropertyNames","prohibitedPropertyNames","forEach","propertyName","initializablePropertiesSet","getMetadata","wrappedMethodsSet","isProhibitedPropertyName","has","targetProperty","methodDescriptor","getOwnPropertyDescriptor","originalMethod","assign","apply","add","wrapTargetMethodsInInitializedCheck","result","wrapInitializeMethodInInitializeCheck","initializablePropertyMetadataKey","toString","propertyDescriptor","set","newVal","wrapInitializableProperty","escodegen","tslib_1","__importStar","espree","estraverse","NodeGuards_1","NodeMetadata_1","NodeUtils","literalNode","content","raw","precedence","Precedence","Primary","astTree","parentizeAst","cloneRecursive","code","structure","parse","sourceType","replace","enter","parentizeNode","isLiteralNode","addXVerbatimPropertyTo","NodeMetadata","ignoredNode","body","reduce","generate","sourceMapWithCode","unaryExpressionNode","isUnaryExpressionNode","argument","getUnaryExpressionArgumentNode","copy","clonedValue","RegExp","Array","isArray","map","_typeof2","default","TransformationStage","inversify_1","ServiceIdentifiers_1","AbstractNodeTransformer","randomGenerator","options","_classCallCheck2","__decorate","injectable","__param","inject","IRandomGenerator","IOptions","NodeFactory","metadata","elements","ArrayExpression","operator","left","right","AssignmentExpression","BinaryExpression","callee","args","expression","functionName","params","id","identifierNode","generator","test","consequent","alternate","IfStatement","x-verbatim-property","LogicalExpression","kind","static","properties","method","shorthand","discriminant","cases","SwitchStatement","prefix","argumentExpr","UpdateExpression","declarations","init","GlobalVariableTemplate1_1","GlobalVariableTemplate2_1","AbstractCustomNode","AbstractCustomNode_1","identifierNamesGeneratorFactory","cachedNode","identifierNamesGenerator","_createClass2","getNodeStructure","getRandomGenerator","pickone","globalVariableTemplateFunctions","GlobalVariableTemplate1","GlobalVariableTemplate2","Factory__IIdentifierNamesGenerator","AnalyzersModule_1","ControlFlowTransformersModule_1","ConvertingTransformersModule_1","CustomNodesModule_1","FinalizingTransformersModule_1","GeneratorsModule_1","NodeTransformersModule_1","ObfuscatingTransformersModule_1","OptionsModule_1","PreparingTransformersModule_1","StoragesModule_1","UtilsModule_1","JavaScriptObfuscator_1","Logger_1","ObfuscationEventEmitter_1","ObfuscatedCode_1","SourceCode_1","TransformersRunner_1","InversifyContainerFacade","container","Container","serviceIdentifier","named","getNamed","sourceCode","sourceMap","ISourceCode","toDynamicValue","SourceCode","inSingletonScope","TInputOptions","ILogger","to","Logger","IJavaScriptObfuscator","JavaScriptObfuscator","ITransformersRunner","TransformersRunner","IObfuscatedCode","ObfuscatedCode","Factory__IObfuscatedCode","toFactory","context","obfuscatedCodeAsString","sourceMapAsString","obfuscatedCode","initialize","IObfuscationEventEmitter","ObfuscationEventEmitter","load","analyzersModule","controlFlowTransformersModule","convertingTransformersModule","customNodesModule","finalizingTransformersModule","generatorsModule","nodeTransformersModule","obfuscatingTransformersModule","optionsModule","preparingTransformersModule","storagesModule","utilsModule","unbindAll","bindingName","cache","Map","_len","dependencies","_key","cachedDependencies","dependency","index","_construct2","constructor","ControlFlowCustomNode","IdentifierObfuscatingReplacer","ObfuscationTarget","NodeStatementUtils","getParentNodesWithStatementsRecursive","statement","getSiblingStatementByOffset","ReferenceError","isNodeWithStatements","getRootStatementOfNode","getScopeOfNode","maxSize","Infinity","nodesWithStatements","depth","isNodeWithLexicalScopeStatements","push","offset","scopeNode","scopeBody","indexOf","NodeAppender","nodeWithStatements","statements","parentizeScopeStatementsBeforeAppend","setScopeStatements","_toConsumableArray2","getScopeStatements","stackTraceData","bodyStatements","targetBlockScope","getOptimalBlockScope","prepend","deep","firstCall","stackTrace","indexInScopeStatement","insertAtIndex","slice","ObfuscationEvent","NodeLexicalScopeUtils","getLexicalScopesRecursive","nodesWithLexicalScope","isNodeWithLexicalScope","NodeTransformer","CustomNode","InversifyContainerFacade_1","JavaScriptObfuscatorFacade","inputOptions","inversifyContainerFacade","obfuscate","unload","version","AbstractCustomNodeGroup","appendEvent","customNodes","customNodeName","callback","customNode","stackTraceLength","getRandomInteger","Math","max","round","Utils","url","split","hexadecimalPrefix","IdentifierNamesGenerator","SourceMapMode","StringArrayEncoding","IdentifierNamesGenerator_1","ObfuscationTarget_1","SourceMapMode_1","NO_ADDITIONAL_NODES_PRESET","freeze","compact","controlFlowFlattening","controlFlowFlatteningThreshold","deadCodeInjection","deadCodeInjectionThreshold","debugProtection","debugProtectionInterval","disableConsoleOutput","domainLock","exclude","HexadecimalIdentifierNamesGenerator","identifiersPrefix","inputFileName","log","renameGlobals","reservedNames","reservedStrings","rotateStringArray","seed","selfDefending","sourceMapBaseUrl","sourceMapFileName","sourceMapMode","Separate","stringArray","stringArrayEncoding","stringArrayThreshold","Browser","transformObjectKeys","unicodeEscapeSequence","NumberUtils","dec","number","AbstractObfuscatingReplacer","AbstractCalleeDataExtractor","AbstractControlFlowReplacer","AbstractControlFlowReplacer_1","controlFlowCustomNodeFactory","replacerDataByControlFlowStorageId","controlFlowStorage","replacerId","usingExistingIdentifierChance","_this","controlFlowStorageId","getStorageId","storageKeysById","getStorageKeysByIdForCurrentStorage","storageKeysForCurrentId","getMathRandom","storageKey","generateStorageKey","getRandomString","getStorage","identifierDataByControlFlowStorageId","Factory__IControlFlowCustomNode","GlobalVariableNoEvalTemplate","DEFAULT_PRESET","config","CalleeDataExtractor","ControlFlowReplacer","ControlFlowCustomNode_1","ExpressionWithOperatorControlFlowReplacer","_AbstractControlFlowR","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","leftExpression","rightExpression","controlFlowStorageCallCustomNode","ExpressionWithOperatorControlFlowStorageCallNode","statementNode","getNode","isExpressionStatementNode","DeadCodeInjectionCustomNode","PropertiesExtractor","NodeAppender_1","NodeFactory_1","NodeStatementUtils_1","AbstractPropertiesExtractor","AbstractPropertiesExtractor_1","cachedHostNodesWithStatementsMap","cachedHostStatementsMap","memberExpressionHostNode","propertiesLength","expressionStatements","removablePropertyIds","propertyValue","isProhibitedPattern","propertyKeyName","getPropertyNodeKeyName","memberExpressionProperty","memberExpressionNode","expressionStatementNode","assignmentExpressionNode","isObjectExpressionNode","transformObjectExpressionNode","objectExpressionNode","filter","_this$extractProperti","extractPropertiesToExpressionStatements","_this$extractProperti2","_slicedToArray2","hostStatement","getHostStatement","hostNodeWithStatements","getHostNodeWithStatements","filterExtractedObjectExpressionProperties","insertAfter","propertyNode","propertyKeyNode","isObjectPatternNode","isArrayPatternNode","isAssignmentPatternNode","isRestElementNode","CustomNodeGroup","AbstractIdentifierNamesGenerator","some","reservedName","exec","LiteralObfuscatingReplacer","ObfuscatingGuard","Initializable_1","MapStorage","storage","storageId","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","_step$value","err","return","size","mergeId","postConstruct","md5_1","__importDefault","chance_1","RandomGenerator","RandomGenerator_1","min","md5Hash","floor","random","Chance","getSourceCode","Number","integer","pool","randomGeneratorPool","string","chalk_1","LoggingPrefix_1","loggingMessage","colorInfo","LoggingPrefix","Base","colorSuccess","colorWarn","loggingLevelColor","loggingPrefix","processedMessage","console","cyan","green","yellow","CalleeDataExtractor_1","FunctionDeclarationCalleeDataExtractor_1","FunctionExpressionCalleeDataExtractor_1","ObjectExpressionCalleeDataExtractor_1","StackTraceAnalyzer_1","ContainerModule","IStackTraceAnalyzer","StackTraceAnalyzer","ICalleeDataExtractor","FunctionDeclarationCalleeDataExtractor","whenTargetNamed","FunctionExpressionCalleeDataExtractor","ObjectExpressionCalleeDataExtractor","Factory__ICalleeDataExtractor","getCacheFactory","AbstractCalleeDataExtractor_1","_AbstractCalleeDataEx","blockScopeBody","calleeBlockStatement","getCalleeBlockStatement","getParentNodeWithStatements","targetNode","traverse","VisitorOption","Break","isVariableDeclaratorNode","objectMembersCallsChain","createObjectMembersCallsChain","functionExpressionName","currentChain","memberExpression","unshift","objectName","shift","findCalleeBlockStatement","objectExpressionProperties","nextItemInCallsChain","isValidTargetPropertyNode","isTargetPropertyNodeWithIdentifierKey","isTargetPropertyNodeWithLiteralKey","calleeDataExtractorFactory","analyzeRecursive","limitIndex","getLimitIndex","blockScopeBodyLength","_loop","blockScopeBodyNode","isCallExpressionNode","Skip","analyzeCallExpressionNode","callExpressionNode","_this2","calleeDataExtractorsList","calleeDataExtractorName","calleeData","extract","lastIndex","limitThresholdActivationIndex","limitThresholdActivationLength","limitThreshold","ControlFlowReplacer_1","NodeTransformer_1","BinaryExpressionControlFlowReplacer_1","BlockStatementControlFlowTransformer_1","CallExpressionControlFlowReplacer_1","DeadCodeInjectionTransformer_1","FunctionControlFlowTransformer_1","LogicalExpressionControlFlowReplacer_1","StringLiteralControlFlowReplacer_1","INodeTransformer","BlockStatementControlFlowTransformer","DeadCodeInjectionTransformer","FunctionControlFlowTransformer","IControlFlowReplacer","BinaryExpressionControlFlowReplacer","CallExpressionControlFlowReplacer","LogicalExpressionControlFlowReplacer","StringLiteralControlFlowReplacer","Factory__IControlFlowReplacer","ExpressionWithOperatorControlFlowReplacer_1","_ExpressionWithOperat","binaryExpressionNode","binaryExpressionFunctionCustomNode","BinaryExpressionFunctionNode","insertCustomNodeToControlFlowStorage","getControlFlowStorageCallNode","TransformationStage_1","AbstractNodeTransformer_1","NodeUtils_1","_AbstractNodeTransfor","arrayUtils","transformationStage","ControlFlowFlattening","leave","transformNode","blockStatementNode","canTransformBlockStatementNode","blockStatementBody","originalKeys","createWithRange","shuffledKeys","shuffle","originalKeysIndexesInShuffledArray","blockStatementControlFlowFlatteningCustomNode","BlockStatementControlFlowFlatteningNode","newBlockStatementNode","isBreakOrContinueStatement","isVariableDeclarationWithLetOrConstKind","isVariableDeclarationNode","isClassDeclaration","isClassDeclarationNode","canTransform","isWhileStatementNode","isProhibitedStatementNode","IArrayUtils","String","callExpressionFunctionCustomNode","CallExpressionFunctionNode","expressionArguments","CallExpressionControlFlowStorageCallNode","DeadCodeInjectionCustomNode_1","deadCodeInjectionCustomNodeFactory","transformersRunner","deadCodeInjectionRootAstHostNodeSet","collectedBlockStatements","collectedBlockStatementsTotalLength","DeadCodeInjection","analyzeNode","Finalizing","isDeadCodeInjectionRootAstHostNode","restoreNode","programNode","_this3","clonedBlockStatementNode","clone","isValidCollectedBlockStatementNode","transformedBlockStatementNode","makeClonedBlockStatementNodeUnique","minCollectedBlockStatementsCount","isValidWrappedBlockStatementNode","maxInteger","randomIndex","randomBlockStatementNode","splice","replaceBlockStatementNode","deadCodeInjectionRootAstHostNode","hostNodeFirstStatement","hostNode","functionExpressionNode","transform","transformersToRenameBlockScopeIdentifiers","Obfuscating","functionDeclarationNode","deadCodeInjectionRootAstHostNodeName","blockStatementDeadCodeInjectionCustomNode","BlockStatementDeadCodeInjectionNode","isAwaitExpressionNode","isSuperNode","indexInScope","slicedBody","hostBlockStatementNode","functionDeclarationName","isScopeHoistedFunctionDeclaration","nestedBlockStatementsCount","isValidBlockStatementNode","maxNestedBlockStatementsCount","isProhibitedNodeInsideCollectedBlockStatement","isScopeHoistingFunctionDeclaration","CatchClauseTransformer","ClassDeclarationTransformer","FunctionDeclarationTransformer","FunctionTransformer","LabeledStatementTransformer","VariableDeclarationTransformer","Factory__IDeadCodeInjectionCustomNode","controlFlowStorageFactory","controlFlowReplacerFactory","controlFlowData","visitedFunctionNodes","hostNodesWithControlFlowNode","functionNode","getHostNode","getControlFlowStorage","transformFunctionBody","getLength","controlFlowStorageCustomNode","ControlFlowStorageNode","hostControlFlowStorage","mergeWith","functionNodeBody","blockScopesOfNode","getParentNodesWithStatements","pop","hostNodeSearchMinDepth","hostNodeSearchMaxDepth","isIgnoredNode","isVisitedFunctionNode","controlFlowReplacersMap","controlFlowReplacerName","Factory__TControlFlowStorage","logicalExpressionNode","checkForProhibitedExpressions","logicalExpressionFunctionCustomNode","LogicalExpressionFunctionNode","expressionNode","nodeForCheck","literalFunctionCustomNode","StringLiteralNode","StringLiteralControlFlowStorageCallNode","PropertiesExtractor_1","AssignmentExpressionPropertiesExtractor_1","MemberExpressionTransformer_1","MethodDefinitionTransformer_1","ObjectExpressionKeysTransformer_1","ObjectExpressionTransformer_1","TemplateLiteralTransformer_1","VariableDeclaratorPropertiesExtractor_1","MemberExpressionTransformer","MethodDefinitionTransformer","ObjectExpressionKeysTransformer","ObjectExpressionTransformer","TemplateLiteralTransformer","IPropertiesExtractor","AssignmentExpressionPropertiesExtractor","VariableDeclaratorPropertiesExtractor","Factory__IPropertiesExtractor","_AbstractPropertiesEx","leftNode","Converting","methodDefinitionNode","ignoredNames","propertiesExtractorFactory","propertiesExtractorName","propertiesExtractorsMap","escapeSequenceEncoder","transformComputedProperty","transformBaseProperty","getPropertyKeyValue","inputValue","encode","IEscapeSequenceEncoder","isValidTemplateLiteralNode","templateLiteralNode","transformedNode","templateLiteralExpressions","expressions","nodes","quasis","templateElement","cooked","isLiteralNodeWithStringValue","root","isTemplateLiteralNode","isTaggedTemplateExpressionNode","isProhibitedObjectExpressionNode","variableDeclaratorNode","hostVariableDeclarator","getHostVariableDeclaratorNode","getHostVariableDeclarationNode","indexOfDeclarator","variableDeclarator","CustomNode_1","CustomNodeGroup_1","ConsoleOutputCustomNodeGroup_1","DebugProtectionCustomNodeGroup_1","DomainLockCustomNodeGroup_1","SelfDefendingCustomNodeGroup_1","StringArrayCustomNodeGroup_1","BinaryExpressionFunctionNode_1","BlockStatementControlFlowFlatteningNode_1","BlockStatementDeadCodeInjectionNode_1","CallExpressionControlFlowStorageCallNode_1","CallExpressionFunctionNode_1","ControlFlowStorageNode_1","ConsoleOutputDisableExpressionNode_1","DebugProtectionFunctionCallNode_1","DebugProtectionFunctionIntervalNode_1","DebugProtectionFunctionNode_1","DomainLockNode_1","ExpressionWithOperatorControlFlowStorageCallNode_1","LogicalExpressionFunctionNode_1","NodeCallsControllerFunctionNode_1","SelfDefendingUnicodeNode_1","StringArrayCallsWrapper_1","StringArrayNode_1","StringArrayRotateFunctionNode_1","StringLiteralControlFlowStorageCallNode_1","StringLiteralNode_1","ICustomNode","ConsoleOutputDisableExpressionNode","DebugProtectionFunctionCallNode","DebugProtectionFunctionIntervalNode","DebugProtectionFunctionNode","DomainLockNode","NodeCallsControllerFunctionNode","SelfDefendingUnicodeNode","StringArrayCallsWrapper","StringArrayNode","StringArrayRotateFunctionNode","Newable__ICustomNode","toConstructor","ICustomNodeGroup","ConsoleOutputCustomNodeGroup","DebugProtectionCustomNodeGroup","DomainLockCustomNodeGroup","SelfDefendingCustomNodeGroup","StringArrayCustomNodeGroup","Factory__ICustomNode","getFactory","getConstructorFactory","Factory__ICustomNodeGroup","ObfuscationEvent_1","AbstractCustomNodeGroup_1","_AbstractCustomNodeGr","customNodeFactory","BeforeObfuscation","randomStackTraceIndex","getRandomStackTraceIndex","appendCustomNodeIfExist","appendToOptimalBlockScope","targetNodeWithStatements","callsControllerFunctionName","consoleOutputDisableExpressionNode","nodeCallsControllerFunctionNode","append","programBodyLength","debugProtectionFunctionName","debugProtectionFunctionNode","debugProtectionFunctionCallNode","debugProtectionFunctionIntervalNode","domainLockNode","AfterObfuscation","selfDefendingUnicodeNode","stringArrayStorage","stringArrayRotateValue","stringArrayNode","stringArrayCallsWrapper","stringArrayRotateFunctionNode","_stringArrayStorageId","_stringArrayStorageId2","stringArrayName","stringArrayCallsWrapperName","TStringArrayStorage","_AbstractCustomNode_","returnStatementNode","controllerIdentifierName","indexIdentifierName","variableDeclarationNode","join","whileStatementNode","switchStatementNode","updateExpressionNode","isReturnStatementNode","continueStatement","switchCaseNode","breakStatement","random1","random2","leftString","rightString","_ref","_ref2","ifStatementNode","controlFlowStorageName","controlFlowStorageKey","calleeIdentifier","argumentsLength","propertyNodes","from","string_template_1","ConsoleOutputDisableExpressionTemplate_1","GlobalVariableNoEvalTemplate_1","convertCodeToStructure","getTemplate","globalVariableTemplate","BrowserNoEval","getGlobalVariableTemplate","ConsoleOutputDisableExpressionTemplate","consoleLogDisableFunctionName","singleNodeCallControllerFunctionName","DebugProtectionFunctionCallTemplate_1","DebugProtectionFunctionCallTemplate","DebugProtectionFunctionIntervalTemplate_1","DebugProtectionFunctionIntervalTemplate","DebuggerTemplate_1","DebuggerTemplateNoEval_1","DebugProtectionFunctionTemplate_1","debuggerTemplate","DebuggerTemplate","DebuggerTemplateNoEval","DebugProtectionFunctionTemplate","DomainLockNodeTemplate_1","cryptUtils","domainsString","_this$cryptUtils$hide","hideString","_this$cryptUtils$hide2","hiddenDomainsString","diff","DomainLockNodeTemplate","domainLockFunctionName","domains","ICryptUtils","leftValue","rightValue","SingleNodeCallControllerTemplate_1","NoCustomNodes_1","JavaScriptObfuscatorFacade_1","SingleNodeCallControllerTemplate","getObfuscatedCode","SelfDefendingTemplate_1","SelfDefendingTemplate","selfDefendingFunctionName","StringArrayEncoding_1","AtobTemplate_1","Rc4Template_1","StringArrayBase64DecodeNodeTemplate_1","StringArrayCallsWrapperTemplate_1","StringArrayRC4DecodeNodeTemplate_1","decodeNodeTemplate","getDecodeStringArrayTemplate","StringArrayCallsWrapperTemplate","atobPolyfill","AtobTemplate","decodeStringArrayTemplate","selfDefendingCode","Rc4","StringArrayRc4DecodeNodeTemplate","rc4Polyfill","Rc4Template","Base64","StringArrayBase64DecodeNodeTemplate","rc4BytesIdentifier","statesIdentifier","newStateIdentifier","firstStateIdentifier","secondStateIdentifier","checkStateIdentifier","runStateIdentifier","getStateIdentifier","stateResultIdentifier","initializedIdentifier","base64DecodeFunctionIdentifier","dataIdentifier","rc4Identifier","onceIdentifier","StringArrayTemplate_1","rotateArray","_get2","StringArrayTemplate","StringArrayRotateFunctionTemplate_1","NumberUtils_1","timesName","whileFunctionName","StringArrayRotateFunctionTemplate","toHex","literalValue","HexadecimalIdentifierNamesGenerator_1","MangledIdentifierNamesGenerator_1","IIdentifierNamesGenerator","MangledIdentifierNamesGenerator","cachedIdentifierNamesGenerator","AbstractIdentifierNamesGenerator_1","Utils_1","_AbstractIdentifierNa","randomVariableNameSet","randomInteger","baseIdentifierName","substr","baseIdentifierNameLength","identifierName","previousMangledName","initMangledNameCharacter","generateNewMangledName","mangledName","nameSequence","nameLength","zeroSequence","num","repeat","character","charAt","indexInSequence","substring","newMangledName","isValidIdentifierName","Factory__INodeTransformer","IdentifierObfuscatingReplacer_1","LiteralObfuscatingReplacer_1","BaseIdentifierObfuscatingReplacer_1","BooleanLiteralObfuscatingReplacer_1","CatchClauseTransformer_1","ClassDeclarationTransformer_1","FunctionDeclarationTransformer_1","FunctionTransformer_1","ImportDeclarationTransformer_1","LabeledStatementTransformer_1","LiteralTransformer_1","NumberLiteralObfuscatingReplacer_1","StringLiteralObfuscatingReplacer_1","VariableDeclarationTransformer_1","ImportDeclarationTransformer","LiteralTransformer","IObfuscatingReplacer","BooleanLiteralObfuscatingReplacer","NumberLiteralObfuscatingReplacer","StringLiteralObfuscatingReplacer","IIdentifierObfuscatingReplacer","BaseIdentifierObfuscatingReplacer","Factory__IObfuscatingReplacer","Factory__IIdentifierObfuscatingReplacer","AbstractObfuscatingReplacer_1","_AbstractObfuscatingR","blockScopesMap","nodeValue","lexicalScopeNode","namesMap","nodeName","isReservedName","generateWithPrefix","getTrueUnaryExpressionNode","getFalseUnaryExpressionNode","arrayExpressionNode","NodeLexicalScopeUtils_1","identifierObfuscatingReplacerFactory","identifierObfuscatingReplacer","isCatchClauseNode","catchClauseNode","getLexicalScope","storeCatchClauseParam","replaceCatchClauseParam","param","storeLocalName","isReplaceableIdentifierNode","newIdentifierName","renamedIdentifier","replaceableIdentifiers","isExportNamedDeclarationNode","classDeclarationNode","isGlobalDeclaration","storeClassName","replaceScopeCachedIdentifiers","replaceScopeIdentifiers","storeGlobalName","cachedReplaceableIdentifiers","cachedReplaceableIdentifierLength","replaceableIdentifier","newReplaceableIdentifier","storedReplaceableIdentifiersNamesMap","isRenamedIdentifier","storedReplaceableIdentifiers","storeFunctionName","storeFunctionParams","replaceFunctionParams","getLexicalScopes","visitor","isProhibitedIdentifierOfPropertyNode","paramsNode","_this4","ignoredIdentifierNamesSet","isProhibitedIdentifierOfShorthandPropertyNode","isGlobalFunctionDeclarationIdentifier","isImportDeclarationNode","importDeclarationNode","storeImportSpecifierNames","specifiers","importSpecifierNode","isProhibitedImportSpecifierNode","local","_this5","isImportSpecifierNode","imported","labeledStatementNode","storeLabeledStatementName","replaceLabeledStatementName","newIdentifier","literalObfuscatingReplacerFactory","isReplacedLiteral","isProhibitedNode","newLiteralNode","numberLiteralCache","rawValue","isCeil","nodesCache","stringLiteralHexadecimalIndexCache","rc4Keys","rc4KeyLength","rc4KeysCount","isReservedString","useStringArray","canUseStringArray","cacheKey","resultNode","replaceWithStringArrayCallNode","replaceWithLiteralNode","minimumLengthForStringArray","stringArrayStorageLength","fromCache","hexadecimalRawIndex","hexadecimalIndex","encodedValue","btoa","rc4","_this$getEncodedValue","getEncodedValue","escapedValue","stringArrayStorageCallsWrapperName","_this$getStringArrayH","getStringArrayHexadecimalIndex","callExpressionArgs","getHexadecimalLiteralNode","getRc4KeyLiteralNode","stringArrayIdentifierNode","reservedString","hexadecimalLiteralNode","replacedLiteral","rc4KeyLiteralNode","storeVariableNames","traverseDeclarationIdentifiers","cachedReplaceableIdentifiersNamesMap","identifierNames","declarationNode","Options_1","OptionsNormalizer_1","Options","IOptionsNormalizer","OptionsNormalizer","class_validator_1","Default_1","ValidationErrorsFormatter_1","optionsNormalizer","errors","validateSync","validatorOptions","ValidationErrorsFormatter","format","normalize","validationError","IsBoolean","IsNumber","Min","Max","IsArray","ArrayUnique","IsString","each","IsIn","ValidateIf","IsUrl","require_protocol","require_tld","require_valid_protocol","Inline","Node","errorMessages","error","formatWithNestedConstraints","constraints","rootError","nestedErrors","constraint","ControlFlowFlatteningThresholdRule_1","DeadCodeInjectionRule_1","DeadCodeInjectionThresholdRule_1","DomainLockRule_1","InputFileNameRule_1","SelfDefendingRule_1","SourceMapBaseUrlRule_1","SourceMapFileNameRule_1","StringArrayRule_1","StringArrayEncodingRule_1","StringArrayThresholdRule_1","normalizedOptions","normalizerRules","normalizerRule","ControlFlowFlatteningThresholdRule","DeadCodeInjectionRule","DeadCodeInjectionThresholdRule","DomainLockRule","InputFileNameRule","SelfDefendingRule","SourceMapBaseUrlRule","SourceMapFileNameRule","StringArrayRule","StringArrayEncodingRule","StringArrayThresholdRule","normalizedDomains","domain","extractDomainFrom","endsWith","ObfuscatingGuard_1","BlackListObfuscatingGuard_1","CommentsTransformer_1","ConditionalCommentObfuscatingGuard_1","CustomNodesTransformer_1","EvaCallExpressionTransformer_1","MetadataTransformer_1","ObfuscatingGuardsTransformer_1","ParentificationTransformer_1","CommentsTransformer","CustomNodesTransformer","EvalCallExpressionTransformer","MetadataTransformer","ObfuscatingGuardsTransformer","ParentificationTransformer","INodeGuard","BlackListObfuscatingGuard","BlackListNodeGuard","ConditionalCommentObfuscatingGuard","ConditionalCommentNodeGuard","Factory__INodeGuard","blackListGuardsLength","blackListGuards","isUseStrictOperator","Preparing","isNodeWithComments","transformComments","comments","comment","preservedWords","preservedWord","obfuscationAllowedForCurrentNode","obfuscationAllowedForNextNode","checkComments","commentsLength","obfuscationAllowed","obfuscationEnableCommentRegExp","obfuscationDisableCommentRegExp","stackTraceAnalyzer","obfuscationEventEmitter","customNodeGroupStorage","appendCustomNodesBeforeObfuscation","appendCustomNodesAfterObfuscation","analyze","customNodeGroup","once","getAppendEvent","appendCustomNodes","emit","TCustomNodeGroupStorage","js_string_escape_1","EvalCallExpressionTransformer_1","evalRootAstHostNodeSet","isEvalRootAstHostNode","callExpressionFirstArgument","ast","evalString","extractEvalStringFromCallExpressionArgument","_a","evalRootAstHostNode","targetAst","convertStructureToCode","extractEvalStringFromLiteralNode","extractEvalStringFromTemplateLiteralNode","obfuscatingGuardFactory","obfuscatingGuards","obfuscatingGuardsList","every","nodeGuard","check","ControlFlowStorage_1","CustomNodeGroupStorage_1","StringArrayStorage_1","CustomNodeGroupStorage","StringArrayStorage","Newable__TControlFlowStorage","ControlFlowStorage","_MapStorage_1$MapStor","MapStorage_1","customNodeGroupFactory","customNodeGroupsList","customNodeGroupName","ArrayStorage_1","_ArrayStorage_1$Array","baseStringArrayName","stringArrayNameLength","baseStringArrayCallsWrapperName","rotationValue","rotate","ArrayStorage","storageLength","ArrayUtils_1","CryptUtils_1","EscapeSequenceEncoder_1","ArrayUtils","CryptUtils","EscapeSequenceEncoder","range","array","times","temp","newArray","shuffledArray","j","output","encodeURIComponent","match","p1","fromCharCode","parseInt","block","charCode","idx","charCodeAt","str","randomStringDiff","randomStringDiffArray","s1","s2","i1","i2","randomMerge","x","y","stringsCache","encodeAllSymbols","template","replaceRegExp","escapeSequenceRegExp","regExp","LoggingMessage_1","EspreeFacade_1","obfuscatedCodeFactory","logger","timeStart","Date","now","info","LoggingMessage","Version","ObfuscationStarted","RandomGeneratorSeed","getSeed","parseCode","obfuscatedAstTree","transformAstTree","generatorOutput","generateCode","obfuscationTime","success","ObfuscationCompleted","EspreeFacade","espreeParseOptions","runTransformationStage","warn","EmptySourceCode","escodegenParams","sourceContent","transformersList","attachComment","ecmaFeatures","experimentalObjectRestSpread","ecmaVersion","loc","verbatim","input","sourceTypeLength","sourceTypes","parseType","processParsingError","message","line","lineNumber","column","inputConfig","errorMessage","position","errorLine","startErrorIndex","nearestSymbolsCount","endErrorIndex","formattedPointer","colorError","formattedCodeSlice","red","events_1","decorate","EventEmitter","_events_1$EventEmitte","correctObfuscatedCode","sourceMapUrl","sourceMappingUrl","VisitorDirection_1","nodeTransformerFactory","nodeTransformers","enterVisitors","leaveVisitors","nodeTransformersLength","getVisitor","mergeVisitorsForDirection","VisitorDirection","Enter","Leave","visitors","direction","visitorsLength","visitorFunction","visitorResult","isNode","commander","path","ArraySanitizer_1","BooleanSanitizer_1","IdentifierNamesGeneratorSanitizer_1","ObfuscatingTargetSanitizer_1","SourceMapModeSanitizer_1","StringArrayEncodingSanitizer_1","CLIUtils_1","SourceCodeReader_1","JavaScriptObfuscatorCLI","argv","rawArguments","inputPath","commands","Command","configureCommands","configureHelp","inputCLIOptions","opts","outputHelp","sourceCodeData","SourceCodeReader","readSourceCode","processSourceCodeData","filterOptions","configFilePath","configFileLocation","resolve","configFileOptions","CLIUtils","getUserConfig","basename","usage","option","BooleanSanitizer","parseFloat","ArraySanitizer","IdentifierNamesGeneratorSanitizer","SourceMapModeSanitizer","StringArrayEncodingSanitizer","ObfuscationTargetSanitizer","on","outputPath","filePath","outputCodePath","getOutputCodePath","processSourceCode","sourceCodeIndex","buildOptions","baseIdentifiersPrefix","processSourceCodeWithSourceMap","processSourceCodeWithoutSourceMap","filteredOptions","writeFile","outputSourceMapPath","getOutputSourceMapPath","getSourceMap","encoding","obfuscatedFilePrefix","JavaScriptObfuscatorCLIFacade_1","JavaScriptObfuscatorCLI_1","JavaScriptObfuscatorCLIFacade","javaScriptObfuscatorCLI","run","SyntaxError","trim","fs","mkdirp","lastIndexOf","configPath","_b","data","sync","dirname","writeFileSync","webpackEmptyContext","req","e","multimatch_1","isFilePath","isValidFile","readFile","isDirectoryPath","isValidDirectory","readDirectoryRecursive","availableFilePaths","availableInputExtensions","extension","directoryPath","fileData","readdirSync","fileName","logFilePath","readFileSync","isExcludedPath","extname","excludePatterns","isExcludedFilePathByGlobPattern","excludePattern","statSync","isDirectory","isFile","normalizedFilePath","CLI"],"mappings":"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","file":"index.cli.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 201);\n","module.exports = require(\"@babel/runtime/helpers/interopRequireDefault\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"inversify\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"tslib\");","export enum ServiceIdentifiers {\n    Factory__ICalleeDataExtractor = 'Factory<ICalleeDataExtractor>',\n    Factory__IControlFlowCustomNode = 'Factory<IControlFlowCustomNode>',\n    Factory__IControlFlowReplacer = 'Factory<IControlFlowReplacer>',\n    Factory__ICustomNode = 'Factory<ICustomNode>',\n    Factory__ICustomNodeGroup = 'Factory<ICustomNodeGroup>',\n    Factory__IDeadCodeInjectionCustomNode = 'Factory<IDeadCodeInjectionCustomNode>',\n    Factory__IIdentifierNamesGenerator = 'Factory<IIdentifierNamesGenerator>',\n    Factory__IIdentifierObfuscatingReplacer = 'Factory<IIdentifierObfuscatingReplacer>',\n    Factory__INodeGuard = 'Factory<INodeGuard>',\n    Factory__INodeTransformer = 'Factory<INodeTransformer[]>',\n    Factory__IObfuscatedCode = 'Factory<IObfuscatedCode>',\n    Factory__IObfuscatingReplacer = 'Factory<IObfuscatingReplacer>',\n    Factory__IPropertiesExtractor = 'Factory<IPropertiesExtractor>',\n    Factory__TControlFlowStorage = 'Factory<TControlFlowStorage>',\n    IArrayUtils = 'IArrayUtils',\n    ICalleeDataExtractor = 'ICalleeDataExtractor',\n    ICryptUtils = 'ICryptUtils',\n    ICustomNode = 'ICustomNode',\n    ICustomNodeGroup = 'ICustomNodeGroup',\n    IControlFlowReplacer = 'IControlFlowReplacer',\n    IEscapeSequenceEncoder = 'IEscapeSequenceEncoder',\n    IIdentifierNamesGenerator = 'IIdentifierNamesGenerator',\n    IIdentifierObfuscatingReplacer = 'IIdentifierObfuscatingReplacer',\n    IJavaScriptObfuscator = 'IJavaScriptObfuscator',\n    ILogger = 'ILogger',\n    INodeGuard = 'INodeGuard',\n    INodeTransformer = 'INodeTransformer',\n    IObfuscationEventEmitter = 'IObfuscationEventEmitter',\n    IObfuscatedCode = 'IObfuscatedCode',\n    IOptions = 'IOptions',\n    IOptionsNormalizer = 'IOptionsNormalizer',\n    IObfuscatingReplacer = 'IObfuscatingReplacer',\n    IPropertiesExtractor = 'IPropertiesExtractor',\n    IRandomGenerator = 'IRandomGenerator',\n    ISourceCode = 'ISourceCode',\n    ISourceMapCorrector = 'ISourceMapCorrector',\n    IStackTraceAnalyzer = 'IStackTraceAnalyzer',\n    ITransformersRunner = 'ITransformersRunner',\n    Newable__ICustomNode = 'Newable<ICustomNode>',\n    Newable__TControlFlowStorage = 'Newable<TControlFlowStorage>',\n    TCustomNodeGroupStorage = 'TCustomNodeGroupStorage',\n    TInputOptions = 'TInputOptions',\n    TStringArrayStorage = 'TStringArrayStorage'\n}\n","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","import * as ESTree from 'estree';\n\nimport { TNodeWithLexicalScope } from '../types/node/TNodeWithLexicalScope';\nimport { TNodeWithStatements } from '../types/node/TNodeWithStatements';\n\nimport { NodeType } from '../enums/node/NodeType';\n\nexport class NodeGuards {\n    /**\n     * @type {string[]}\n     */\n    private static readonly nodesWithLexicalStatements: string[] = [\n        NodeType.ArrowFunctionExpression,\n        NodeType.FunctionDeclaration,\n        NodeType.FunctionExpression,\n        NodeType.MethodDefinition,\n    ];\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isArrayPatternNode (node: ESTree.Node): node is ESTree.ArrayPattern {\n        return node.type === NodeType.ArrayPattern;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isArrowFunctionExpressionNode (node: ESTree.Node): node is ESTree.ArrowFunctionExpression {\n        return node.type === NodeType.ArrowFunctionExpression;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isAssignmentPatternNode (node: ESTree.Node): node is ESTree.AssignmentPattern {\n        return node.type === NodeType.AssignmentPattern;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isAwaitExpressionNode (node: ESTree.Node): node is ESTree.AwaitExpression {\n        return node.type === NodeType.AwaitExpression;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isBlockStatementNode (node: ESTree.Node): node is ESTree.BlockStatement {\n        return node.type === NodeType.BlockStatement;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isBreakStatementNode (node: ESTree.Node): node is ESTree.BreakStatement {\n        return node.type === NodeType.BreakStatement;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isCallExpressionNode (node: ESTree.Node): node is ESTree.CallExpression {\n        return node.type === NodeType.CallExpression;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isCatchClauseNode (node: ESTree.Node): node is ESTree.CatchClause {\n        return node.type === NodeType.CatchClause;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isClassDeclarationNode (node: ESTree.Node): node is ESTree.ClassDeclaration {\n        return node.type === NodeType.ClassDeclaration;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isContinueStatementNode (node: ESTree.Node): node is ESTree.ContinueStatement {\n        return node.type === NodeType.ContinueStatement;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isExportNamedDeclarationNode (node: ESTree.Node): node is ESTree.ExportNamedDeclaration {\n        return node.type === NodeType.ExportNamedDeclaration;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isExpressionStatementNode (node: ESTree.Node): node is ESTree.ExpressionStatement {\n        return node.type === NodeType.ExpressionStatement;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isFunctionNode (node: ESTree.Node): node is ESTree.Function {\n        return NodeGuards.isFunctionDeclarationNode(node) ||\n            NodeGuards.isFunctionExpressionNode(node) ||\n            NodeGuards.isArrowFunctionExpressionNode(node);\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isFunctionDeclarationNode (node: ESTree.Node): node is ESTree.FunctionDeclaration {\n        return node.type === NodeType.FunctionDeclaration;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isFunctionExpressionNode (node: ESTree.Node): node is ESTree.FunctionExpression {\n        return node.type === NodeType.FunctionExpression;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isIdentifierNode (node: ESTree.Node): node is ESTree.Identifier {\n        return node.type === NodeType.Identifier;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isImportDeclarationNode (node: ESTree.Node): node is ESTree.ImportDeclaration {\n        return node.type === NodeType.ImportDeclaration;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isImportSpecifierNode (node: ESTree.Node): node is ESTree.ImportSpecifier {\n        return node.type === NodeType.ImportSpecifier;\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {boolean}\n     */\n    public static isLabelIdentifierNode (node: ESTree.Node, parentNode: ESTree.Node): node is ESTree.Identifier {\n        const parentNodeIsLabeledStatementNode: boolean = NodeGuards.isLabeledStatementNode(parentNode) && parentNode.label === node;\n        const parentNodeIsContinueStatementNode: boolean = NodeGuards.isContinueStatementNode(parentNode) && parentNode.label === node;\n        const parentNodeIsBreakStatementNode: boolean = NodeGuards.isBreakStatementNode(parentNode) && parentNode.label === node;\n\n        return parentNodeIsLabeledStatementNode || parentNodeIsContinueStatementNode || parentNodeIsBreakStatementNode;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isLabeledStatementNode (node: ESTree.Node): node is ESTree.LabeledStatement {\n        return node.type === NodeType.LabeledStatement;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isLiteralNode (node: ESTree.Node): node is ESTree.Literal {\n        return node.type === NodeType.Literal;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isMemberExpressionNode (node: ESTree.Node): node is ESTree.MemberExpression {\n        return node.type === NodeType.MemberExpression;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isMethodDefinitionNode (node: ESTree.Node): node is ESTree.MethodDefinition {\n        return node.type === NodeType.MethodDefinition;\n    }\n\n    /**\n     * @param {Object} object\n     * @returns {boolean}\n     */\n    public static isNode (object: Object & { type?: string }): object is ESTree.Node {\n        return object && !object.type !== undefined;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isNodeWithLexicalScope (node: ESTree.Node): node is TNodeWithLexicalScope {\n        return NodeGuards.isProgramNode(node) || NodeGuards.isFunctionNode(node);\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {boolean}\n     */\n    public static isNodeWithLexicalScopeStatements (\n        node: ESTree.Node,\n        parentNode: ESTree.Node\n    ): node is TNodeWithStatements {\n        return NodeGuards.isProgramNode(node)\n            || (NodeGuards.isBlockStatementNode(node) && NodeGuards.nodesWithLexicalStatements.includes(parentNode.type));\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isNodeWithStatements (node: ESTree.Node): node is TNodeWithStatements {\n        return NodeGuards.isProgramNode(node)\n            || NodeGuards.isBlockStatementNode(node)\n            || NodeGuards.isSwitchCaseNode(node);\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isNodeWithComments (node: ESTree.Node): node is ESTree.Node {\n        return Boolean(node.leadingComments) || Boolean(node.trailingComments);\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isObjectPatternNode (node: ESTree.Node): node is ESTree.ObjectPattern {\n        return node.type === NodeType.ObjectPattern;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isObjectExpressionNode (node: ESTree.Node): node is ESTree.ObjectExpression {\n        return node.type === NodeType.ObjectExpression;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isProgramNode (node: ESTree.Node): node is ESTree.Program {\n        return node.type === NodeType.Program;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isPropertyNode (node: ESTree.Node): node is ESTree.Property {\n        return node.type === NodeType.Property;\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {boolean}\n     */\n    public static isReplaceableIdentifierNode (node: ESTree.Node, parentNode: ESTree.Node): node is ESTree.Identifier {\n        if (!NodeGuards.isIdentifierNode(node)) {\n            return false;\n        }\n\n        const parentNodeIsPropertyNode: boolean = NodeGuards.isPropertyNode(parentNode) &&\n            !parentNode.computed &&\n            parentNode.key === node;\n        const parentNodeIsMemberExpressionNode: boolean = (\n            NodeGuards.isMemberExpressionNode(parentNode) &&\n            !parentNode.computed &&\n            parentNode.property === node\n        );\n        const parentNodeIsMethodDefinitionNode: boolean = NodeGuards.isMethodDefinitionNode(parentNode) &&\n            !parentNode.computed;\n        const isLabelIdentifierNode: boolean = NodeGuards.isLabelIdentifierNode(node, parentNode);\n\n        return !parentNodeIsPropertyNode &&\n            !parentNodeIsMemberExpressionNode &&\n            !parentNodeIsMethodDefinitionNode &&\n            !isLabelIdentifierNode;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isRestElementNode (node: ESTree.Node): node is ESTree.RestElement {\n        return node.type === NodeType.RestElement;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isReturnStatementNode (node: ESTree.Node): node is ESTree.ReturnStatement {\n        return node.type === NodeType.ReturnStatement;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isSuperNode (node: ESTree.Node): node is ESTree.Super {\n        return node.type === NodeType.Super;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isSwitchCaseNode (node: ESTree.Node): node is ESTree.SwitchCase {\n        return node.type === NodeType.SwitchCase;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isTaggedTemplateExpressionNode (node: ESTree.Node): node is ESTree.TaggedTemplateExpression {\n        return node.type === NodeType.TaggedTemplateExpression;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isTemplateLiteralNode (node: ESTree.Node): node is ESTree.TemplateLiteral {\n        return node.type === NodeType.TemplateLiteral;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isUnaryExpressionNode (node: ESTree.Node): node is ESTree.UnaryExpression {\n        return node.type === NodeType.UnaryExpression;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isUseStrictOperator (node: ESTree.Node): node is ESTree.ExpressionStatement {\n        return node.type === NodeType.ExpressionStatement && node.directive === 'use strict';\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isVariableDeclarationNode (node: ESTree.Node): node is ESTree.VariableDeclaration {\n        return node.type === NodeType.VariableDeclaration;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isVariableDeclaratorNode (node: ESTree.Node): node is ESTree.VariableDeclarator {\n        return node.type === NodeType.VariableDeclarator;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isWhileStatementNode (node: ESTree.Node): node is ESTree.WhileStatement {\n        return node.type === NodeType.WhileStatement;\n    }\n}\n","/* tslint:disable:no-invalid-this */\n\nimport { IInitializable } from '../interfaces/IInitializable';\n\nconst defaultDescriptor: PropertyDescriptor = {\n    configurable: true,\n    enumerable: true\n};\nconst initializedTargetMetadataKey: string = '_initialized';\nconst initializablePropertiesSetMetadataKey: string = '_initializablePropertiesSet';\nconst wrappedMethodsSetMetadataKey: string = '_wrappedMethodsSet';\nconst constructorMethodName: string = 'constructor';\n\n/**\n * @param {string} initializeMethodName\n * @returns {(target: IInitializable, propertyKey: (string | symbol)) => any}\n */\nexport function initializable (\n    initializeMethodName: string = 'initialize'\n): (target: IInitializable, propertyKey: string | symbol) => any {\n    const decoratorName: string = Object.keys(this)[0];\n\n    return (target: IInitializable, propertyKey: string | symbol): PropertyDescriptor => {\n        const initializeMethod: Function = target[initializeMethodName];\n\n        if (!initializeMethod || typeof initializeMethod !== 'function') {\n            throw new Error(`\\`${initializeMethodName}\\` method with initialization logic not ` +\n                `found. \\`@${decoratorName}\\` decorator requires \\`${initializeMethodName}\\` method`);\n        }\n\n        /**\n         * Stage #1: initialize target metadata\n         */\n        initializeTargetMetadata(initializedTargetMetadataKey, false, target);\n        initializeTargetMetadata(initializablePropertiesSetMetadataKey, new Set(), target);\n        initializeTargetMetadata(wrappedMethodsSetMetadataKey, new Set(), target);\n\n        /**\n         * Stage #2: wrap target methods\n         */\n        wrapTargetMethodsInInitializedCheck(target, initializeMethodName);\n        wrapInitializeMethodInInitializeCheck(target, initializeMethodName, propertyKey);\n\n        /**\n         * Stage #3: wrap target properties\n         */\n        return wrapInitializableProperty(target, propertyKey);\n    };\n}\n\n/**\n * @param {string} metadataKey\n * @param metadataValue\n * @param {IInitializable} target\n */\nfunction initializeTargetMetadata (metadataKey: string, metadataValue: any, target: IInitializable): void {\n    const hasInitializedMetadata: boolean = Reflect.hasMetadata(metadataKey, target);\n\n    if (!hasInitializedMetadata) {\n        Reflect.defineMetadata(metadataKey, metadataValue, target);\n    }\n}\n\n/**\n * Wraps all target methods with additional logic that check that this methods will called after `initialize` method\n *\n * @param {IInitializable} target\n * @param {string} initializeMethodName\n */\nfunction wrapTargetMethodsInInitializedCheck (target: IInitializable, initializeMethodName: string): void {\n    const ownPropertyNames: string[] = Object.getOwnPropertyNames(target);\n    const prohibitedPropertyNames: string[] = [initializeMethodName, constructorMethodName];\n\n    ownPropertyNames.forEach((propertyName: string) => {\n        const initializablePropertiesSet: Set <string | symbol> = Reflect\n            .getMetadata(initializablePropertiesSetMetadataKey, target);\n        const wrappedMethodsSet: Set <string | symbol> = Reflect\n            .getMetadata(wrappedMethodsSetMetadataKey, target);\n\n        const isProhibitedPropertyName: boolean = prohibitedPropertyNames.includes(propertyName)\n            || initializablePropertiesSet.has(propertyName)\n            || wrappedMethodsSet.has(propertyName);\n\n        if (isProhibitedPropertyName) {\n            return;\n        }\n\n        const targetProperty: IInitializable[keyof IInitializable] = target[propertyName];\n\n        if (typeof targetProperty !== 'function') {\n            return;\n        }\n\n        const methodDescriptor: PropertyDescriptor = Object\n            .getOwnPropertyDescriptor(target, propertyName) || defaultDescriptor;\n        const originalMethod: Function = methodDescriptor.value;\n\n        Object.defineProperty(target, propertyName, {\n            ...methodDescriptor,\n            value: function (): void {\n                if (!Reflect.getMetadata(initializedTargetMetadataKey, this)) {\n                    throw new Error(`Class should be initialized with \\`${initializeMethodName}()\\` method`);\n                }\n\n                return originalMethod.apply(this, arguments);\n            }\n        });\n\n        wrappedMethodsSet.add(propertyName);\n    });\n}\n\n/**\n * Wraps `initialize` method with additional logic to check that `initialized` properties will set\n *\n * @param {IInitializable} target\n * @param {string} initializeMethodName\n * @param {string | symbol} propertyKey\n */\nfunction wrapInitializeMethodInInitializeCheck (\n    target: IInitializable,\n    initializeMethodName: string,\n    propertyKey: string | symbol\n): void {\n    const methodDescriptor: PropertyDescriptor = Object\n        .getOwnPropertyDescriptor(target, initializeMethodName) || defaultDescriptor;\n    const originalMethod: Function = methodDescriptor.value;\n\n    Object.defineProperty(target, initializeMethodName, {\n        ...methodDescriptor,\n        value: function (): typeof originalMethod {\n            /**\n             * should define metadata before `initialize` method call,\n             * because of cases when other methods will called inside `initialize` method\n             */\n            Reflect.defineMetadata(initializedTargetMetadataKey, true, this);\n\n            const result: typeof originalMethod = originalMethod.apply(this, arguments);\n\n            if (this[propertyKey]) {}\n\n            return result;\n        }\n    });\n}\n\n/**\n * Wraps initializable property in additional checks\n *\n * @param {IInitializable} target\n * @param {string | symbol} propertyKey\n * @returns {PropertyDescriptor}\n */\nfunction wrapInitializableProperty (target: IInitializable, propertyKey: string | symbol): PropertyDescriptor {\n    const initializablePropertiesSet: Set <string | symbol> = Reflect\n        .getMetadata(initializablePropertiesSetMetadataKey, target);\n\n    initializablePropertiesSet.add(propertyKey);\n\n    const initializablePropertyMetadataKey: string = `_${propertyKey.toString()}`;\n    const propertyDescriptor: PropertyDescriptor = Object\n            .getOwnPropertyDescriptor(target, initializablePropertyMetadataKey) || defaultDescriptor;\n\n    Object.defineProperty(target, propertyKey, {\n        ...propertyDescriptor,\n        get: function (): any {\n            if (this[initializablePropertyMetadataKey] === undefined) {\n                throw new Error(`Property \\`${propertyKey.toString()}\\` is not initialized! Initialize it first!`);\n            }\n\n            return this[initializablePropertyMetadataKey];\n        },\n        set: function (newVal: any): void {\n            this[initializablePropertyMetadataKey] = newVal;\n        }\n    });\n\n    return propertyDescriptor;\n}\n","import * as escodegen from 'escodegen-wallaby';\nimport * as espree from 'espree';\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TObject } from '../types/TObject';\n\nimport { NodeGuards } from './NodeGuards';\nimport { NodeMetadata } from './NodeMetadata';\n\nexport class NodeUtils {\n    /**\n     * @param {T} literalNode\n     * @returns {T}\n     */\n    public static addXVerbatimPropertyTo (literalNode: ESTree.Literal): ESTree.Literal {\n        literalNode['x-verbatim-property'] = {\n            content: literalNode.raw,\n            precedence: escodegen.Precedence.Primary\n        };\n\n        return literalNode;\n    }\n\n    /**\n     * @param {T} astTree\n     * @returns {T}\n     */\n    public static clone <T extends ESTree.Node = ESTree.Node> (astTree: T): T {\n        return NodeUtils.parentizeAst(NodeUtils.cloneRecursive(astTree));\n    }\n\n    /**\n     * @param {string} code\n     * @returns {Statement[]}\n     */\n    public static convertCodeToStructure (code: string): ESTree.Statement[] {\n        const structure: ESTree.Program = espree.parse(code, { sourceType: 'script' });\n\n        estraverse.replace(structure, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): ESTree.Node => {\n                NodeUtils.parentizeNode(node, parentNode);\n\n                if (NodeGuards.isLiteralNode(node)) {\n                    NodeUtils.addXVerbatimPropertyTo(node);\n                }\n\n                NodeMetadata.set(node, { ignoredNode: false });\n\n                return node;\n            }\n        });\n\n        return <ESTree.Statement[]>structure.body;\n    }\n\n    /**\n     * @param {NodeGuards[]} structure\n     * @returns {string}\n     */\n    public static convertStructureToCode (structure: ESTree.Node[]): string {\n        return structure.reduce((code: string, node: ESTree.Node) => {\n            return code + escodegen.generate(node, {\n                sourceMapWithCode: true\n            }).code;\n        }, '');\n    }\n\n    /**\n     * @param {UnaryExpression} unaryExpressionNode\n     * @returns {NodeGuards}\n     */\n    public static getUnaryExpressionArgumentNode (unaryExpressionNode: ESTree.UnaryExpression): ESTree.Node {\n        if (NodeGuards.isUnaryExpressionNode(unaryExpressionNode.argument)) {\n            return NodeUtils.getUnaryExpressionArgumentNode(unaryExpressionNode.argument);\n        }\n\n        return unaryExpressionNode.argument;\n    }\n\n    /**\n     * @param {T} astTree\n     * @returns {T}\n     */\n    public static parentizeAst <T extends ESTree.Node = ESTree.Node> (astTree: T): T {\n        estraverse.replace(astTree, {\n            enter: NodeUtils.parentizeNode\n        });\n\n        return astTree;\n    }\n\n    /**\n     * @param {T} node\n     * @param {Node} parentNode\n     * @returns {T}\n     */\n    public static parentizeNode <T extends ESTree.Node = ESTree.Node> (node: T, parentNode: ESTree.Node | null): T {\n        node.parentNode = parentNode || node;\n\n        return node;\n    }\n\n    /**\n     * @param {T} node\n     * @returns {T}\n     */\n    private static cloneRecursive <T> (node: T): T {\n        if (node === null) {\n            return node;\n        }\n\n        const copy: TObject = {};\n\n        Object\n            .keys(node)\n            .forEach((property: string) => {\n                if (property === 'parentNode') {\n                    return;\n                }\n\n                const value: T[keyof T] = node[<keyof T>property];\n\n                let clonedValue: T[keyof T] | T[keyof T][] | null;\n\n                if (value === null || value instanceof RegExp) {\n                    clonedValue = value;\n                } else if (Array.isArray(value)) {\n                    clonedValue = value.map(NodeUtils.cloneRecursive);\n                } else if (typeof value === 'object') {\n                    clonedValue = NodeUtils.cloneRecursive(value);\n                } else {\n                    clonedValue = value;\n                }\n\n                copy[property] = clonedValue;\n            });\n\n        return <T>copy;\n    }\n}\n","export enum TransformationStage {\n    Preparing = 'Preparing',\n    DeadCodeInjection = 'DeadCodeInjection',\n    ControlFlowFlattening = 'ControlFlowFlattening',\n    Converting = 'Converting',\n    Obfuscating = 'Obfuscating',\n    Finalizing = 'Finalizing'\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { INodeTransformer } from '../interfaces/node-transformers/INodeTransformer';\nimport { IOptions } from '../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../enums/node-transformers/TransformationStage';\n\n@injectable()\nexport abstract class AbstractNodeTransformer implements INodeTransformer {\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    protected readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.randomGenerator = randomGenerator;\n        this.options = options;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public abstract getVisitor (transformationStage: TransformationStage): IVisitor | null;\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {Node | VisitorOption}\n     */\n    public abstract transformNode (node: ESTree.Node, parentNode: ESTree.Node): ESTree.Node | estraverse.VisitorOption;\n}\n","/* tslint:disable:max-file-line-count */\n\nimport * as escodegen from 'escodegen-wallaby';\nimport * as ESTree from 'estree';\n\nimport { TStatement } from '../types/node/TStatement';\n\nimport { NodeType } from '../enums/node/NodeType';\n\nexport class NodeFactory {\n    /**\n     * @param {TStatement[]} body\n     * @returns {Program}\n     */\n    public static programNode (body: TStatement[] = []): ESTree.Program {\n        return {\n            type: NodeType.Program,\n            body,\n            sourceType: 'script',\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {(Expression | SpreadElement)[]} elements\n     * @returns {ArrayExpression}\n     */\n    public static arrayExpressionNode (\n        elements: (ESTree.Expression | ESTree.SpreadElement)[] = []\n    ): ESTree.ArrayExpression {\n        return {\n            type: NodeType.ArrayExpression,\n            elements,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {AssignmentOperator} operator\n     * @param {Pattern | MemberExpression} left\n     * @param {Expression} right\n     * @returns {AssignmentExpression}\n     */\n    public static assignmentExpressionNode (\n        operator: ESTree.AssignmentOperator,\n        left: ESTree.Pattern | ESTree.MemberExpression,\n        right: ESTree.Expression\n    ): ESTree.AssignmentExpression {\n        return {\n            type: NodeType.AssignmentExpression,\n            operator,\n            left,\n            right,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {BinaryOperator} operator\n     * @param {Expression} left\n     * @param {Expression} right\n     * @returns {BinaryExpression}\n     */\n    public static binaryExpressionNode (\n        operator: ESTree.BinaryOperator,\n        left: ESTree.Expression,\n        right: ESTree.Expression,\n    ): ESTree.BinaryExpression {\n        return {\n            type: NodeType.BinaryExpression,\n            operator,\n            left,\n            right,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Statement[]} body\n     * @returns {BlockStatement}\n     */\n    public static blockStatementNode (body: ESTree.Statement[] = []): ESTree.BlockStatement {\n        return {\n            type: NodeType.BlockStatement,\n            body,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Identifier} label\n     * @returns {BreakStatement}\n     */\n    public static breakStatement (label?: ESTree.Identifier): ESTree.BreakStatement {\n        return {\n            type: NodeType.BreakStatement,\n            label,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} callee\n     * @param {(Expression | SpreadElement)[]} args\n     * @returns {CallExpression}\n     */\n    public static callExpressionNode (\n        callee: ESTree.Expression,\n        args: (ESTree.Expression | ESTree.SpreadElement)[] = []\n    ): ESTree.CallExpression {\n        return {\n            type: NodeType.CallExpression,\n            callee,\n            arguments: args,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Identifier} label\n     * @returns {ContinueStatement}\n     */\n    public static continueStatement (label?: ESTree.Identifier): ESTree.ContinueStatement {\n        return {\n            type: NodeType.ContinueStatement,\n            label,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} expression\n     * @returns {ExpressionStatement}\n     */\n    public static expressionStatementNode (expression: ESTree.Expression): ESTree.ExpressionStatement {\n        return {\n            type: NodeType.ExpressionStatement,\n            expression,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {string} functionName\n     * @param {Identifier[]} params\n     * @param {BlockStatement} body\n     * @returns {FunctionDeclaration}\n     */\n    public static functionDeclarationNode (\n        functionName: string,\n        params: ESTree.Identifier[],\n        body: ESTree.BlockStatement\n    ): ESTree.FunctionDeclaration {\n        return {\n            type: NodeType.FunctionDeclaration,\n            id: NodeFactory.identifierNode(functionName),\n            params,\n            body,\n            generator: false,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Identifier[]} params\n     * @param {BlockStatement} body\n     * @returns {FunctionExpression}\n     */\n    public static functionExpressionNode (\n        params: ESTree.Identifier[],\n        body: ESTree.BlockStatement\n    ): ESTree.FunctionExpression {\n        return {\n            type: NodeType.FunctionExpression,\n            params,\n            body,\n            generator: false,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} test\n     * @param {BlockStatement} consequent\n     * @param {BlockStatement} alternate\n     * @returns {IfStatement}\n     */\n    public static ifStatementNode (\n        test: ESTree.Expression,\n        consequent: ESTree.BlockStatement,\n        alternate?: ESTree.BlockStatement\n    ): ESTree.IfStatement {\n        return {\n            type: NodeType.IfStatement,\n            test,\n            consequent,\n            ...alternate && { alternate },\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {string} name\n     * @returns {Identifier}\n     */\n    public static identifierNode (name: string): ESTree.Identifier {\n        return {\n            type: NodeType.Identifier,\n            name,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {boolean | number | string} value\n     * @param {string} raw\n     * @returns {Literal}\n     */\n    public static literalNode (value: boolean | number | string, raw?: string): ESTree.Literal {\n        raw = raw !== undefined ? raw : `'${value}'`;\n\n        return {\n            type: NodeType.Literal,\n            value,\n            raw,\n            'x-verbatim-property': {\n                content: raw,\n                precedence: escodegen.Precedence.Primary\n            },\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {LogicalOperator} operator\n     * @param {Expression} left\n     * @param {Expression} right\n     * @returns {LogicalExpression}\n     */\n    public static logicalExpressionNode (\n        operator: ESTree.LogicalOperator,\n        left: ESTree.Expression,\n        right: ESTree.Expression,\n    ): ESTree.LogicalExpression {\n        return {\n            type: NodeType.LogicalExpression,\n            operator,\n            left,\n            right,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression | Super} object\n     * @param {Expression} property\n     * @param {boolean} computed\n     * @returns {MemberExpression}\n     */\n    public static memberExpressionNode (\n        object: ESTree.Expression | ESTree.Super,\n        property: ESTree.Expression,\n        computed: boolean = false\n    ): ESTree.MemberExpression {\n        return {\n            type: NodeType.MemberExpression,\n            computed,\n            object,\n            property,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} key\n     * @param {FunctionExpression} value\n     * @param {\"constructor\" | \"method\" | \"get\" | \"set\"} kind\n     * @param {boolean} computed\n     * @returns {MethodDefinition}\n     */\n    public static methodDefinitionNode (\n        key: ESTree.Expression,\n        value: ESTree.FunctionExpression,\n        kind: 'constructor' | 'method' | 'get' | 'set',\n        computed: boolean,\n    ): ESTree.MethodDefinition {\n        return {\n            type: NodeType.MethodDefinition,\n            key,\n            value,\n            kind,\n            computed,\n            static: false,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Property[]} properties\n     * @returns {ObjectExpression}\n     */\n    public static objectExpressionNode (properties: ESTree.Property[]): ESTree.ObjectExpression {\n        return {\n            type: NodeType.ObjectExpression,\n            properties,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} key\n     * @param {Expression | Pattern} value\n     * @param {boolean} computed\n     * @returns {Property}\n     */\n    public static propertyNode (\n        key: ESTree.Expression,\n        value: ESTree.Expression | ESTree.Pattern,\n        computed: boolean = false\n    ): ESTree.Property {\n        return {\n            type: NodeType.Property,\n            key,\n            value,\n            kind: 'init',\n            method: false,\n            shorthand: false,\n            computed,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} argument\n     * @returns {ReturnStatement}\n     */\n    public static returnStatementNode (argument: ESTree.Expression): ESTree.ReturnStatement {\n        return {\n            type: NodeType.ReturnStatement,\n            argument,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} discriminant\n     * @param {SwitchCase[]} cases\n     * @returns {SwitchStatement}\n     */\n    public static switchStatementNode (\n        discriminant: ESTree.Expression,\n        cases: ESTree.SwitchCase[]\n    ): ESTree.SwitchStatement {\n        return {\n            type: NodeType.SwitchStatement,\n            discriminant,\n            cases,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} test\n     * @param {Statement[]} consequent\n     * @returns {SwitchCase}\n     */\n    public static switchCaseNode (test: ESTree.Expression, consequent: ESTree.Statement[]): ESTree.SwitchCase {\n        return {\n            type: NodeType.SwitchCase,\n            test,\n            consequent,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {UnaryOperator} operator\n     * @param {Expression} argument\n     * @param {true} prefix\n     * @returns {UnaryExpression}\n     */\n    public static unaryExpressionNode (\n        operator: ESTree.UnaryOperator,\n        argument: ESTree.Expression,\n        prefix: true = true\n    ): ESTree.UnaryExpression {\n        return {\n            type: NodeType.UnaryExpression,\n            operator,\n            argument,\n            prefix,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {UpdateOperator} operator\n     * @param {Expression} argumentExpr\n     * @returns {UpdateExpression}\n     */\n    public static updateExpressionNode (operator: ESTree.UpdateOperator, argumentExpr: ESTree.Expression): ESTree.UpdateExpression {\n        return {\n            type: NodeType.UpdateExpression,\n            operator,\n            argument: argumentExpr,\n            prefix: false,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {VariableDeclarator[]} declarations\n     * @param {string} kind\n     * @returns {VariableDeclaration}\n     */\n    public static variableDeclarationNode (\n        declarations: ESTree.VariableDeclarator[] = [],\n        kind: 'var' | 'let' | 'const' = 'var'\n    ): ESTree.VariableDeclaration {\n        return {\n            type: NodeType.VariableDeclaration,\n            declarations,\n            kind,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Identifier} id\n     * @param {Expression | null} init\n     * @returns {VariableDeclarator}\n     */\n    public static variableDeclaratorNode (id: ESTree.Identifier, init: ESTree.Expression | null): ESTree.VariableDeclarator {\n        return {\n            type: NodeType.VariableDeclarator,\n            id,\n            init,\n            metadata: { ignoredNode: false }\n        };\n    }\n\n    /**\n     * @param {Expression} test\n     * @param {Statement} body\n     * @returns {WhileStatement}\n     */\n    public static whileStatementNode (test: ESTree.Expression, body: ESTree.Statement): ESTree.WhileStatement {\n        return {\n            type: NodeType.WhileStatement,\n            test,\n            body,\n            metadata: { ignoredNode: false }\n        };\n    }\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport { TIdentifierNamesGeneratorFactory } from '../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../types/node/TStatement';\n\nimport { ICustomNode } from '../interfaces/custom-nodes/ICustomNode';\nimport { IIdentifierNamesGenerator } from '../interfaces/generators/identifier-names-generators/IIdentifierNamesGenerator';\nimport { IOptions } from '../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../interfaces/utils/IRandomGenerator';\n\nimport { GlobalVariableTemplate1 } from '../templates/GlobalVariableTemplate1';\nimport { GlobalVariableTemplate2 } from '../templates/GlobalVariableTemplate2';\n\n@injectable()\nexport abstract class AbstractCustomNode implements ICustomNode {\n    /**\n     * @type {string[]}\n     */\n    private static readonly globalVariableTemplateFunctions: string[] = [\n        GlobalVariableTemplate1(),\n        GlobalVariableTemplate2()\n    ];\n\n    /**\n     * @type {TStatement[] | null}\n     */\n    protected cachedNode: TStatement[] | null = null;\n\n    /**\n     * @type {IIdentifierNamesGenerator}\n     */\n    protected readonly identifierNamesGenerator: IIdentifierNamesGenerator;\n\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    protected readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.identifierNamesGenerator = identifierNamesGeneratorFactory(options);\n        this.randomGenerator = randomGenerator;\n        this.options = options;\n    }\n\n    /**\n     * @param {unknown[]} args\n     */\n    public abstract initialize (...args: unknown[]): void;\n\n    /**\n     * @returns {TStatement[]}\n     */\n    public getNode (): TStatement[] {\n        if (!this.cachedNode) {\n            this.cachedNode = this.getNodeStructure();\n        }\n\n        return this.cachedNode;\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getGlobalVariableTemplate (): string {\n        return this.randomGenerator\n            .getRandomGenerator()\n            .pickone(AbstractCustomNode.globalVariableTemplateFunctions);\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected abstract getNodeStructure (): TStatement[];\n}\n","module.exports = require(\"estraverse\");","import * as ESTree from 'estree';\n\nexport class NodeMetadata {\n    /**\n     * @param {T} node\n     * @param {Partial<T[\"metadata\"]>} metadata\n     */\n    public static set <T extends ESTree.Node = ESTree.Node> (node: T, metadata: Partial<T['metadata']>): void {\n        node.metadata = Object.assign(node.metadata || {}, metadata);\n    }\n\n    /**\n     * @param {Node} node\n     * @param {keyof T} metadataKey\n     * @returns {T[keyof T] | undefined}\n     */\n    public static get <T extends ESTree.BaseNodeMetadata> (node: ESTree.Node, metadataKey: keyof T): T[keyof T] | undefined {\n        return node.metadata !== undefined\n            ? (<T>node.metadata)[metadataKey]\n            : undefined;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    public static isIgnoredNode (node: ESTree.Node): boolean {\n        return NodeMetadata.get(node, 'ignoredNode') === true;\n    }\n\n    /**\n     * @param {Node} identifierNode\n     * @returns {boolean}\n     */\n    public static isRenamedIdentifier (identifierNode: ESTree.Identifier): boolean {\n        return NodeMetadata.get<ESTree.IdentifierNodeMetadata>(identifierNode, 'renamedIdentifier') === true;\n    }\n\n    /**\n     * @param {Node} literalNode\n     * @returns {boolean}\n     */\n    public static isReplacedLiteral (literalNode: ESTree.Literal): boolean {\n        return NodeMetadata.get<ESTree.LiteralNodeMetadata>(literalNode, 'replacedLiteral') === true;\n    }\n}\n","module.exports = require(\"string-template\");","export enum NodeType {\n    ArrayExpression = 'ArrayExpression',\n    ArrayPattern = 'ArrayPattern',\n    ArrowFunctionExpression = 'ArrowFunctionExpression',\n    AssignmentExpression = 'AssignmentExpression',\n    AssignmentPattern = 'AssignmentPattern',\n    AwaitExpression = 'AwaitExpression',\n    BinaryExpression = 'BinaryExpression',\n    BlockStatement = 'BlockStatement',\n    BreakStatement = 'BreakStatement',\n    CallExpression = 'CallExpression',\n    CatchClause = 'CatchClause',\n    ClassDeclaration = 'ClassDeclaration',\n    ContinueStatement = 'ContinueStatement',\n    ExportNamedDeclaration = 'ExportNamedDeclaration',\n    ExpressionStatement = 'ExpressionStatement',\n    FunctionDeclaration = 'FunctionDeclaration',\n    FunctionExpression = 'FunctionExpression',\n    Identifier = 'Identifier',\n    IfStatement = 'IfStatement',\n    ImportDeclaration = 'ImportDeclaration',\n    ImportDefaultSpecifier = 'ImportDefaultSpecifier',\n    ImportNamespaceSpecifier = 'ImportNamespaceSpecifier',\n    ImportSpecifier = 'ImportSpecifier',\n    LabeledStatement = 'LabeledStatement',\n    Literal = 'Literal',\n    LogicalExpression = 'LogicalExpression',\n    MemberExpression = 'MemberExpression',\n    MethodDefinition = 'MethodDefinition',\n    ObjectExpression = 'ObjectExpression',\n    ObjectPattern = 'ObjectPattern',\n    Program = 'Program',\n    Property = 'Property',\n    RestElement = 'RestElement',\n    ReturnStatement = 'ReturnStatement',\n    Super = 'Super',\n    SwitchCase = 'SwitchCase',\n    SwitchStatement = 'SwitchStatement',\n    TaggedTemplateExpression = 'TaggedTemplateExpression',\n    TemplateLiteral = 'TemplateLiteral',\n    TryStatement = 'TryStatement',\n    UnaryExpression = 'UnaryExpression',\n    UpdateExpression = 'UpdateExpression',\n    VariableDeclaration = 'VariableDeclaration',\n    VariableDeclarator = 'VariableDeclarator',\n    WhileStatement = 'WhileStatement'\n}\n","import { Container, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from './ServiceIdentifiers';\n\nimport { analyzersModule } from './modules/analyzers/AnalyzersModule';\nimport { controlFlowTransformersModule } from './modules/node-transformers/ControlFlowTransformersModule';\nimport { convertingTransformersModule } from './modules/node-transformers/ConvertingTransformersModule';\nimport { customNodesModule } from './modules/custom-nodes/CustomNodesModule';\nimport { finalizingTransformersModule } from './modules/node-transformers/FinalizingTransformersModule';\nimport { generatorsModule } from './modules/generators/GeneratorsModule';\nimport { nodeTransformersModule } from './modules/node-transformers/NodeTransformersModule';\nimport { obfuscatingTransformersModule } from './modules/node-transformers/ObfuscatingTransformersModule';\nimport { optionsModule } from './modules/options/OptionsModule';\nimport { preparingTransformersModule } from './modules/node-transformers/PreparingTransformersModule';\nimport { storagesModule } from './modules/storages/StoragesModule';\nimport { utilsModule } from './modules/utils/UtilsModule';\n\nimport { TInputOptions } from '../types/options/TInputOptions';\n\nimport { IInversifyContainerFacade } from '../interfaces/container/IInversifyContainerFacade';\nimport { IJavaScriptObfuscator } from '../interfaces/IJavaScriptObfsucator';\nimport { ILogger } from '../interfaces/logger/ILogger';\nimport { IObfuscationEventEmitter } from '../interfaces/event-emitters/IObfuscationEventEmitter';\nimport { IObfuscatedCode } from '../interfaces/source-code/IObfuscatedCode';\nimport { ISourceCode } from '../interfaces/source-code/ISourceCode';\nimport { ITransformersRunner } from '../interfaces/node-transformers/ITransformersRunner';\n\nimport { JavaScriptObfuscator } from '../JavaScriptObfuscator';\nimport { Logger } from '../logger/Logger';\nimport { ObfuscationEventEmitter } from '../event-emitters/ObfuscationEventEmitter';\nimport { ObfuscatedCode } from '../source-code/ObfuscatedCode';\nimport { SourceCode } from '../source-code/SourceCode';\nimport { TransformersRunner } from '../node-transformers/TransformersRunner';\n\nexport class InversifyContainerFacade implements IInversifyContainerFacade {\n    /**\n     * @type {interfaces.Container}\n     */\n    private readonly container: interfaces.Container;\n\n    constructor () {\n        this.container = new Container();\n    }\n\n    /**\n     * @param {interfaces.ServiceIdentifier<U>} serviceIdentifier\n     * @returns {U}\n     */\n    public static getFactory <T extends string, U> (\n        serviceIdentifier: interfaces.ServiceIdentifier<U>\n    ): (context: interfaces.Context) => (bindingName: T) => U {\n        return (context: interfaces.Context): (bindingName: T) => U => {\n            return (bindingName: T) => {\n                return context.container.getNamed<U>(serviceIdentifier, bindingName);\n            };\n        };\n    }\n\n    /**\n     * @param {interfaces.ServiceIdentifier<U>} serviceIdentifier\n     * @returns {U}\n     */\n    public static getCacheFactory <T extends string, U> (\n        serviceIdentifier: interfaces.ServiceIdentifier<U>\n    ): (context: interfaces.Context) => (bindingName: T) => U {\n        return (context: interfaces.Context): (bindingName: T) => U => {\n            const cache: Map <T, U> = new Map();\n\n            return (bindingName: T) => {\n                if (cache.has(bindingName)) {\n                    return <U>cache.get(bindingName);\n                }\n\n                const object: U = context.container.getNamed<U>(serviceIdentifier, bindingName);\n\n                cache.set(bindingName, object);\n\n                return object;\n            };\n        };\n    }\n\n    /**\n     * @param {interfaces.ServiceIdentifier<interfaces.Newable<U>>} serviceIdentifier\n     * @param {interfaces.ServiceIdentifier<interfaces.Newable<Object>>[]} dependencies\n     * @returns {U}\n     */\n    public static getConstructorFactory <T extends string, U> (\n        serviceIdentifier: interfaces.ServiceIdentifier<interfaces.Newable<U>>,\n        ...dependencies: interfaces.ServiceIdentifier<interfaces.Newable<Object>>[]\n    ): (context: interfaces.Context) => (bindingName: T) => U {\n        return (context: interfaces.Context): (bindingName: T) => U => {\n            const cache: Map<T, interfaces.Newable<U>> = new Map();\n            const cachedDependencies: Object[] = [];\n\n            return (bindingName: T) => {\n                dependencies.forEach((\n                    dependency: interfaces.ServiceIdentifier<interfaces.Newable<Object>>,\n                    index: number\n                ) => {\n                    if (!cachedDependencies[index]) {\n                        cachedDependencies[index] = context.container.get(dependency);\n                    }\n                });\n\n                if (cache.has(bindingName)) {\n                    return new (<interfaces.Newable<U>>cache.get(bindingName))(...cachedDependencies);\n                }\n\n                const constructor: interfaces.Newable<U> = context.container\n                    .getNamed<interfaces.Newable<U>>(\n                        serviceIdentifier,\n                        bindingName\n                    );\n\n                cache.set(bindingName, constructor);\n\n                return new constructor(...cachedDependencies);\n            };\n        };\n    }\n\n    /**\n     * @param {interfaces.ServiceIdentifier<T>} serviceIdentifier\n     * @returns {T}\n     */\n    public get <T> (serviceIdentifier: interfaces.ServiceIdentifier<T>): T {\n        return this.container.get<T>(serviceIdentifier);\n    }\n\n    /**\n     * @param {interfaces.ServiceIdentifier<T>} serviceIdentifier\n     * @param {string | number | symbol} named\n     * @returns {T}\n     */\n    public getNamed <T> (serviceIdentifier: interfaces.ServiceIdentifier<T>, named: string | number | symbol): T {\n        return this.container.getNamed<T>(serviceIdentifier, named);\n    }\n\n    /**\n     * @param {string} sourceCode\n     * @param {string} sourceMap\n     * @param {TInputOptions} options\n     */\n    public load (sourceCode: string, sourceMap: string, options: TInputOptions): void {\n        this.container\n            .bind<ISourceCode>(ServiceIdentifiers.ISourceCode)\n            .toDynamicValue(() => new SourceCode(sourceCode, sourceMap))\n            .inSingletonScope();\n\n        this.container\n            .bind<TInputOptions>(ServiceIdentifiers.TInputOptions)\n            .toDynamicValue(() => options)\n            .inSingletonScope();\n\n        this.container\n            .bind<ILogger>(ServiceIdentifiers.ILogger)\n            .to(Logger)\n            .inSingletonScope();\n\n        this.container\n            .bind<IJavaScriptObfuscator>(ServiceIdentifiers.IJavaScriptObfuscator)\n            .to(JavaScriptObfuscator)\n            .inSingletonScope();\n\n        this.container\n            .bind<ITransformersRunner>(ServiceIdentifiers.ITransformersRunner)\n            .to(TransformersRunner)\n            .inSingletonScope();\n\n        this.container\n            .bind<IObfuscatedCode>(ServiceIdentifiers.IObfuscatedCode)\n            .to(ObfuscatedCode);\n\n        this.container\n            .bind<IObfuscatedCode>(ServiceIdentifiers.Factory__IObfuscatedCode)\n            .toFactory<IObfuscatedCode>((context: interfaces.Context) => {\n                return (obfuscatedCodeAsString: string, sourceMapAsString: string) => {\n                    const obfuscatedCode: IObfuscatedCode = context.container\n                        .get<IObfuscatedCode>(ServiceIdentifiers.IObfuscatedCode);\n\n                    obfuscatedCode.initialize(obfuscatedCodeAsString, sourceMapAsString);\n\n                    return obfuscatedCode;\n                };\n            });\n\n        this.container\n            .bind<IObfuscationEventEmitter>(ServiceIdentifiers.IObfuscationEventEmitter)\n            .to(ObfuscationEventEmitter)\n            .inSingletonScope();\n\n        // modules\n        this.container.load(analyzersModule);\n        this.container.load(controlFlowTransformersModule);\n        this.container.load(convertingTransformersModule);\n        this.container.load(customNodesModule);\n        this.container.load(finalizingTransformersModule);\n        this.container.load(generatorsModule);\n        this.container.load(nodeTransformersModule);\n        this.container.load(obfuscatingTransformersModule);\n        this.container.load(optionsModule);\n        this.container.load(preparingTransformersModule);\n        this.container.load(storagesModule);\n        this.container.load(utilsModule);\n    }\n\n    public unload (): void {\n        this.container.unbindAll();\n    }\n}\n","export enum ControlFlowCustomNode {\n    BinaryExpressionFunctionNode = 'BinaryExpressionFunctionNode',\n    BlockStatementControlFlowFlatteningNode = 'BlockStatementControlFlowFlatteningNode',\n    CallExpressionControlFlowStorageCallNode = 'CallExpressionControlFlowStorageCallNode',\n    CallExpressionFunctionNode = 'CallExpressionFunctionNode',\n    ControlFlowStorageNode = 'ControlFlowStorageNode',\n    ExpressionWithOperatorControlFlowStorageCallNode = 'ExpressionWithOperatorControlFlowStorageCallNode',\n    LogicalExpressionFunctionNode = 'LogicalExpressionFunctionNode',\n    StringLiteralControlFlowStorageCallNode = 'StringLiteralControlFlowStorageCallNode',\n    StringLiteralNode = 'StringLiteralNode'\n}\n","export enum IdentifierObfuscatingReplacer {\n    BaseIdentifierObfuscatingReplacer = 'BaseIdentifierObfuscatingReplacer'\n}\n","export enum ObfuscationTarget {\n    Browser = 'browser',\n    BrowserNoEval = 'browser-no-eval',\n    Node = 'node'\n}\n","import * as ESTree from 'estree';\n\nimport { TNodeWithStatements } from '../types/node/TNodeWithStatements';\nimport { TStatement } from '../types/node/TStatement';\n\nimport { NodeGuards } from './NodeGuards';\n\nexport class NodeStatementUtils {\n    /**\n     * @param {Node} node\n     * @returns {TNodeWithStatements}\n     */\n    public static getParentNodeWithStatements (node: ESTree.Node): TNodeWithStatements {\n        return NodeStatementUtils.getParentNodesWithStatementsRecursive(node, 1)[0];\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {TNodeWithStatements[]}\n     */\n    public static getParentNodesWithStatements (node: ESTree.Node): TNodeWithStatements[] {\n        return NodeStatementUtils.getParentNodesWithStatementsRecursive(node);\n    }\n\n    /**\n     * @param {Statement} statement\n     * @returns {TStatement | null}\n     */\n    public static getNextSiblingStatement (statement: ESTree.Statement): TStatement | null {\n        return NodeStatementUtils.getSiblingStatementByOffset(statement, 1);\n    }\n\n    /**\n     * @param {Statement} statement\n     * @returns {TStatement | null}\n     */\n    public static getPreviousSiblingStatement (statement: ESTree.Statement): TStatement | null {\n        return NodeStatementUtils.getSiblingStatementByOffset(statement, -1);\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {Statement}\n     */\n    public static getRootStatementOfNode (node: ESTree.Node): ESTree.Statement {\n        if (NodeGuards.isProgramNode(node)) {\n            throw new Error('Unable to find root statement for `Program` node');\n        }\n\n        const parentNode: ESTree.Node | undefined = node.parentNode;\n\n        if (!parentNode) {\n            throw new ReferenceError('`parentNode` property of given node is `undefined`');\n        }\n\n        if (!NodeGuards.isNodeWithStatements(parentNode)) {\n            return NodeStatementUtils.getRootStatementOfNode(parentNode);\n        }\n\n        return <ESTree.Statement>node;\n    }\n\n    /**\n     * @param {NodeGuards} node\n     * @returns {TNodeWithStatements}\n     */\n    public static getScopeOfNode (node: ESTree.Node): TNodeWithStatements {\n        const parentNode: ESTree.Node | undefined = node.parentNode;\n\n        if (!parentNode) {\n            throw new ReferenceError('`parentNode` property of given node is `undefined`');\n        }\n\n        if (!NodeGuards.isNodeWithStatements(parentNode)) {\n            return NodeStatementUtils.getScopeOfNode(parentNode);\n        }\n\n        return parentNode;\n    }\n\n    /***\n     * @param {Node} node\n     * @param {number} maxSize\n     * @param {TNodeWithStatements[]} nodesWithStatements\n     * @param {number} depth\n     * @returns {TNodeWithStatements[]}\n     */\n    private static getParentNodesWithStatementsRecursive (\n        node: ESTree.Node,\n        maxSize: number = Infinity,\n        nodesWithStatements: TNodeWithStatements[] = [],\n        depth: number = 0\n    ): TNodeWithStatements[] {\n        if (nodesWithStatements.length >= maxSize) {\n            return nodesWithStatements;\n        }\n\n        const parentNode: ESTree.Node | undefined = node.parentNode;\n\n        if (!parentNode) {\n            throw new ReferenceError('`parentNode` property of given node is `undefined`');\n        }\n\n        if (\n            /**\n             * we can add program node instantly\n             */\n            NodeGuards.isProgramNode(node) ||\n            (NodeGuards.isNodeWithLexicalScopeStatements(node, parentNode) && depth > 0)\n        ) {\n            nodesWithStatements.push(node);\n        }\n\n        if (node !== parentNode) {\n            return NodeStatementUtils.getParentNodesWithStatementsRecursive(parentNode, maxSize, nodesWithStatements, ++depth);\n        }\n\n        return nodesWithStatements;\n    }\n\n    /**\n     * @param {Statement} statement\n     * @param {number} offset\n     * @returns {TStatement | null}\n     */\n    private static getSiblingStatementByOffset (statement: ESTree.Statement, offset: number): TStatement | null {\n        const scopeNode: TNodeWithStatements = NodeStatementUtils.getScopeOfNode(statement);\n        const scopeBody: TStatement[] = !NodeGuards.isSwitchCaseNode(scopeNode)\n            ? scopeNode.body\n            : scopeNode.consequent;\n        const indexInScope: number = scopeBody.indexOf(statement);\n\n        return scopeBody[indexInScope + offset] || null;\n    }\n}\n","import * as ESTree from 'estree';\n\nimport { TNodeWithStatements } from '../types/node/TNodeWithStatements';\nimport { TStatement } from '../types/node/TStatement';\n\nimport { IStackTraceData } from '../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\n\nimport { NodeGuards } from './NodeGuards';\n\nexport class NodeAppender {\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {TStatement[]} statements\n     */\n    public static append (nodeWithStatements: TNodeWithStatements, statements: TStatement[]): void {\n        statements = NodeAppender.parentizeScopeStatementsBeforeAppend(nodeWithStatements, statements);\n\n        NodeAppender.setScopeStatements(nodeWithStatements, [\n            ...NodeAppender.getScopeStatements(nodeWithStatements),\n            ...statements\n        ]);\n    }\n\n    /**\n     * Appends node into a first deepest BlockStatement in order of function calls\n     *\n     * For example:\n     *\n     * function Foo () {\n     *     var baz = function () {\n     *\n     *     }\n     *\n     *     baz();\n     * }\n     *\n     * foo();\n     *\n     * Appends node into block statement of `baz` function expression\n     *\n     * @param {IStackTraceData[]} stackTraceData\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {TStatement[]} bodyStatements\n     * @param {number} index\n     */\n    public static appendToOptimalBlockScope (\n        stackTraceData: IStackTraceData[],\n        nodeWithStatements: TNodeWithStatements,\n        bodyStatements: TStatement[],\n        index: number = 0\n    ): void {\n        const targetBlockScope: TNodeWithStatements = stackTraceData.length\n            ? NodeAppender.getOptimalBlockScope(stackTraceData, index)\n            : nodeWithStatements;\n\n        NodeAppender.prepend(targetBlockScope, bodyStatements);\n    }\n\n    /**\n     * Returns deepest block scope node at given deep.\n     *\n     * @param {IStackTraceData[]} stackTraceData\n     * @param {number} index\n     * @param {number} deep\n     * @returns {BlockStatement}\n     */\n    public static getOptimalBlockScope (\n        stackTraceData: IStackTraceData[],\n        index: number,\n        deep: number = Infinity\n    ): ESTree.BlockStatement {\n        const firstCall: IStackTraceData = stackTraceData[index];\n\n        if (deep <= 0) {\n            throw new Error('Invalid `deep` argument value. Value should be bigger then 0.');\n        }\n\n        if (deep > 1 && firstCall.stackTrace.length) {\n            return NodeAppender.getOptimalBlockScope(firstCall.stackTrace, 0, --deep);\n        } else {\n            return firstCall.callee;\n        }\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {TStatement[]} statements\n     * @param {Node} target\n     */\n    public static insertAfter (\n        nodeWithStatements: TNodeWithStatements,\n        statements: TStatement[],\n        target: ESTree.Statement\n    ): void {\n        const indexInScopeStatement: number = NodeAppender\n            .getScopeStatements(nodeWithStatements)\n            .indexOf(target);\n\n        NodeAppender.insertAtIndex(nodeWithStatements, statements, indexInScopeStatement + 1);\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {TStatement[]} statements\n     * @param {number} index\n     */\n    public static insertAtIndex (\n        nodeWithStatements: TNodeWithStatements,\n        statements: TStatement[],\n        index: number\n    ): void {\n        statements = NodeAppender.parentizeScopeStatementsBeforeAppend(nodeWithStatements, statements);\n\n        NodeAppender.setScopeStatements(nodeWithStatements, [\n            ...NodeAppender.getScopeStatements(nodeWithStatements).slice(0, index),\n            ...statements,\n            ...NodeAppender.getScopeStatements(nodeWithStatements).slice(index)\n        ]);\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {TStatement[]} statements\n     */\n    public static prepend (nodeWithStatements: TNodeWithStatements, statements: TStatement[]): void {\n        statements = NodeAppender.parentizeScopeStatementsBeforeAppend(nodeWithStatements, statements);\n\n        NodeAppender.setScopeStatements(nodeWithStatements, [\n            ...statements,\n            ...NodeAppender.getScopeStatements(nodeWithStatements),\n        ]);\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @returns {TStatement[]}\n     */\n    private static getScopeStatements (nodeWithStatements: TNodeWithStatements): TStatement[] {\n        if (NodeGuards.isSwitchCaseNode(nodeWithStatements)) {\n            return nodeWithStatements.consequent;\n        }\n\n        return nodeWithStatements.body;\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {TStatement[]} statements\n     * @returns {TStatement[]}\n     */\n    private static parentizeScopeStatementsBeforeAppend (\n        nodeWithStatements: TNodeWithStatements,\n        statements: TStatement[]\n    ): TStatement[] {\n        statements.forEach((statement: TStatement) => {\n            statement.parentNode = nodeWithStatements;\n        });\n\n        return statements;\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {TStatement[]} statements\n     */\n    private static setScopeStatements (nodeWithStatements: TNodeWithStatements, statements: TStatement[]): void {\n        if (NodeGuards.isSwitchCaseNode(nodeWithStatements)) {\n            nodeWithStatements.consequent = <ESTree.Statement[]>statements;\n\n            return;\n        }\n\n        nodeWithStatements.body = statements;\n    }\n}\n","export enum ObfuscationEvent {\n    AfterObfuscation = 'afterObfuscation',\n    BeforeObfuscation = 'beforeObfuscation'\n}\n","import * as ESTree from 'estree';\n\nimport { TNodeWithLexicalScope } from '../types/node/TNodeWithLexicalScope';\n\nimport { NodeGuards } from './NodeGuards';\n\nexport class NodeLexicalScopeUtils {\n    /**\n     * @param {Node} node\n     * @returns {TNodeWithLexicalScope}\n     */\n    public static getLexicalScope (node: ESTree.Node): TNodeWithLexicalScope | undefined {\n        return NodeLexicalScopeUtils.getLexicalScopesRecursive(node, 1)[0];\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {TNodeWithLexicalScope[]}\n     */\n    public static getLexicalScopes (node: ESTree.Node): TNodeWithLexicalScope[] {\n        return NodeLexicalScopeUtils.getLexicalScopesRecursive(node);\n    }\n\n    /***\n     * @param {Node} node\n     * @param {number} maxSize\n     * @param {TNodeWithLexicalScope[]} nodesWithLexicalScope\n     * @param {number} depth\n     * @returns {TNodeWithLexicalScope[]}\n     */\n    private static getLexicalScopesRecursive (\n        node: ESTree.Node,\n        maxSize: number = Infinity,\n        nodesWithLexicalScope: TNodeWithLexicalScope[] = [],\n        depth: number = 0\n    ): TNodeWithLexicalScope[] {\n        if (nodesWithLexicalScope.length >= maxSize) {\n            return nodesWithLexicalScope;\n        }\n\n        const parentNode: ESTree.Node | undefined = node.parentNode;\n\n        if (!parentNode) {\n            throw new ReferenceError('`parentNode` property of given node is `undefined`');\n        }\n\n        if (NodeGuards.isNodeWithLexicalScope(node)) {\n            nodesWithLexicalScope.push(node);\n        }\n\n        if (node !== parentNode) {\n            return NodeLexicalScopeUtils.getLexicalScopesRecursive(parentNode, maxSize, nodesWithLexicalScope, ++depth);\n        }\n\n        return nodesWithLexicalScope;\n    }\n}\n","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","export enum NodeTransformer {\n    BlockStatementControlFlowTransformer = 'BlockStatementControlFlowTransformer',\n    ClassDeclarationTransformer = 'ClassDeclarationTransformer',\n    CommentsTransformer = 'CommentsTransformer',\n    CustomNodesTransformer = 'CustomNodesTransformer',\n    DeadCodeInjectionTransformer = 'DeadCodeInjectionTransformer',\n    EvalCallExpressionTransformer = 'EvalCallExpressionTransformer',\n    FunctionControlFlowTransformer = 'FunctionControlFlowTransformer',\n    CatchClauseTransformer = 'CatchClauseTransformer',\n    FunctionDeclarationTransformer = 'FunctionDeclarationTransformer',\n    FunctionTransformer = 'FunctionTransformer',\n    ImportDeclarationTransformer = 'ImportDeclarationTransformer',\n    LabeledStatementTransformer = 'LabeledStatementTransformer',\n    LiteralTransformer = 'LiteralTransformer',\n    MemberExpressionTransformer = 'MemberExpressionTransformer',\n    MetadataTransformer = 'MetadataTransformer',\n    MethodDefinitionTransformer = 'MethodDefinitionTransformer',\n    ObfuscatingGuardsTransformer = 'ObfuscatingGuardsTransformer',\n    ObjectExpressionKeysTransformer = 'ObjectExpressionKeysTransformer',\n    ObjectExpressionTransformer = 'ObjectExpressionTransformer',\n    ParentificationTransformer = 'ParentificationTransformer',\n    TemplateLiteralTransformer = 'TemplateLiteralTransformer',\n    VariableDeclarationTransformer = 'VariableDeclarationTransformer'\n}\n","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","export enum CustomNode {\n    ConsoleOutputDisableExpressionNode = 'ConsoleOutputDisableExpressionNode',\n    DebugProtectionFunctionCallNode = 'DebugProtectionFunctionCallNode',\n    DebugProtectionFunctionIntervalNode = 'DebugProtectionFunctionIntervalNode',\n    DebugProtectionFunctionNode = 'DebugProtectionFunctionNode',\n    DomainLockNode = 'DomainLockNode',\n    NodeCallsControllerFunctionNode = 'NodeCallsControllerFunctionNode',\n    SelfDefendingUnicodeNode = 'SelfDefendingUnicodeNode',\n    StringArrayCallsWrapper = 'StringArrayCallsWrapper',\n    StringArrayNode = 'StringArrayNode',\n    StringArrayRotateFunctionNode = 'StringArrayRotateFunctionNode'\n}\n","import 'reflect-metadata';\n\nimport { ServiceIdentifiers } from './container/ServiceIdentifiers';\n\nimport { TInputOptions } from './types/options/TInputOptions';\n\nimport { IInversifyContainerFacade } from './interfaces/container/IInversifyContainerFacade';\nimport { IJavaScriptObfuscator } from './interfaces/IJavaScriptObfsucator';\nimport { IObfuscatedCode } from './interfaces/source-code/IObfuscatedCode';\n\nimport { InversifyContainerFacade } from './container/InversifyContainerFacade';\n\nclass JavaScriptObfuscatorFacade {\n    /**\n     * @type {string | undefined}\n     */\n    public static version: string = process.env.VERSION || 'unknown';\n\n    /**\n     * @param {string} sourceCode\n     * @param {TInputOptions} inputOptions\n     * @returns {IObfuscatedCode}\n     */\n    public static obfuscate (sourceCode: string, inputOptions: TInputOptions = {}): IObfuscatedCode {\n        const inversifyContainerFacade: IInversifyContainerFacade = new InversifyContainerFacade();\n\n        inversifyContainerFacade.load(sourceCode, '', inputOptions);\n\n        const javaScriptObfuscator: IJavaScriptObfuscator = inversifyContainerFacade\n            .get<IJavaScriptObfuscator>(ServiceIdentifiers.IJavaScriptObfuscator);\n        const obfuscatedCode: IObfuscatedCode = javaScriptObfuscator.obfuscate(sourceCode);\n\n        inversifyContainerFacade.unload();\n\n        return obfuscatedCode;\n    }\n}\n\nexport { JavaScriptObfuscatorFacade as JavaScriptObfuscator };\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport { TIdentifierNamesGeneratorFactory } from '../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TNodeWithStatements } from '../types/node/TNodeWithStatements';\n\nimport { ICustomNode } from '../interfaces/custom-nodes/ICustomNode';\nimport { ICustomNodeGroup } from '../interfaces/custom-nodes/ICustomNodeGroup';\nimport { IIdentifierNamesGenerator } from '../interfaces/generators/identifier-names-generators/IIdentifierNamesGenerator';\nimport { IOptions } from '../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../interfaces/utils/IRandomGenerator';\nimport { IStackTraceData } from '../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\n\nimport { CustomNode } from '../enums/custom-nodes/CustomNode';\nimport { ObfuscationEvent } from '../enums/event-emitters/ObfuscationEvent';\n\n@injectable()\nexport abstract class AbstractCustomNodeGroup implements ICustomNodeGroup {\n    /**\n     * @type {ObfuscationEvent}\n     */\n    protected abstract readonly appendEvent: ObfuscationEvent;\n\n    /**\n     * @type {Map<CustomNode, ICustomNode>}\n     */\n    protected abstract customNodes: Map <CustomNode, ICustomNode>;\n\n    /**\n     * @type {IIdentifierNamesGenerator}\n     */\n    protected readonly identifierNamesGenerator: IIdentifierNamesGenerator;\n\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    protected readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.identifierNamesGenerator = identifierNamesGeneratorFactory(options);\n        this.randomGenerator = randomGenerator;\n        this.options = options;\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {IStackTraceData[]} stackTraceData\n     */\n    public abstract appendCustomNodes (nodeWithStatements: TNodeWithStatements, stackTraceData: IStackTraceData[]): void;\n\n    /**\n     * @returns {ObfuscationEvent}\n     */\n    public getAppendEvent (): ObfuscationEvent {\n        return this.appendEvent;\n    }\n\n    /**\n     * @returns {Map<CustomNode, ICustomNode>}\n     */\n    public getCustomNodes (): Map <CustomNode, ICustomNode> {\n        return this.customNodes;\n    }\n\n    public abstract initialize (): void;\n\n    /**\n     * @param {CustomNode} customNodeName\n     * @param {callback} callback\n     */\n    protected appendCustomNodeIfExist (customNodeName: CustomNode, callback: (customNode: ICustomNode) => void): void {\n        const customNode: ICustomNode | undefined = this.customNodes.get(customNodeName);\n\n        if (!customNode) {\n            return;\n        }\n\n        callback(customNode);\n    }\n\n    /**\n     * @param {number} stackTraceLength\n     * @returns {number}\n     */\n    protected getRandomStackTraceIndex (stackTraceLength: number): number {\n        return this.randomGenerator.getRandomInteger(0, Math.max(0, Math.round(stackTraceLength - 1)));\n    }\n}\n","export class Utils {\n    /**\n     * @type {string}\n     */\n    public static readonly hexadecimalPrefix: string = '0x';\n\n    /**\n     * @param {string} url\n     * @returns {string}\n     */\n    public static extractDomainFrom (url: string): string {\n        let domain: string;\n\n        if (url.indexOf('://') > -1 || url.indexOf('//') === 0) {\n            domain = url.split('/')[2];\n        } else {\n            domain = url.split('/')[0];\n        }\n\n        domain = domain.split(':')[0];\n\n        return domain;\n    }\n}\n","export enum IdentifierNamesGenerator {\n    HexadecimalIdentifierNamesGenerator = 'hexadecimal',\n    MangledIdentifierNamesGenerator = 'mangled'\n}\n","export enum SourceMapMode {\n    Inline = 'inline',\n    Separate = 'separate'\n}\n","export enum StringArrayEncoding {\n    Base64 = 'base64',\n    Rc4 = 'rc4'\n}\n","import { TInputOptions } from '../../types/options/TInputOptions';\n\nimport { IdentifierNamesGenerator } from '../../enums/generators/identifier-names-generators/IdentifierNamesGenerator';\nimport { ObfuscationTarget } from '../../enums/ObfuscationTarget';\nimport { SourceMapMode } from '../../enums/source-map/SourceMapMode';\n\nexport const NO_ADDITIONAL_NODES_PRESET: TInputOptions = Object.freeze({\n    compact: true,\n    controlFlowFlattening: false,\n    controlFlowFlatteningThreshold: 0,\n    deadCodeInjection: false,\n    deadCodeInjectionThreshold: 0,\n    debugProtection: false,\n    debugProtectionInterval: false,\n    disableConsoleOutput: false,\n    domainLock: [],\n    exclude: [],\n    identifierNamesGenerator: IdentifierNamesGenerator.HexadecimalIdentifierNamesGenerator,\n    identifiersPrefix: '',\n    inputFileName: '',\n    log: false,\n    renameGlobals: false,\n    reservedNames: [],\n    reservedStrings: [],\n    rotateStringArray: false,\n    seed: 0,\n    selfDefending: false,\n    sourceMap: false,\n    sourceMapBaseUrl: '',\n    sourceMapFileName: '',\n    sourceMapMode: SourceMapMode.Separate,\n    stringArray: false,\n    stringArrayEncoding: false,\n    stringArrayThreshold: 0,\n    target: ObfuscationTarget.Browser,\n    transformObjectKeys: false,\n    unicodeEscapeSequence: false\n});\n","module.exports = require(\"@babel/runtime/helpers/get\");","export class NumberUtils {\n    /**\n     * @param {number} dec\n     * @returns {string}\n     */\n    public static toHex (dec: number): string {\n        const radix: number = 16;\n\n        return dec.toString(radix);\n    }\n\n    /**\n     * @param {number} number\n     * @returns {boolean}\n     */\n    public static isCeil (number: number): boolean {\n        return number % 1 === 0;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TNodeWithLexicalScope } from '../../../types/node/TNodeWithLexicalScope';\n\nimport { IObfuscatingReplacer } from '../../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IObfuscatingReplacer';\nimport { IOptions } from '../../../interfaces/options/IOptions';\n\n@injectable()\nexport abstract class AbstractObfuscatingReplacer implements IObfuscatingReplacer {\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.options = options;\n    }\n\n    /**\n     * @param {SimpleLiteral[\"value\"]} nodeValue\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     * @returns {Node}\n     */\n    public abstract replace (nodeValue: ESTree.SimpleLiteral['value'], lexicalScopeNode?: TNodeWithLexicalScope): ESTree.Node;\n}\n","import { injectable } from 'inversify';\n\nimport * as ESTree from 'estree';\n\nimport { ICalleeData } from '../../../interfaces/analyzers/stack-trace-analyzer/ICalleeData';\nimport { ICalleeDataExtractor } from '../../../interfaces/analyzers/stack-trace-analyzer/ICalleeDataExtractor';\n\n@injectable()\nexport abstract class AbstractCalleeDataExtractor implements ICalleeDataExtractor {\n    /**\n     * @param {Node[]} blockScopeBody\n     * @param {Node} callee\n     * @returns {ICalleeData}\n     */\n    public abstract extract (blockScopeBody: ESTree.Node[], callee: ESTree.Node): ICalleeData | null;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TControlFlowCustomNodeFactory } from '../../../types/container/custom-nodes/TControlFlowCustomNodeFactory';\nimport { TControlFlowStorage } from '../../../types/storages/TControlFlowStorage';\n\nimport { IControlFlowReplacer } from '../../../interfaces/node-transformers/control-flow-transformers/IControlFlowReplacer';\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\n@injectable()\nexport abstract class AbstractControlFlowReplacer implements IControlFlowReplacer {\n    /**\n     * @type {TControlFlowCustomNodeFactory}\n     */\n    protected readonly controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory;\n\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    protected readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @type {Map<string, Map<string, string[]>>}\n     */\n    protected readonly replacerDataByControlFlowStorageId: Map <string, Map<string, string[]>> = new Map();\n\n    /**\n     * @param {TControlFlowCustomNodeFactory} controlFlowCustomNodeFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n            controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.controlFlowCustomNodeFactory = controlFlowCustomNodeFactory;\n        this.randomGenerator = randomGenerator;\n        this.options = options;\n    }\n\n    /**\n     * @param {Map<string, Map<string, string[]>>} identifierDataByControlFlowStorageId\n     * @param {string} controlFlowStorageId\n     * @returns {Map<string, string[]>}\n     */\n    protected static getStorageKeysByIdForCurrentStorage (\n        identifierDataByControlFlowStorageId: Map<string, Map<string, string[]>>,\n        controlFlowStorageId: string\n    ): Map<string, string[]> {\n        let storageKeysById: Map<string, string[]>;\n\n        if (identifierDataByControlFlowStorageId.has(controlFlowStorageId)) {\n            storageKeysById = <Map<string, string[]>>identifierDataByControlFlowStorageId.get(controlFlowStorageId);\n        } else {\n            storageKeysById = new Map <string, string[]>();\n        }\n\n        return storageKeysById;\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @param {TControlFlowStorage} controlFlowStorage\n     * @returns {Node}\n     */\n    public abstract replace (node: ESTree.Node, parentNode: ESTree.Node, controlFlowStorage: TControlFlowStorage): ESTree.Node;\n\n    /**\n     * @param {ICustomNode} customNode\n     * @param {TControlFlowStorage} controlFlowStorage\n     * @param {string} replacerId\n     * @param {number} usingExistingIdentifierChance\n     * @returns {string}\n     */\n    protected insertCustomNodeToControlFlowStorage (\n        customNode: ICustomNode,\n        controlFlowStorage: TControlFlowStorage,\n        replacerId: string,\n        usingExistingIdentifierChance: number\n    ): string {\n        const controlFlowStorageId: string = controlFlowStorage.getStorageId();\n        const storageKeysById: Map<string, string[]> = AbstractControlFlowReplacer\n            .getStorageKeysByIdForCurrentStorage(this.replacerDataByControlFlowStorageId, controlFlowStorageId);\n        const storageKeysForCurrentId: string[] | undefined = storageKeysById.get(replacerId);\n\n        if (\n            this.randomGenerator.getMathRandom() < usingExistingIdentifierChance &&\n            storageKeysForCurrentId &&\n            storageKeysForCurrentId.length\n        ) {\n            return this.randomGenerator.getRandomGenerator().pickone(storageKeysForCurrentId);\n        }\n\n        const generateStorageKey: (length: number) => string = (length: number) => {\n            const key: string = this.randomGenerator.getRandomString(length);\n\n            if (controlFlowStorage.getStorage().has(key)) {\n                return generateStorageKey(length);\n            }\n\n            return key;\n        };\n        const storageKey: string = generateStorageKey(5);\n\n        storageKeysById.set(replacerId, [storageKey]);\n        this.replacerDataByControlFlowStorageId.set(controlFlowStorageId, storageKeysById);\n        controlFlowStorage.set(storageKey, customNode);\n\n        return storageKey;\n    }\n}\n","module.exports = require(\"escodegen-wallaby\");","/**\n * @returns {string}\n */\nexport function GlobalVariableNoEvalTemplate (): string {\n    return `\n        var that = (typeof window !== 'undefined'\n           ? window\n           : (typeof process === 'object' &&\n              typeof require === 'function' &&\n              typeof global === 'object')\n             ? global\n             : this);\n    `;\n}\n","import { TInputOptions } from '../../types/options/TInputOptions';\n\nimport { IdentifierNamesGenerator } from '../../enums/generators/identifier-names-generators/IdentifierNamesGenerator';\nimport { ObfuscationTarget } from '../../enums/ObfuscationTarget';\nimport { SourceMapMode } from '../../enums/source-map/SourceMapMode';\n\nexport const DEFAULT_PRESET: TInputOptions = Object.freeze({\n    compact: true,\n    config: '',\n    controlFlowFlattening: false,\n    controlFlowFlatteningThreshold: 0.75,\n    deadCodeInjection: false,\n    deadCodeInjectionThreshold: 0.4,\n    debugProtection: false,\n    debugProtectionInterval: false,\n    disableConsoleOutput: false,\n    domainLock: [],\n    exclude: [],\n    identifierNamesGenerator: IdentifierNamesGenerator.HexadecimalIdentifierNamesGenerator,\n    identifiersPrefix: '',\n    inputFileName: '',\n    log: false,\n    renameGlobals: false,\n    reservedNames: [],\n    reservedStrings: [],\n    rotateStringArray: true,\n    seed: 0,\n    selfDefending: false,\n    sourceMap: false,\n    sourceMapBaseUrl: '',\n    sourceMapFileName: '',\n    sourceMapMode: SourceMapMode.Separate,\n    stringArray: true,\n    stringArrayEncoding: false,\n    stringArrayThreshold: 0.75,\n    target: ObfuscationTarget.Browser,\n    transformObjectKeys: false,\n    unicodeEscapeSequence: false\n});\n","export enum CalleeDataExtractor {\n    FunctionDeclarationCalleeDataExtractor = 'FunctionDeclarationCalleeDataExtractor',\n    FunctionExpressionCalleeDataExtractor = 'FunctionExpressionCalleeDataExtractor',\n    ObjectExpressionCalleeDataExtractor = 'ObjectExpressionCalleeDataExtractor',\n}\n","export enum ControlFlowReplacer {\n    BinaryExpressionControlFlowReplacer = 'BinaryExpressionControlFlowReplacer',\n    CallExpressionControlFlowReplacer = 'CallExpressionControlFlowReplacer',\n    LogicalExpressionControlFlowReplacer = 'LogicalExpressionControlFlowReplacer',\n    StringLiteralControlFlowReplacer = 'StringLiteralControlFlowReplacer'\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TControlFlowCustomNodeFactory } from '../../../types/container/custom-nodes/TControlFlowCustomNodeFactory';\nimport { TStatement } from '../../../types/node/TStatement';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { ControlFlowCustomNode } from '../../../enums/custom-nodes/ControlFlowCustomNode';\n\nimport { AbstractControlFlowReplacer } from './AbstractControlFlowReplacer';\nimport { NodeGuards } from '../../../node/NodeGuards';\n\n@injectable()\nexport abstract class ExpressionWithOperatorControlFlowReplacer extends AbstractControlFlowReplacer {\n    /**\n     * @param {TControlFlowCustomNodeFactory} controlFlowCustomNodeFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n            controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(controlFlowCustomNodeFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} controlFlowStorageId\n     * @param {string} storageKey\n     * @param {Expression} leftExpression\n     * @param {Expression} rightExpression\n     * @returns {NodeGuards}\n     */\n    protected getControlFlowStorageCallNode (\n        controlFlowStorageId: string,\n        storageKey: string,\n        leftExpression: ESTree.Expression,\n        rightExpression: ESTree.Expression\n    ): ESTree.Node {\n        const controlFlowStorageCallCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.ExpressionWithOperatorControlFlowStorageCallNode\n        );\n\n        controlFlowStorageCallCustomNode.initialize(controlFlowStorageId, storageKey, leftExpression, rightExpression);\n\n        const statementNode: TStatement = controlFlowStorageCallCustomNode.getNode()[0];\n\n        if (!statementNode || !NodeGuards.isExpressionStatementNode(statementNode)) {\n            throw new Error(`\\`controlFlowStorageCallCustomNode.getNode()[0]\\` should returns array with \\`ExpressionStatement\\` node`);\n        }\n\n        return statementNode.expression;\n    }\n}\n","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"espree\");","export enum DeadCodeInjectionCustomNode {\n    BlockStatementDeadCodeInjectionNode = 'BlockStatementDeadCodeInjectionNode'\n}\n","export enum PropertiesExtractor {\n    AssignmentExpressionPropertiesExtractor = 'AssignmentExpressionPropertiesExtractor',\n    VariableDeclaratorPropertiesExtractor = 'VariableDeclaratorPropertiesExtractor'\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TNodeWithStatements } from '../../../types/node/TNodeWithStatements';\n\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IPropertiesExtractor } from '../../../interfaces/node-transformers/converting-transformers/properties-extractors/IPropertiesExtractor';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { NodeAppender } from '../../../node/NodeAppender';\nimport { NodeFactory } from '../../../node/NodeFactory';\nimport { NodeGuards } from '../../../node/NodeGuards';\nimport { NodeStatementUtils } from '../../../node/NodeStatementUtils';\n\n@injectable()\nexport abstract class AbstractPropertiesExtractor implements IPropertiesExtractor {\n    /**\n     * @type {Map<ESTree.ObjectExpression, TNodeWithStatements>}\n     */\n    protected readonly cachedHostNodesWithStatementsMap: Map <ESTree.ObjectExpression, TNodeWithStatements> = new Map();\n\n    /**\n     * @type {Map<ESTree.ObjectExpression, ESTree.Statement>}\n     */\n    protected readonly cachedHostStatementsMap: Map <ESTree.ObjectExpression, ESTree.Statement> = new Map();\n\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    protected readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.randomGenerator = randomGenerator;\n        this.options = options;\n    }\n\n    /**\n     * @param {Property} propertyNode\n     * @returns {string | null}\n     */\n    protected static getPropertyNodeKeyName (propertyNode: ESTree.Property): string | null {\n        if (!propertyNode.key) {\n            return null;\n        }\n\n        const propertyKeyNode: ESTree.Expression = propertyNode.key;\n\n        if (NodeGuards.isLiteralNode(propertyKeyNode) && typeof propertyKeyNode.value === 'string') {\n            return propertyKeyNode.value;\n        }\n\n        if (NodeGuards.isIdentifierNode(propertyKeyNode)) {\n            return propertyKeyNode.name;\n        }\n\n        return null;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {propertyValueNode is Pattern}\n     */\n    protected static isProhibitedPattern (node: ESTree.Node): node is ESTree.Pattern {\n        return NodeGuards.isObjectPatternNode(node)\n            || NodeGuards.isArrayPatternNode(node)\n            || NodeGuards.isAssignmentPatternNode(node)\n            || NodeGuards.isRestElementNode(node);\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @param {Node} hostNode\n     * @returns {Node}\n     */\n    public abstract extract (\n        objectExpressionNode: ESTree.ObjectExpression,\n        hostNode: ESTree.Node\n    ): ESTree.Node;\n\n    /**\n     * @param {Property[]} properties\n     * @param {Expression} memberExpressionHostNode\n     * @returns {[ExpressionStatement[] , number[]]}\n     */\n    protected extractPropertiesToExpressionStatements (\n        properties: ESTree.Property[],\n        memberExpressionHostNode: ESTree.Expression\n    ): [ESTree.ExpressionStatement[], number[]] {\n        const propertiesLength: number = properties.length;\n        const expressionStatements: ESTree.ExpressionStatement[] = [];\n        const removablePropertyIds: number[] = [];\n\n        for (let i: number = 0; i < propertiesLength; i++) {\n            const property: ESTree.Property = properties[i];\n            const propertyValue: ESTree.Expression | ESTree.Pattern = property.value;\n\n            // invalid property nodes\n            if (AbstractPropertiesExtractor.isProhibitedPattern(propertyValue)) {\n                continue;\n            }\n\n            /**\n             * Stage 1: extract property node key names\n             */\n            const propertyKeyName: string | null = AbstractPropertiesExtractor.getPropertyNodeKeyName(property);\n\n            if (!propertyKeyName) {\n                continue;\n            }\n\n            /**\n             * Stage 2: creating new expression statement node with member expression based on removed property\n             */\n            const shouldCreateLiteralNode: boolean = !property.computed\n                || (property.computed && !!property.key && NodeGuards.isLiteralNode(property.key));\n            const memberExpressionProperty: ESTree.Expression = shouldCreateLiteralNode\n                ? NodeFactory.literalNode(propertyKeyName)\n                : NodeFactory.identifierNode(propertyKeyName);\n            const memberExpressionNode: ESTree.MemberExpression = NodeFactory\n                .memberExpressionNode(memberExpressionHostNode, memberExpressionProperty, true);\n            const expressionStatementNode: ESTree.ExpressionStatement = NodeFactory.expressionStatementNode(\n                NodeFactory.assignmentExpressionNode('=', memberExpressionNode, propertyValue)\n            );\n\n            /**\n             * Stage 3: recursively processing nested object expressions\n             */\n            if (NodeGuards.isObjectExpressionNode(property.value)) {\n                this.transformObjectExpressionNode(property.value, memberExpressionNode);\n            }\n\n            /**\n             * Stage 4: filling arrays\n             */\n            expressionStatements.push(expressionStatementNode);\n            removablePropertyIds.push(i);\n        }\n\n        return [expressionStatements, removablePropertyIds];\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @param {number[]} removablePropertyIds\n     */\n    protected filterExtractedObjectExpressionProperties (\n        objectExpressionNode: ESTree.ObjectExpression,\n        removablePropertyIds: number[]\n    ): void {\n        objectExpressionNode.properties = objectExpressionNode.properties\n            .filter((property: ESTree.Property, index: number) => !removablePropertyIds.includes(index));\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @param {Expression} memberExpressionHostNode\n     * @returns {Node}\n     */\n    protected transformObjectExpressionNode (\n        objectExpressionNode: ESTree.ObjectExpression,\n        memberExpressionHostNode: ESTree.Expression\n    ): ESTree.Node {\n        const properties: ESTree.Property[] = objectExpressionNode.properties;\n        const [expressionStatements, removablePropertyIds]: [ESTree.ExpressionStatement[], number[]] = this\n            .extractPropertiesToExpressionStatements(properties, memberExpressionHostNode);\n\n        const hostStatement: ESTree.Statement = this.getHostStatement(objectExpressionNode);\n        const hostNodeWithStatements: TNodeWithStatements = this.getHostNodeWithStatements(\n            objectExpressionNode,\n            hostStatement\n        );\n\n        this.filterExtractedObjectExpressionProperties(objectExpressionNode, removablePropertyIds);\n        NodeAppender.insertAfter(hostNodeWithStatements, expressionStatements, hostStatement);\n\n        return objectExpressionNode;\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @param {Statement} hostStatement\n     * @returns {TNodeWithStatements}\n     */\n    protected getHostNodeWithStatements (\n        objectExpressionNode: ESTree.ObjectExpression,\n        hostStatement: ESTree.Statement\n    ): TNodeWithStatements {\n        if (this.cachedHostNodesWithStatementsMap.has(objectExpressionNode)) {\n            return <TNodeWithStatements>this.cachedHostNodesWithStatementsMap.get(objectExpressionNode);\n        }\n\n        const nodeWithStatements: TNodeWithStatements = NodeStatementUtils.getScopeOfNode(hostStatement);\n\n        this.cachedHostNodesWithStatementsMap.set(objectExpressionNode, nodeWithStatements);\n\n        return nodeWithStatements;\n    }\n\n    /**\n     * Returns host statement of object expression node\n     *\n     * @param {NodeGuards} objectExpressionNode\n     * @returns {Node}\n     */\n    protected getHostStatement (objectExpressionNode: ESTree.ObjectExpression): ESTree.Statement {\n        if (this.cachedHostStatementsMap.has(objectExpressionNode)) {\n            return <ESTree.Statement>this.cachedHostStatementsMap.get(objectExpressionNode);\n        }\n\n        const hostStatement: ESTree.Statement = NodeStatementUtils.getRootStatementOfNode(objectExpressionNode);\n\n        this.cachedHostStatementsMap.set(objectExpressionNode, hostStatement);\n\n        return hostStatement;\n    }\n}\n","export enum CustomNodeGroup {\n    ConsoleOutputCustomNodeGroup = 'ConsoleOutputCustomNodeGroup',\n    DebugProtectionCustomNodeGroup = 'DebugProtectionCustomNodeGroup',\n    DomainLockCustomNodeGroup = 'DomainLockCustomNodeGroup',\n    SelfDefendingCustomNodeGroup = 'SelfDefendingCustomNodeGroup',\n    StringArrayCustomNodeGroup = 'StringArrayCustomNodeGroup'\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { IIdentifierNamesGenerator } from '../../interfaces/generators/identifier-names-generators/IIdentifierNamesGenerator';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\n@injectable()\nexport abstract class AbstractIdentifierNamesGenerator implements IIdentifierNamesGenerator {\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    protected readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.randomGenerator = randomGenerator;\n        this.options = options;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public abstract generate (): string;\n\n    /**\n     * @returns {string}\n     */\n    public abstract generateWithPrefix (): string;\n\n    /**\n     * @param {string} name\n     * @returns {boolean}\n     */\n    public isValidIdentifierName (name: string): boolean {\n        return this.options.reservedNames.length\n            ? !this.options.reservedNames.some((reservedName: string) =>\n                new RegExp(reservedName, 'g').exec(name) !== null\n            )\n            : true;\n\n    }\n}\n","export enum LiteralObfuscatingReplacer {\n    BooleanLiteralObfuscatingReplacer = 'BooleanLiteralObfuscatingReplacer',\n    NumberLiteralObfuscatingReplacer = 'NumberLiteralObfuscatingReplacer',\n    StringLiteralObfuscatingReplacer = 'StringLiteralObfuscatingReplacer'\n}\n","export enum ObfuscatingGuard {\n    BlackListNodeGuard = 'BlackListNodeGuard',\n    ConditionalCommentNodeGuard = 'ConditionalCommentNodeGuard'\n}\n","import { inject, injectable, postConstruct } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport { IMapStorage } from '../interfaces/storages/IMapStorage';\nimport { IOptions } from '../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../decorators/Initializable';\n\n@injectable()\nexport abstract class MapStorage <K, V> implements IMapStorage <K, V> {\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    protected readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    protected storageId!: string;\n\n    /**\n     * @type {Map <K, V>}\n     */\n    @initializable()\n    protected storage!: Map <K, V>;\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.randomGenerator = randomGenerator;\n        this.options = options;\n    }\n\n    @postConstruct()\n    public initialize (): void {\n        this.storage = new Map <K, V>();\n        this.storageId = this.randomGenerator.getRandomString(6);\n    }\n\n    /**\n     * @param {K} key\n     * @returns {V}\n     */\n    public get (key: K): V {\n        const value: V | undefined = this.storage.get(key);\n\n        if (!value) {\n            throw new Error(`No value found in map storage with key \\`${key}\\``);\n        }\n\n        return value;\n    }\n\n    /**\n     * @param {V} value\n     * @returns {K | null}\n     */\n    public getKeyOf (value: V): K | null {\n        for (const [key, storageValue] of this.storage) {\n            if (value === storageValue) {\n                return key;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    public getLength (): number {\n        return this.storage.size;\n    }\n\n    /**\n     * @returns {Map<K, V>}\n     */\n    public getStorage (): Map <K, V> {\n        return this.storage;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public getStorageId (): string {\n        return this.storageId;\n    }\n\n    /**\n     * @param {K} key\n     * @returns {boolean}\n     */\n    public has (key: K): boolean {\n        return this.storage.has(key);\n    }\n\n    /**\n     * @param {this} storage\n     * @param {boolean} mergeId\n     */\n    public mergeWith (storage: this, mergeId: boolean = false): void {\n        this.storage = new Map <K, V>([...this.storage, ...storage.getStorage()]);\n\n        if (mergeId) {\n            this.storageId = storage.getStorageId();\n        }\n    }\n\n    /**\n     * @param {K} key\n     * @param {V} value\n     */\n    public set (key: K, value: V): void {\n        this.storage.set(key, value);\n    }\n}\n","import { inject, injectable, postConstruct } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport md5 from 'md5';\nimport { Chance } from 'chance';\n\nimport { IInitializable } from '../interfaces/IInitializable';\nimport { IOptions } from '../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../interfaces/utils/IRandomGenerator';\nimport { ISourceCode } from '../interfaces/source-code/ISourceCode';\n\nimport { initializable } from '../decorators/Initializable';\n\n@injectable()\nexport class RandomGenerator implements IRandomGenerator, IInitializable {\n    /**\n     * @type {string}\n     */\n    public static readonly randomGeneratorPool: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    /**\n     * @type {IOptions}\n     */\n    private readonly options: IOptions;\n\n    /**\n     * @type {Chance.Chance}\n     */\n    @initializable()\n    private randomGenerator!: Chance.Chance;\n\n    /**\n     * @type {number}\n     */\n    @initializable()\n    private seed!: number;\n\n    /**\n     * @type {ISourceCode}\n     */\n    private readonly sourceCode: ISourceCode;\n\n    /**\n     * @param {ISourceCode} sourceCode\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.ISourceCode) sourceCode: ISourceCode,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.sourceCode = sourceCode;\n        this.options = options;\n    }\n\n    @postConstruct()\n    public initialize (): void {\n        const getRandomInteger: (min: number, max: number) => number = (min: number, max: number) => {\n            return Math.floor(Math.random() * (max - min + 1) + min);\n        };\n\n        /**\n         * We need to add numbers from md5 hash of source code to input seed to prevent same String Array name\n         * for different bundles with same seed\n         *\n         * @returns {number}\n         */\n        const getSeed: () => number = (): number => {\n            const md5Hash: string = md5(this.sourceCode.getSourceCode());\n\n            return this.seed + Number(md5Hash.replace(/\\D/g, ''));\n        };\n\n        this.seed = this.options.seed !== 0 ? this.options.seed : getRandomInteger(0, 999_999_999);\n        this.randomGenerator = new Chance(getSeed());\n    }\n\n    /**\n     * @returns {number}\n     */\n    public getMathRandom (): number {\n        return this.getRandomInteger(0, 99999) / 100000;\n    }\n\n    /**\n     * @returns {Chance.Chance}\n     */\n    public getRandomGenerator (): Chance.Chance {\n        return this.randomGenerator;\n    }\n\n    /**\n     * @param {number} min\n     * @param {number} max\n     * @returns {number}\n     */\n    public getRandomInteger (min: number, max: number): number {\n        return this.getRandomGenerator().integer({\n            min: min,\n            max: max\n        });\n    }\n\n    /**\n     * @param {number} length\n     * @param {string} pool\n     * @returns {string}\n     */\n    public getRandomString (length: number, pool: string = RandomGenerator.randomGeneratorPool): string {\n        return this.getRandomGenerator().string({ length, pool });\n    }\n\n    /**\n     * @returns {number}\n     */\n    public getSeed (): number {\n        return this.seed;\n    }\n}\n","module.exports = require(\"chalk\");","module.exports = require(\"reflect-metadata\");","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport chalk, { Chalk } from 'chalk';\n\nimport { ILogger } from '../interfaces/logger/ILogger';\nimport { IOptions } from '../interfaces/options/IOptions';\n\nimport { LoggingMessage } from '../enums/logger/LoggingMessage';\nimport { LoggingPrefix } from '../enums/logger/LoggingPrefix';\n\n@injectable()\nexport class Logger implements ILogger {\n    /**\n     * @type {Chalk}\n     */\n    public static readonly colorInfo: Chalk = chalk.cyan;\n\n    /**\n     * @type {Chalk}\n     */\n    public static readonly colorSuccess: Chalk = chalk.green;\n\n    /**\n     * @type {Chalk}\n     */\n    public static readonly colorWarn: Chalk = chalk.yellow;\n\n    /**\n     * @type {IOptions}\n     */\n    private readonly options: IOptions;\n\n    /**\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.options = options;\n    }\n\n    /**\n     * @param {Chalk} loggingLevelColor\n     * @param {LoggingPrefix} loggingPrefix\n     * @param {string} loggingMessage\n     * @param {string | number} value\n     */\n    public static log (\n        loggingLevelColor: Chalk,\n        loggingPrefix: LoggingPrefix,\n        loggingMessage: string,\n        value?: string | number,\n    ): void {\n        const processedMessage: string = loggingLevelColor(`\\n${loggingPrefix} ${loggingMessage}`);\n\n        console.log(processedMessage, value || '');\n    }\n\n    /**\n     * @param {LoggingMessage} loggingMessage\n     * @param {string | number} value\n     */\n    public info (loggingMessage: LoggingMessage, value?: string | number): void {\n        if (!this.options.log) {\n            return;\n        }\n\n        Logger.log(Logger.colorInfo, LoggingPrefix.Base, loggingMessage, value);\n    }\n\n    /**\n     * @param {LoggingMessage} loggingMessage\n     * @param {string | number} value\n     */\n    public success (loggingMessage: LoggingMessage, value?: string | number): void {\n        if (!this.options.log) {\n            return;\n        }\n\n        Logger.log(Logger.colorSuccess, LoggingPrefix.Base, loggingMessage, value);\n    }\n\n    /**\n     * @param {LoggingMessage} loggingMessage\n     * @param {string | number} value\n     */\n    public warn (loggingMessage: LoggingMessage, value?: string | number): void {\n        if (!this.options.log) {\n            return;\n        }\n\n        Logger.log(Logger.colorWarn, LoggingPrefix.Base, loggingMessage, value);\n    }\n}\n","export enum LoggingPrefix {\n    Base = '[javascript-obfuscator]',\n    CLI = '[javascript-obfuscator-cli]'\n}\n","module.exports = require(\"@babel/runtime/helpers/construct\");","import { InversifyContainerFacade } from '../../InversifyContainerFacade';\nimport { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { ICalleeDataExtractor } from '../../../interfaces/analyzers/stack-trace-analyzer/ICalleeDataExtractor';\nimport { IStackTraceAnalyzer } from '../../../interfaces/analyzers/stack-trace-analyzer/IStackTraceAnalyzer';\n\nimport { CalleeDataExtractor } from '../../../enums/analyzers/stack-trace-analyzer/CalleeDataExtractor';\nimport { FunctionDeclarationCalleeDataExtractor } from '../../../analyzers/stack-trace-analyzer/callee-data-extractors/FunctionDeclarationCalleeDataExtractor';\nimport { FunctionExpressionCalleeDataExtractor } from '../../../analyzers/stack-trace-analyzer/callee-data-extractors/FunctionExpressionCalleeDataExtractor';\nimport { ObjectExpressionCalleeDataExtractor } from '../../../analyzers/stack-trace-analyzer/callee-data-extractors/ObjectExpressionCalleeDataExtractor';\nimport { StackTraceAnalyzer } from '../../../analyzers/stack-trace-analyzer/StackTraceAnalyzer';\n\nexport const analyzersModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // stack trace analyzer\n    bind<IStackTraceAnalyzer>(ServiceIdentifiers.IStackTraceAnalyzer)\n        .to(StackTraceAnalyzer)\n        .inSingletonScope();\n\n    // callee data extractors\n    bind<ICalleeDataExtractor>(ServiceIdentifiers.ICalleeDataExtractor)\n        .to(FunctionDeclarationCalleeDataExtractor)\n        .whenTargetNamed(CalleeDataExtractor.FunctionDeclarationCalleeDataExtractor);\n\n    bind<ICalleeDataExtractor>(ServiceIdentifiers.ICalleeDataExtractor)\n        .to(FunctionExpressionCalleeDataExtractor)\n        .whenTargetNamed(CalleeDataExtractor.FunctionExpressionCalleeDataExtractor);\n\n    bind<ICalleeDataExtractor>(ServiceIdentifiers.ICalleeDataExtractor)\n        .to(ObjectExpressionCalleeDataExtractor)\n        .whenTargetNamed(CalleeDataExtractor.ObjectExpressionCalleeDataExtractor);\n\n    // callee data extractor factory\n    bind<ICalleeDataExtractor>(ServiceIdentifiers.Factory__ICalleeDataExtractor)\n        .toFactory<ICalleeDataExtractor>(InversifyContainerFacade\n            .getCacheFactory<CalleeDataExtractor, ICalleeDataExtractor>(\n                ServiceIdentifiers.ICalleeDataExtractor\n            ));\n});\n","import { injectable } from 'inversify';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { ICalleeData } from '../../../interfaces/analyzers/stack-trace-analyzer/ICalleeData';\n\nimport { AbstractCalleeDataExtractor } from './AbstractCalleeDataExtractor';\nimport { NodeGuards } from '../../../node/NodeGuards';\nimport { NodeStatementUtils } from '../../../node/NodeStatementUtils';\n\n@injectable()\nexport class FunctionDeclarationCalleeDataExtractor extends AbstractCalleeDataExtractor {\n    /**\n     * @param {NodeGuards[]} blockScopeBody\n     * @param {Identifier} callee\n     * @returns {ICalleeData}\n     */\n    public extract (blockScopeBody: ESTree.Node[], callee: ESTree.Identifier): ICalleeData | null {\n        if (!NodeGuards.isIdentifierNode(callee)) {\n            return null;\n        }\n\n        const calleeBlockStatement: ESTree.BlockStatement | null = this.getCalleeBlockStatement(\n            NodeStatementUtils.getParentNodeWithStatements(blockScopeBody[0]),\n            callee.name\n        );\n\n        if (!calleeBlockStatement) {\n            return null;\n        }\n\n        return {\n            callee: calleeBlockStatement,\n            name: callee.name\n        };\n    }\n\n    /**\n     * @param {NodeGuards} targetNode\n     * @param {string} name\n     * @returns {BlockStatement}\n     */\n    private getCalleeBlockStatement (targetNode: ESTree.Node, name: string): ESTree.BlockStatement | null {\n        let calleeBlockStatement: ESTree.BlockStatement | null = null;\n\n        estraverse.traverse(targetNode, {\n            enter: (node: ESTree.Node): estraverse.VisitorOption | void => {\n                if (NodeGuards.isFunctionDeclarationNode(node) && node.id.name === name) {\n                    calleeBlockStatement = node.body;\n\n                    return estraverse.VisitorOption.Break;\n                }\n            }\n        });\n\n        return calleeBlockStatement;\n    }\n}\n","import { injectable } from 'inversify';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { ICalleeData } from '../../../interfaces/analyzers/stack-trace-analyzer/ICalleeData';\n\nimport { AbstractCalleeDataExtractor } from './AbstractCalleeDataExtractor';\nimport { NodeGuards } from '../../../node/NodeGuards';\nimport { NodeStatementUtils } from '../../../node/NodeStatementUtils';\n\n@injectable()\nexport class FunctionExpressionCalleeDataExtractor extends AbstractCalleeDataExtractor {\n    /**\n     * @param {NodeGuards[]} blockScopeBody\n     * @param {Identifier} callee\n     * @returns {ICalleeData}\n     */\n    public extract (blockScopeBody: ESTree.Node[], callee: ESTree.Identifier): ICalleeData | null {\n        let calleeBlockStatement: ESTree.BlockStatement | null = null;\n\n        if (NodeGuards.isIdentifierNode(callee)) {\n            calleeBlockStatement = this.getCalleeBlockStatement(\n                NodeStatementUtils.getParentNodeWithStatements(blockScopeBody[0]),\n                callee.name\n            );\n        }\n\n        if (NodeGuards.isFunctionExpressionNode(callee)) {\n            calleeBlockStatement = callee.body;\n        }\n\n        if (!calleeBlockStatement) {\n            return null;\n        }\n\n        return {\n            callee: calleeBlockStatement,\n            name: callee.name || null\n        };\n    }\n\n    /**\n     * @param {NodeGuards} targetNode\n     * @param {string} name\n     * @returns {BlockStatement}\n     */\n    private getCalleeBlockStatement (targetNode: ESTree.Node, name: string): ESTree.BlockStatement | null {\n        let calleeBlockStatement: ESTree.BlockStatement | null = null;\n\n        estraverse.traverse(targetNode, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): estraverse.VisitorOption | void => {\n                if (\n                    NodeGuards.isFunctionExpressionNode(node) &&\n                    parentNode &&\n                    NodeGuards.isVariableDeclaratorNode(parentNode) &&\n                    NodeGuards.isIdentifierNode(parentNode.id) &&\n                    parentNode.id.name === name\n                ) {\n                    calleeBlockStatement = node.body;\n\n                    return estraverse.VisitorOption.Break;\n                }\n            }\n        });\n\n        return calleeBlockStatement;\n    }\n}\n","import { injectable } from 'inversify';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TObjectMembersCallsChain } from '../../../types/analyzers/stack-trace-analyzer/TObjectMembersCallsChain';\n\nimport { ICalleeData } from '../../../interfaces/analyzers/stack-trace-analyzer/ICalleeData';\n\nimport { AbstractCalleeDataExtractor } from './AbstractCalleeDataExtractor';\nimport { NodeGuards } from '../../../node/NodeGuards';\nimport { NodeStatementUtils } from '../../../node/NodeStatementUtils';\n\n@injectable()\nexport class ObjectExpressionCalleeDataExtractor extends AbstractCalleeDataExtractor {\n    /**\n     * @param {Property} propertyNode\n     * @param {string | number} nextItemInCallsChain\n     * @returns {boolean}\n     */\n    private static isValidTargetPropertyNode (propertyNode: ESTree.Property, nextItemInCallsChain: string | number): boolean {\n        if (!propertyNode.key) {\n            return false;\n        }\n\n        const isTargetPropertyNodeWithIdentifierKey: boolean =\n            NodeGuards.isIdentifierNode(propertyNode.key) && propertyNode.key.name === nextItemInCallsChain;\n        const isTargetPropertyNodeWithLiteralKey: boolean =\n            NodeGuards.isLiteralNode(propertyNode.key) &&\n            Boolean(propertyNode.key.value) &&\n            propertyNode.key.value === nextItemInCallsChain;\n\n        return isTargetPropertyNodeWithIdentifierKey || isTargetPropertyNodeWithLiteralKey;\n    }\n\n    /**\n     * @param {NodeGuards[]} blockScopeBody\n     * @param {MemberExpression} callee\n     * @returns {ICalleeData}\n     */\n    public extract (blockScopeBody: ESTree.Node[], callee: ESTree.MemberExpression): ICalleeData | null {\n        if (!NodeGuards.isMemberExpressionNode(callee)) {\n            return null;\n        }\n\n        const objectMembersCallsChain: TObjectMembersCallsChain = this.createObjectMembersCallsChain([], callee);\n\n        if (!objectMembersCallsChain.length) {\n            return null;\n        }\n\n        const functionExpressionName: string | number | null = objectMembersCallsChain[objectMembersCallsChain.length - 1];\n        const calleeBlockStatement: ESTree.BlockStatement | null = this.getCalleeBlockStatement(\n            NodeStatementUtils.getParentNodeWithStatements(blockScopeBody[0]),\n            objectMembersCallsChain\n        );\n\n        if (!calleeBlockStatement) {\n            return null;\n        }\n\n        return {\n            callee: calleeBlockStatement,\n            name: functionExpressionName\n        };\n    }\n\n    /**\n     * Creates array with MemberExpression calls chain.\n     *\n     * Example: object.foo.bar(); // ['object', 'foo', 'bar']\n     *\n     * @param {TObjectMembersCallsChain} currentChain\n     * @param {MemberExpression} memberExpression\n     * @returns {TObjectMembersCallsChain}\n     */\n    private createObjectMembersCallsChain (\n        currentChain: TObjectMembersCallsChain,\n        memberExpression: ESTree.MemberExpression\n    ): TObjectMembersCallsChain {\n        // first step: processing memberExpression `property` property\n        if (NodeGuards.isIdentifierNode(memberExpression.property) && memberExpression.computed === false) {\n            currentChain.unshift(memberExpression.property.name);\n        } else if (\n            NodeGuards.isLiteralNode(memberExpression.property) &&\n            (\n                typeof memberExpression.property.value === 'string' ||\n                typeof memberExpression.property.value === 'number'\n            )\n        ) {\n            currentChain.unshift(memberExpression.property.value);\n        } else {\n            return currentChain;\n        }\n\n        // second step: processing memberExpression `object` property\n        if (NodeGuards.isMemberExpressionNode(memberExpression.object)) {\n            return this.createObjectMembersCallsChain(currentChain, memberExpression.object);\n        } else if (NodeGuards.isIdentifierNode(memberExpression.object)) {\n            currentChain.unshift(memberExpression.object.name);\n        }\n\n        return currentChain;\n    }\n\n    /**\n     * @param {NodeGuards} targetNode\n     * @param {TObjectMembersCallsChain} objectMembersCallsChain\n     * @returns {BlockStatement}\n     */\n    private getCalleeBlockStatement (\n        targetNode: ESTree.Node,\n        objectMembersCallsChain: TObjectMembersCallsChain\n    ): ESTree.BlockStatement | null {\n        const objectName: string | number | undefined = objectMembersCallsChain.shift();\n\n        if (!objectName) {\n            return null;\n        }\n\n        let calleeBlockStatement: ESTree.BlockStatement | null = null;\n\n        estraverse.traverse(targetNode, {\n            enter: (node: ESTree.Node): estraverse.VisitorOption | void => {\n                if (\n                    NodeGuards.isVariableDeclaratorNode(node) &&\n                    NodeGuards.isIdentifierNode(node.id) &&\n                    node.init &&\n                    NodeGuards.isObjectExpressionNode(node.init) &&\n                    node.id.name === objectName\n                ) {\n                    calleeBlockStatement = this.findCalleeBlockStatement(node.init.properties, objectMembersCallsChain);\n\n                    return estraverse.VisitorOption.Break;\n                }\n            }\n        });\n\n        return calleeBlockStatement;\n    }\n\n    /**\n     * @param {Property[]} objectExpressionProperties\n     * @param {TObjectMembersCallsChain} objectMembersCallsChain\n     * @returns {BlockStatement}\n     */\n    private findCalleeBlockStatement (\n        objectExpressionProperties: ESTree.Property[],\n        objectMembersCallsChain: TObjectMembersCallsChain\n    ): ESTree.BlockStatement | null {\n        const nextItemInCallsChain: string | number | undefined = objectMembersCallsChain.shift();\n\n        if (!nextItemInCallsChain) {\n            return null;\n        }\n\n        for (const propertyNode of objectExpressionProperties) {\n            if (!ObjectExpressionCalleeDataExtractor.isValidTargetPropertyNode(propertyNode, nextItemInCallsChain)) {\n                continue;\n            }\n\n            if (NodeGuards.isObjectExpressionNode(propertyNode.value)) {\n                return this.findCalleeBlockStatement(propertyNode.value.properties, objectMembersCallsChain);\n            }\n\n            if (NodeGuards.isFunctionExpressionNode(propertyNode.value)) {\n                return propertyNode.value.body;\n            }\n        }\n\n        return null;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TCalleeDataExtractorFactory } from '../../types/container/stack-trace-analyzer/TCalleeDataExtractorFactory';\n\nimport { ICalleeData } from '../../interfaces/analyzers/stack-trace-analyzer/ICalleeData';\nimport { IStackTraceAnalyzer } from '../../interfaces/analyzers/stack-trace-analyzer/IStackTraceAnalyzer';\nimport { IStackTraceData } from '../../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\n\nimport { CalleeDataExtractor } from '../../enums/analyzers/stack-trace-analyzer/CalleeDataExtractor';\n\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeStatementUtils } from '../../node/NodeStatementUtils';\n\n/**\n * This class generates a data with a stack trace of functions calls\n *\n * For example:\n *\n * function Foo () {\n *     var baz = function () {\n *\n *     }\n *\n *     baz();\n * }\n *\n * foo();\n *\n * Will generate a structure like:\n *\n * [\n *      {\n *          callee: FOO_FUNCTION_NODE\n *          name: 'Foo',\n *          trace: [\n *              {\n *                  callee: BAZ_FUNCTION_NODE,\n *                  name: 'baz,\n *                  trace: []\n *              }\n *          ]\n *      }\n * ]\n */\n@injectable()\nexport class StackTraceAnalyzer implements IStackTraceAnalyzer {\n    /**\n     * @type {CalleeDataExtractor[]}\n     */\n    private static readonly calleeDataExtractorsList: CalleeDataExtractor[] = [\n        CalleeDataExtractor.FunctionDeclarationCalleeDataExtractor,\n        CalleeDataExtractor.FunctionExpressionCalleeDataExtractor,\n        CalleeDataExtractor.ObjectExpressionCalleeDataExtractor\n    ];\n\n    /**\n     * @type {number}\n     */\n    private static readonly limitThresholdActivationLength: number = 25;\n\n    /**\n     * @type {number}\n     */\n    private static readonly limitThreshold: number = 0.002;\n\n    /**\n     * @type {TCalleeDataExtractorFactory}\n     */\n    private readonly calleeDataExtractorFactory: TCalleeDataExtractorFactory;\n\n    constructor (\n        @inject(ServiceIdentifiers.Factory__ICalleeDataExtractor) calleeDataExtractorFactory: TCalleeDataExtractorFactory\n    ) {\n        this.calleeDataExtractorFactory = calleeDataExtractorFactory;\n    }\n\n    /**\n     * @param {number} blockScopeBodyLength\n     * @returns {number}\n     */\n    public static getLimitIndex (blockScopeBodyLength: number): number {\n        const lastIndex: number = blockScopeBodyLength - 1;\n        const limitThresholdActivationIndex: number = StackTraceAnalyzer.limitThresholdActivationLength - 1;\n\n        let limitIndex: number = lastIndex;\n\n        if (lastIndex > limitThresholdActivationIndex) {\n            limitIndex = Math.round(\n                limitThresholdActivationIndex + (lastIndex * StackTraceAnalyzer.limitThreshold)\n            );\n\n            if (limitIndex > lastIndex) {\n                limitIndex = lastIndex;\n            }\n        }\n\n        return limitIndex;\n    }\n\n    /**\n     * @param {Program} astTree\n     * @returns {IStackTraceData[]}\n     */\n    public analyze (astTree: ESTree.Program): IStackTraceData[] {\n        return this.analyzeRecursive(astTree.body);\n    }\n\n    /**\n     * @param {NodeGuards[]} blockScopeBody\n     * @returns {IStackTraceData[]}\n     */\n    private analyzeRecursive (blockScopeBody: ESTree.Node[]): IStackTraceData[] {\n        const limitIndex: number = StackTraceAnalyzer.getLimitIndex(blockScopeBody.length);\n        const stackTraceData: IStackTraceData[] = [];\n        const blockScopeBodyLength: number = blockScopeBody.length;\n\n        for (let index: number = 0; index < blockScopeBodyLength; index++) {\n            if (index > limitIndex) {\n                break;\n            }\n\n            const blockScopeBodyNode: ESTree.Node = blockScopeBody[index];\n\n            estraverse.traverse(blockScopeBodyNode, {\n                enter: (node: ESTree.Node): estraverse.VisitorOption | void => {\n                    if (!NodeGuards.isCallExpressionNode(node)) {\n                        return;\n                    }\n\n                    if (blockScopeBodyNode.parentNode !== NodeStatementUtils.getParentNodeWithStatements(node)) {\n                        return estraverse.VisitorOption.Skip;\n                    }\n\n                    this.analyzeCallExpressionNode(stackTraceData, blockScopeBody, node);\n                }\n            });\n        }\n\n        return stackTraceData;\n    }\n\n    /**\n     * @param {IStackTraceData[]} stackTraceData\n     * @param {NodeGuards[]} blockScopeBody\n     * @param {CallExpression} callExpressionNode\n     */\n    private analyzeCallExpressionNode (\n        stackTraceData: IStackTraceData[],\n        blockScopeBody: ESTree.Node[],\n        callExpressionNode: ESTree.CallExpression\n    ): void {\n        StackTraceAnalyzer.calleeDataExtractorsList.forEach((calleeDataExtractorName: CalleeDataExtractor) => {\n            const calleeData: ICalleeData | null = this.calleeDataExtractorFactory(calleeDataExtractorName)\n                .extract(blockScopeBody, callExpressionNode.callee);\n\n            if (!calleeData) {\n                return;\n            }\n\n            stackTraceData.push({\n                ...calleeData,\n                stackTrace: this.analyzeRecursive(calleeData.callee.body)\n            });\n        });\n    }\n}\n","import { InversifyContainerFacade } from '../../InversifyContainerFacade';\nimport { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { IControlFlowReplacer } from '../../../interfaces/node-transformers/control-flow-transformers/IControlFlowReplacer';\nimport { INodeTransformer } from '../../../interfaces/node-transformers/INodeTransformer';\n\nimport { ControlFlowReplacer } from '../../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/ControlFlowReplacer';\nimport { NodeTransformer } from '../../../enums/node-transformers/NodeTransformer';\n\nimport { BinaryExpressionControlFlowReplacer } from '../../../node-transformers/control-flow-transformers/control-flow-replacers/BinaryExpressionControlFlowReplacer';\nimport { BlockStatementControlFlowTransformer } from '../../../node-transformers/control-flow-transformers/BlockStatementControlFlowTransformer';\nimport { CallExpressionControlFlowReplacer } from '../../../node-transformers/control-flow-transformers/control-flow-replacers/CallExpressionControlFlowReplacer';\nimport { DeadCodeInjectionTransformer } from '../../../node-transformers/dead-code-injection-transformers/DeadCodeInjectionTransformer';\nimport { FunctionControlFlowTransformer } from '../../../node-transformers/control-flow-transformers/FunctionControlFlowTransformer';\nimport { LogicalExpressionControlFlowReplacer } from '../../../node-transformers/control-flow-transformers/control-flow-replacers/LogicalExpressionControlFlowReplacer';\nimport { StringLiteralControlFlowReplacer } from '../../../node-transformers/control-flow-transformers/control-flow-replacers/StringLiteralControlFlowReplacer';\n\nexport const controlFlowTransformersModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // control flow transformers\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(BlockStatementControlFlowTransformer)\n        .whenTargetNamed(NodeTransformer.BlockStatementControlFlowTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(DeadCodeInjectionTransformer)\n        .whenTargetNamed(NodeTransformer.DeadCodeInjectionTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(FunctionControlFlowTransformer)\n        .whenTargetNamed(NodeTransformer.FunctionControlFlowTransformer);\n\n    // control flow replacers\n    bind<IControlFlowReplacer>(ServiceIdentifiers.IControlFlowReplacer)\n        .to(BinaryExpressionControlFlowReplacer)\n        .whenTargetNamed(ControlFlowReplacer.BinaryExpressionControlFlowReplacer);\n\n    bind<IControlFlowReplacer>(ServiceIdentifiers.IControlFlowReplacer)\n        .to(CallExpressionControlFlowReplacer)\n        .whenTargetNamed(ControlFlowReplacer.CallExpressionControlFlowReplacer);\n\n    bind<IControlFlowReplacer>(ServiceIdentifiers.IControlFlowReplacer)\n        .to(LogicalExpressionControlFlowReplacer)\n        .whenTargetNamed(ControlFlowReplacer.LogicalExpressionControlFlowReplacer);\n\n    bind<IControlFlowReplacer>(ServiceIdentifiers.IControlFlowReplacer)\n        .to(StringLiteralControlFlowReplacer)\n        .whenTargetNamed(ControlFlowReplacer.StringLiteralControlFlowReplacer);\n\n    // control flow replacer factory\n    bind<IControlFlowReplacer>(ServiceIdentifiers.Factory__IControlFlowReplacer)\n        .toFactory<IControlFlowReplacer>(InversifyContainerFacade\n            .getCacheFactory<ControlFlowReplacer, IControlFlowReplacer>(ServiceIdentifiers.IControlFlowReplacer));\n});\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TControlFlowCustomNodeFactory } from '../../../types/container/custom-nodes/TControlFlowCustomNodeFactory';\nimport { TControlFlowStorage } from '../../../types/storages/TControlFlowStorage';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { ControlFlowCustomNode } from '../../../enums/custom-nodes/ControlFlowCustomNode';\n\nimport { ExpressionWithOperatorControlFlowReplacer } from './ExpressionWithOperatorControlFlowReplacer';\n\n@injectable()\nexport class BinaryExpressionControlFlowReplacer extends ExpressionWithOperatorControlFlowReplacer {\n    /**\n     * @type {number}\n     */\n    private static readonly usingExistingIdentifierChance: number = 0.5;\n\n    /**\n     * @param {TControlFlowCustomNodeFactory} controlFlowCustomNodeFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n            controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(controlFlowCustomNodeFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {BinaryExpression} binaryExpressionNode\n     * @param {Node} parentNode\n     * @param {TControlFlowStorage} controlFlowStorage\n     * @returns {Node}\n     */\n    public replace (\n        binaryExpressionNode: ESTree.BinaryExpression,\n        parentNode: ESTree.Node,\n        controlFlowStorage: TControlFlowStorage\n    ): ESTree.Node {\n        const replacerId: string = binaryExpressionNode.operator;\n        const binaryExpressionFunctionCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.BinaryExpressionFunctionNode\n        );\n\n        binaryExpressionFunctionCustomNode.initialize(replacerId);\n\n        const storageKey: string = this.insertCustomNodeToControlFlowStorage(\n            binaryExpressionFunctionCustomNode,\n            controlFlowStorage,\n            replacerId,\n            BinaryExpressionControlFlowReplacer.usingExistingIdentifierChance\n        );\n\n        return this.getControlFlowStorageCallNode(\n            controlFlowStorage.getStorageId(),\n            storageKey,\n            binaryExpressionNode.left,\n            binaryExpressionNode.right\n        );\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TControlFlowCustomNodeFactory } from '../../types/container/custom-nodes/TControlFlowCustomNodeFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IArrayUtils } from '../../interfaces/utils/IArrayUtils';\nimport { ICustomNode } from '../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { ControlFlowCustomNode } from '../../enums/custom-nodes/ControlFlowCustomNode';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class BlockStatementControlFlowTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IArrayUtils}\n     */\n    private readonly arrayUtils: IArrayUtils;\n\n    /**\n     * @type {TControlFlowCustomNodeFactory}\n     */\n    private readonly controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory;\n\n    /**\n     * @param {TControlFlowCustomNodeFactory} controlFlowCustomNodeFactory\n     * @param {IArrayUtils} arrayUtils\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n            controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory,\n        @inject(ServiceIdentifiers.IArrayUtils) arrayUtils: IArrayUtils,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.controlFlowCustomNodeFactory = controlFlowCustomNodeFactory;\n        this.arrayUtils = arrayUtils;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    private static isProhibitedStatementNode (node: ESTree.Node): boolean {\n        const isBreakOrContinueStatement: boolean = NodeGuards.isBreakStatementNode(node)\n            || NodeGuards.isContinueStatementNode(node);\n        const isVariableDeclarationWithLetOrConstKind: boolean = NodeGuards.isVariableDeclarationNode(node)\n            && (node.kind === 'const' || node.kind === 'let');\n        const isClassDeclaration: boolean = NodeGuards.isClassDeclarationNode(node);\n\n        return NodeGuards.isFunctionDeclarationNode(node)\n            || isBreakOrContinueStatement\n            || isVariableDeclarationWithLetOrConstKind\n            || isClassDeclaration;\n    }\n\n    /**\n     * @param {BlockStatement} blockStatementNode\n     * @returns {boolean}\n     */\n    private static canTransformBlockStatementNode (blockStatementNode: ESTree.BlockStatement): boolean {\n        let canTransform: boolean = true;\n\n        estraverse.traverse(blockStatementNode, {\n            enter: (node: ESTree.Node): estraverse.VisitorOption | void => {\n                if (NodeGuards.isWhileStatementNode(node)) {\n                    return estraverse.VisitorOption.Skip;\n                }\n\n                if (BlockStatementControlFlowTransformer.isProhibitedStatementNode(node)) {\n                    canTransform = false;\n                }\n            }\n        });\n\n        if (blockStatementNode.body.length <= 4) {\n            canTransform = false;\n        }\n\n        return canTransform;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.ControlFlowFlattening:\n                return {\n                    leave: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isBlockStatementNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {BlockStatement} blockStatementNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (blockStatementNode: ESTree.BlockStatement, parentNode: ESTree.Node): ESTree.Node {\n        if (\n            this.randomGenerator.getMathRandom() > this.options.controlFlowFlatteningThreshold ||\n            !BlockStatementControlFlowTransformer.canTransformBlockStatementNode(blockStatementNode)\n        ) {\n            return blockStatementNode;\n        }\n\n        const blockStatementBody: ESTree.Statement[] = blockStatementNode.body;\n        const originalKeys: number[] = this.arrayUtils.createWithRange(blockStatementBody.length);\n        const shuffledKeys: number[] = this.arrayUtils.shuffle(originalKeys);\n        const originalKeysIndexesInShuffledArray: number[] = originalKeys.map((key: number) => shuffledKeys.indexOf(key));\n        const blockStatementControlFlowFlatteningCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.BlockStatementControlFlowFlatteningNode\n        );\n\n        blockStatementControlFlowFlatteningCustomNode.initialize(\n            blockStatementBody,\n            shuffledKeys,\n            originalKeysIndexesInShuffledArray\n        );\n\n        const newBlockStatementNode: TStatement = blockStatementControlFlowFlatteningCustomNode.getNode()[0];\n\n        NodeUtils.parentizeNode(newBlockStatementNode, parentNode);\n\n        return newBlockStatementNode;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TControlFlowCustomNodeFactory } from '../../../types/container/custom-nodes/TControlFlowCustomNodeFactory';\nimport { TControlFlowStorage } from '../../../types/storages/TControlFlowStorage';\nimport { TStatement } from '../../../types/node/TStatement';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { ControlFlowCustomNode } from '../../../enums/custom-nodes/ControlFlowCustomNode';\n\nimport { AbstractControlFlowReplacer } from './AbstractControlFlowReplacer';\nimport { NodeGuards } from '../../../node/NodeGuards';\n\n@injectable()\nexport class CallExpressionControlFlowReplacer extends AbstractControlFlowReplacer {\n    /**\n     * @type {number}\n     */\n    private static readonly usingExistingIdentifierChance: number = 0.5;\n\n    /**\n     * @param {TControlFlowCustomNodeFactory} controlFlowCustomNodeFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n            controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(controlFlowCustomNodeFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {CallExpression} callExpressionNode\n     * @param {NodeGuards} parentNode\n     * @param {TControlFlowStorage} controlFlowStorage\n     * @returns {NodeGuards}\n     */\n    public replace (\n        callExpressionNode: ESTree.CallExpression,\n        parentNode: ESTree.Node,\n        controlFlowStorage: TControlFlowStorage\n    ): ESTree.Node {\n        const callee: ESTree.Expression = <ESTree.Expression>callExpressionNode.callee;\n\n        if (!NodeGuards.isIdentifierNode(callee)) {\n            return callExpressionNode;\n        }\n\n        const replacerId: string = String(callExpressionNode.arguments.length);\n        const callExpressionFunctionCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.CallExpressionFunctionNode\n        );\n        const expressionArguments: (ESTree.Expression | ESTree.SpreadElement)[] = callExpressionNode.arguments;\n\n        callExpressionFunctionCustomNode.initialize(expressionArguments);\n\n        const storageKey: string = this.insertCustomNodeToControlFlowStorage(\n            callExpressionFunctionCustomNode,\n            controlFlowStorage,\n            replacerId,\n            CallExpressionControlFlowReplacer.usingExistingIdentifierChance\n        );\n\n        return this.getControlFlowStorageCallNode(\n            controlFlowStorage.getStorageId(),\n            storageKey,\n            callee,\n            expressionArguments\n        );\n    }\n\n    /**\n     * @param {string} controlFlowStorageId\n     * @param {string} storageKey\n     * @param {Expression} callee\n     * @param {(Expression | SpreadElement)[]} expressionArguments\n     * @returns {NodeGuards}\n     */\n    protected getControlFlowStorageCallNode (\n        controlFlowStorageId: string,\n        storageKey: string,\n        callee: ESTree.Expression,\n        expressionArguments: (ESTree.Expression | ESTree.SpreadElement)[]\n    ): ESTree.Node {\n        const controlFlowStorageCallCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.CallExpressionControlFlowStorageCallNode\n        );\n\n        controlFlowStorageCallCustomNode.initialize(controlFlowStorageId, storageKey, callee, expressionArguments);\n\n        const statementNode: TStatement = controlFlowStorageCallCustomNode.getNode()[0];\n\n        if (!statementNode || !NodeGuards.isExpressionStatementNode(statementNode)) {\n            throw new Error(`\\`controlFlowStorageCallCustomNode.getNode()[0]\\` should returns array with \\`ExpressionStatement\\` node`);\n        }\n\n        return statementNode.expression;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TDeadNodeInjectionCustomNodeFactory } from '../../types/container/custom-nodes/TDeadNodeInjectionCustomNodeFactory';\nimport { TNodeWithStatements } from '../../types/node/TNodeWithStatements';\n\nimport { ICustomNode } from '../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { ITransformersRunner } from '../../interfaces/node-transformers/ITransformersRunner';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { DeadCodeInjectionCustomNode } from '../../enums/custom-nodes/DeadCodeInjectionCustomNode';\nimport { NodeTransformer } from '../../enums/node-transformers/NodeTransformer';\nimport { NodeType } from '../../enums/node/NodeType';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeStatementUtils } from '../../node/NodeStatementUtils';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class DeadCodeInjectionTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {string}\n     */\n    private static readonly deadCodeInjectionRootAstHostNodeName: string = 'deadCodeInjectionRootAstHostNode';\n\n    /**\n     * @type {number}\n     */\n    private static readonly maxNestedBlockStatementsCount: number = 4;\n\n    /**\n     * @type {number}\n     */\n    private static readonly minCollectedBlockStatementsCount: number = 5;\n\n    /**\n     * @type {NodeTransformer[]}\n     */\n    private static readonly transformersToRenameBlockScopeIdentifiers: NodeTransformer[] = [\n        NodeTransformer.CatchClauseTransformer,\n        NodeTransformer.ClassDeclarationTransformer,\n        NodeTransformer.FunctionDeclarationTransformer,\n        NodeTransformer.FunctionTransformer,\n        NodeTransformer.LabeledStatementTransformer,\n        NodeTransformer.VariableDeclarationTransformer\n    ];\n\n    /**\n     * @type {Set <BlockStatement>}\n     */\n    private readonly deadCodeInjectionRootAstHostNodeSet: Set <ESTree.BlockStatement> = new Set();\n\n    /**\n     * @type {ESTree.BlockStatement[]}\n     */\n    private readonly collectedBlockStatements: ESTree.BlockStatement[] = [];\n\n    /**\n     * @type {number}\n     */\n    private collectedBlockStatementsTotalLength: number = 0;\n\n    /**\n     * @type {TDeadNodeInjectionCustomNodeFactory}\n     */\n    private readonly deadCodeInjectionCustomNodeFactory: TDeadNodeInjectionCustomNodeFactory;\n\n    /**\n     * @type {ITransformersRunner}\n     */\n    private readonly transformersRunner: ITransformersRunner;\n\n    /**\n     * @param {TDeadNodeInjectionCustomNodeFactory} deadCodeInjectionCustomNodeFactory\n     * @param {ITransformersRunner} transformersRunner\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IDeadCodeInjectionCustomNode)\n            deadCodeInjectionCustomNodeFactory: TDeadNodeInjectionCustomNodeFactory,\n        @inject(ServiceIdentifiers.ITransformersRunner) transformersRunner: ITransformersRunner,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.deadCodeInjectionCustomNodeFactory = deadCodeInjectionCustomNodeFactory;\n        this.transformersRunner = transformersRunner;\n    }\n\n    /**\n     * @param {Node} targetNode\n     * @returns {boolean}\n     */\n    private static isProhibitedNodeInsideCollectedBlockStatement (targetNode: ESTree.Node): boolean {\n        return NodeGuards.isBreakStatementNode(targetNode)\n            || NodeGuards.isContinueStatementNode(targetNode)\n            || NodeGuards.isAwaitExpressionNode(targetNode)\n            || NodeGuards.isSuperNode(targetNode);\n    }\n\n    /**\n     * @param {Node} targetNode\n     * @returns {boolean}\n     */\n    private static isScopeHoistingFunctionDeclaration (targetNode: ESTree.Node): boolean {\n        if (!NodeGuards.isFunctionDeclarationNode(targetNode)) {\n            return false;\n        }\n\n        const scopeNode: TNodeWithStatements = NodeStatementUtils.getScopeOfNode(targetNode);\n        const scopeBody: ESTree.Statement[] = !NodeGuards.isSwitchCaseNode(scopeNode)\n            ? <ESTree.Statement[]>scopeNode.body\n            : scopeNode.consequent;\n        const indexInScope: number = scopeBody.indexOf(targetNode);\n\n        if (indexInScope === 0) {\n            return false;\n        }\n\n        const slicedBody: ESTree.Statement[] = scopeBody.slice(0, indexInScope);\n        const hostBlockStatementNode: ESTree.BlockStatement = NodeFactory.blockStatementNode(slicedBody);\n        const functionDeclarationName: string = targetNode.id.name;\n\n        let isScopeHoistedFunctionDeclaration: boolean = false;\n\n        estraverse.traverse(hostBlockStatementNode, {\n            enter: (node: ESTree.Node): estraverse.VisitorOption | void => {\n                if (NodeGuards.isIdentifierNode(node) && node.name === functionDeclarationName) {\n                    isScopeHoistedFunctionDeclaration = true;\n\n                    return estraverse.VisitorOption.Break;\n                }\n            }\n        });\n\n        return isScopeHoistedFunctionDeclaration;\n    }\n\n    /**\n     * @param {BlockStatement} blockStatementNode\n     * @returns {boolean}\n     */\n    private static isValidCollectedBlockStatementNode (blockStatementNode: ESTree.BlockStatement): boolean {\n        if (!blockStatementNode.body.length) {\n            return false;\n        }\n\n        let nestedBlockStatementsCount: number = 0;\n        let isValidBlockStatementNode: boolean = true;\n\n        estraverse.traverse(blockStatementNode, {\n            enter: (node: ESTree.Node): estraverse.VisitorOption | void => {\n                if (NodeGuards.isBlockStatementNode(node)) {\n                    nestedBlockStatementsCount++;\n                }\n\n                if (\n                    nestedBlockStatementsCount > DeadCodeInjectionTransformer.maxNestedBlockStatementsCount\n                    || DeadCodeInjectionTransformer.isProhibitedNodeInsideCollectedBlockStatement(node)\n                    || DeadCodeInjectionTransformer.isScopeHoistingFunctionDeclaration(node)\n                ) {\n                    isValidBlockStatementNode = false;\n\n                    return estraverse.VisitorOption.Break;\n                }\n            }\n        });\n\n        return isValidBlockStatementNode;\n    }\n\n    /**\n     * @param {BlockStatement} blockStatementNode\n     * @returns {boolean}\n     */\n    private static isValidWrappedBlockStatementNode (blockStatementNode: ESTree.BlockStatement): boolean {\n        if (!blockStatementNode.body.length) {\n            return false;\n        }\n\n        let isValidBlockStatementNode: boolean = true;\n\n        estraverse.traverse(blockStatementNode, {\n            enter: (node: ESTree.Node): estraverse.VisitorOption | void => {\n                if (DeadCodeInjectionTransformer.isScopeHoistingFunctionDeclaration(node)) {\n                    isValidBlockStatementNode = false;\n\n                    return estraverse.VisitorOption.Break;\n                }\n            }\n        });\n\n        if (!isValidBlockStatementNode) {\n            return false;\n        }\n\n        const parentNodeWithStatements: TNodeWithStatements = NodeStatementUtils\n            .getParentNodeWithStatements(blockStatementNode);\n\n        return parentNodeWithStatements.type !== NodeType.Program;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.DeadCodeInjection:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isProgramNode(node)) {\n                            this.analyzeNode(node, parentNode);\n\n                            return node;\n                        }\n                    },\n                    leave: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isBlockStatementNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            case TransformationStage.Finalizing:\n                if (!this.deadCodeInjectionRootAstHostNodeSet.size) {\n                    return null;\n                }\n\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && this.isDeadCodeInjectionRootAstHostNode(node)) {\n                            return this.restoreNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {NodeGuards} programNode\n     * @param {NodeGuards} parentNode\n     */\n    public analyzeNode (programNode: ESTree.Node, parentNode: ESTree.Node): void {\n        estraverse.traverse(programNode, {\n            enter: (node: ESTree.Node): void => {\n                if (!NodeGuards.isBlockStatementNode(node)) {\n                    return;\n                }\n\n                const clonedBlockStatementNode: ESTree.BlockStatement = NodeUtils.clone(node);\n\n                if (!DeadCodeInjectionTransformer.isValidCollectedBlockStatementNode(clonedBlockStatementNode)) {\n                    return;\n                }\n\n                /**\n                 * We should transform identifiers in the dead code block statement to avoid conflicts with original code\n                 */\n                const transformedBlockStatementNode: ESTree.BlockStatement =\n                    this.makeClonedBlockStatementNodeUnique(clonedBlockStatementNode);\n\n                this.collectedBlockStatements.push(transformedBlockStatementNode);\n            }\n        });\n\n        this.collectedBlockStatementsTotalLength = this.collectedBlockStatements.length;\n    }\n\n    /**\n     * @param {BlockStatement} blockStatementNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards | VisitorOption}\n     */\n    public transformNode (\n        blockStatementNode: ESTree.BlockStatement,\n        parentNode: ESTree.Node\n    ): ESTree.Node | estraverse.VisitorOption {\n        const canBreakTraverse: boolean = !this.collectedBlockStatements.length\n            || this.collectedBlockStatementsTotalLength < DeadCodeInjectionTransformer.minCollectedBlockStatementsCount;\n\n        if (canBreakTraverse) {\n            return estraverse.VisitorOption.Break;\n        }\n\n        if (\n            this.randomGenerator.getMathRandom() > this.options.deadCodeInjectionThreshold\n            || !DeadCodeInjectionTransformer.isValidWrappedBlockStatementNode(blockStatementNode)\n        ) {\n            return blockStatementNode;\n        }\n\n        const minInteger: number = 0;\n        const maxInteger: number = this.collectedBlockStatements.length - 1;\n        const randomIndex: number = this.randomGenerator.getRandomInteger(minInteger, maxInteger);\n        const randomBlockStatementNode: ESTree.BlockStatement = this.collectedBlockStatements.splice(randomIndex, 1)[0];\n        const isDuplicateBlockStatementNodes: boolean = randomBlockStatementNode === blockStatementNode;\n\n        if (isDuplicateBlockStatementNodes) {\n            return blockStatementNode;\n        }\n\n        return this.replaceBlockStatementNode(blockStatementNode, randomBlockStatementNode, parentNode);\n    }\n\n    /**\n     * @param {FunctionExpression} deadCodeInjectionRootAstHostNode\n     * @param {Node} parentNode\n     * @returns {Node}\n     */\n    public restoreNode (deadCodeInjectionRootAstHostNode: ESTree.BlockStatement, parentNode: ESTree.Node): ESTree.Node {\n        const hostNodeFirstStatement: ESTree.Statement = deadCodeInjectionRootAstHostNode.body[0];\n\n        if (!NodeGuards.isFunctionDeclarationNode(hostNodeFirstStatement)) {\n            throw new Error('Wrong dead code injection root AST host node. Host node should contain `FunctionDeclaration` node');\n        }\n\n        return hostNodeFirstStatement.body;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    private isDeadCodeInjectionRootAstHostNode (node: ESTree.Node): node is ESTree.BlockStatement {\n        return NodeGuards.isBlockStatementNode(node) && this.deadCodeInjectionRootAstHostNodeSet.has(node);\n    }\n\n    /**\n     * Make all identifiers in cloned block statement unique\n     *\n     * @param {BlockStatement} clonedBlockStatementNode\n     * @returns {BlockStatement}\n     */\n    private makeClonedBlockStatementNodeUnique (clonedBlockStatementNode: ESTree.BlockStatement): ESTree.BlockStatement {\n        // should wrap cloned block statement node into function node for correct scope encapsulation\n        const hostNode: ESTree.FunctionExpression = NodeFactory\n            .functionExpressionNode([], clonedBlockStatementNode);\n\n        NodeUtils.parentizeNode(hostNode, hostNode);\n        NodeUtils.parentizeNode(clonedBlockStatementNode, hostNode);\n\n        return this.transformersRunner.transform(\n            hostNode,\n            DeadCodeInjectionTransformer.transformersToRenameBlockScopeIdentifiers,\n            TransformationStage.Obfuscating\n        ).body;\n    }\n\n    /**\n     * @param {BlockStatement} blockStatementNode\n     * @param {BlockStatement} randomBlockStatementNode\n     * @param {Node} parentNode\n     * @returns {BlockStatement}\n     */\n    private replaceBlockStatementNode (\n        blockStatementNode: ESTree.BlockStatement,\n        randomBlockStatementNode: ESTree.BlockStatement,\n        parentNode: ESTree.Node\n    ): ESTree.BlockStatement {\n        /**\n         * Should wrap original random block statement node into the parent block statement node (ast root host node)\n         * with function declaration node. This function declaration node will create block scope for all identifiers\n         * inside random block statement node and this identifiers won't affect identifiers of the rest AST tree.\n         */\n        const deadCodeInjectionRootAstHostNode: ESTree.BlockStatement = NodeFactory.blockStatementNode([\n            NodeFactory.functionDeclarationNode(\n                DeadCodeInjectionTransformer.deadCodeInjectionRootAstHostNodeName,\n                [],\n                randomBlockStatementNode\n            )\n        ]);\n\n        /**\n         * Should store that host node and then extract random block statement node on the `finalizing` stage\n         */\n        this.deadCodeInjectionRootAstHostNodeSet.add(deadCodeInjectionRootAstHostNode);\n\n        const blockStatementDeadCodeInjectionCustomNode: ICustomNode = this.deadCodeInjectionCustomNodeFactory(\n            DeadCodeInjectionCustomNode.BlockStatementDeadCodeInjectionNode\n        );\n\n        blockStatementDeadCodeInjectionCustomNode.initialize(blockStatementNode, deadCodeInjectionRootAstHostNode);\n\n        const newBlockStatementNode: ESTree.BlockStatement = <ESTree.BlockStatement>blockStatementDeadCodeInjectionCustomNode.getNode()[0];\n\n        NodeUtils.parentizeNode(newBlockStatementNode, parentNode);\n\n        return newBlockStatementNode;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TControlFlowCustomNodeFactory } from '../../types/container/custom-nodes/TControlFlowCustomNodeFactory';\nimport { TControlFlowReplacerFactory } from '../../types/container/node-transformers/TControlFlowReplacerFactory';\nimport { TControlFlowStorage } from '../../types/storages/TControlFlowStorage';\nimport { TControlFlowStorageFactory } from '../../types/container/node-transformers/TControlFlowStorageFactory';\nimport { TNodeWithStatements } from '../../types/node/TNodeWithStatements';\n\nimport { ICustomNode } from '../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { ControlFlowCustomNode } from '../../enums/custom-nodes/ControlFlowCustomNode';\nimport { ControlFlowReplacer } from '../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/ControlFlowReplacer';\nimport { NodeType } from '../../enums/node/NodeType';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeAppender } from '../../node/NodeAppender';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeMetadata } from '../../node/NodeMetadata';\nimport { NodeStatementUtils } from '../../node/NodeStatementUtils';\n\n@injectable()\nexport class FunctionControlFlowTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {Map <string, ControlFlowReplacer>}\n     */\n    private static readonly controlFlowReplacersMap: Map <string, ControlFlowReplacer> = new Map([\n        [NodeType.BinaryExpression, ControlFlowReplacer.BinaryExpressionControlFlowReplacer],\n        [NodeType.CallExpression, ControlFlowReplacer.CallExpressionControlFlowReplacer],\n        [NodeType.LogicalExpression, ControlFlowReplacer.LogicalExpressionControlFlowReplacer],\n        [NodeType.Literal, ControlFlowReplacer.StringLiteralControlFlowReplacer]\n    ]);\n\n    /**\n     * @type {number}\n     */\n    private static readonly hostNodeSearchMinDepth: number = 0;\n\n    /**\n     * @type {number}\n     */\n    private static readonly hostNodeSearchMaxDepth: number = 2;\n\n    /**\n     * @type {Map<ESTree.Node, TControlFlowStorage>}\n     */\n    private readonly controlFlowData: Map <ESTree.Node, TControlFlowStorage> = new Map();\n\n    /**\n     * @type {Set<ESTree.Function>}\n     */\n    private readonly visitedFunctionNodes: Set<ESTree.Function> = new Set();\n\n    /**\n     * @type {Set<TNodeWithStatements>}\n     */\n    private readonly hostNodesWithControlFlowNode: Set<TNodeWithStatements> = new Set();\n\n    /**\n     * @type {TControlFlowReplacerFactory}\n     */\n    private readonly controlFlowReplacerFactory: TControlFlowReplacerFactory;\n\n    /**\n     * @type {TControlFlowStorageFactory}\n     */\n    private readonly controlFlowStorageFactory: TControlFlowStorageFactory;\n\n    /**\n     * @type {TControlFlowCustomNodeFactory}\n     */\n    private readonly controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory;\n\n    /**\n     * @param {TControlFlowStorageFactory} controlFlowStorageFactory\n     * @param {TControlFlowReplacerFactory} controlFlowReplacerFactory\n     * @param {TControlFlowCustomNodeFactory} controlFlowCustomNodeFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__TControlFlowStorage)\n            controlFlowStorageFactory: TControlFlowStorageFactory,\n        @inject(ServiceIdentifiers.Factory__IControlFlowReplacer)\n            controlFlowReplacerFactory: TControlFlowReplacerFactory,\n        @inject(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n            controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.controlFlowStorageFactory = controlFlowStorageFactory;\n        this.controlFlowReplacerFactory = controlFlowReplacerFactory;\n        this.controlFlowCustomNodeFactory = controlFlowCustomNodeFactory;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.ControlFlowFlattening:\n                return {\n                    leave: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (\n                            parentNode && (\n                                NodeGuards.isFunctionDeclarationNode(node) ||\n                                NodeGuards.isFunctionExpressionNode(node) ||\n                                NodeGuards.isArrowFunctionExpressionNode(node)\n                            )\n                        ) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {Function} functionNode\n     * @param {NodeGuards} parentNode\n     * @returns {Function}\n     */\n    public transformNode (functionNode: ESTree.Function, parentNode: ESTree.Node): ESTree.Function {\n        this.visitedFunctionNodes.add(functionNode);\n\n        if (!NodeGuards.isBlockStatementNode(functionNode.body)) {\n            return functionNode;\n        }\n\n        const hostNode: TNodeWithStatements = this.getHostNode(functionNode.body);\n        const controlFlowStorage: TControlFlowStorage = this.getControlFlowStorage(hostNode);\n\n        this.controlFlowData.set(hostNode, controlFlowStorage);\n        this.transformFunctionBody(functionNode.body, controlFlowStorage);\n\n        if (!controlFlowStorage.getLength()) {\n            return functionNode;\n        }\n\n        const controlFlowStorageCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.ControlFlowStorageNode\n        );\n\n        controlFlowStorageCustomNode.initialize(controlFlowStorage);\n        NodeAppender.prepend(hostNode, controlFlowStorageCustomNode.getNode());\n        this.hostNodesWithControlFlowNode.add(hostNode);\n\n        return functionNode;\n    }\n\n    /**\n     * @param {TNodeWithStatements} hostNode\n     * @returns {TControlFlowStorage}\n     */\n    private getControlFlowStorage (hostNode: TNodeWithStatements): TControlFlowStorage {\n        const controlFlowStorage: TControlFlowStorage = this.controlFlowStorageFactory();\n\n        if (this.controlFlowData.has(hostNode)) {\n            if (this.hostNodesWithControlFlowNode.has(hostNode)) {\n                if (NodeGuards.isSwitchCaseNode(hostNode)) {\n                    hostNode.consequent.shift();\n                } else {\n                    hostNode.body.shift();\n                }\n            }\n\n            const hostControlFlowStorage: TControlFlowStorage = <TControlFlowStorage>this.controlFlowData.get(hostNode);\n\n            controlFlowStorage.mergeWith(hostControlFlowStorage, true);\n        }\n\n        return controlFlowStorage;\n    }\n\n    /**\n     * @param {BlockStatement} functionNodeBody\n     * @returns {TNodeWithStatements}\n     */\n    private getHostNode (functionNodeBody: ESTree.BlockStatement): TNodeWithStatements {\n        const blockScopesOfNode: TNodeWithStatements[] = NodeStatementUtils.getParentNodesWithStatements(functionNodeBody);\n\n        if (blockScopesOfNode.length === 1) {\n            return functionNodeBody;\n        } else {\n            blockScopesOfNode.pop();\n        }\n\n        if (blockScopesOfNode.length > FunctionControlFlowTransformer.hostNodeSearchMinDepth) {\n            blockScopesOfNode.splice(0, FunctionControlFlowTransformer.hostNodeSearchMinDepth);\n        }\n\n        if (blockScopesOfNode.length > FunctionControlFlowTransformer.hostNodeSearchMaxDepth) {\n            blockScopesOfNode.length = FunctionControlFlowTransformer.hostNodeSearchMaxDepth;\n        }\n\n        return this.randomGenerator.getRandomGenerator().pickone(blockScopesOfNode);\n    }\n\n    /**\n     * @param {NodeGuards} node\n     * @returns {boolean}\n     */\n    private isVisitedFunctionNode (node: ESTree.Node): boolean {\n        return (\n            NodeGuards.isFunctionDeclarationNode(node) ||\n            NodeGuards.isFunctionExpressionNode(node) ||\n            NodeGuards.isArrowFunctionExpressionNode(node)\n        ) && this.visitedFunctionNodes.has(node);\n    }\n\n    /**\n     * @param {BlockStatement} functionNodeBody\n     * @param {TControlFlowStorage} controlFlowStorage\n     */\n    private transformFunctionBody (functionNodeBody: ESTree.BlockStatement, controlFlowStorage: TControlFlowStorage): void {\n        estraverse.replace(functionNodeBody, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): estraverse.VisitorOption | ESTree.Node => {\n                if (NodeMetadata.isIgnoredNode(node)) {\n                    return estraverse.VisitorOption.Skip;\n                }\n\n                if (this.isVisitedFunctionNode(node) || !parentNode) {\n                    return estraverse.VisitorOption.Skip;\n                }\n\n                if (!FunctionControlFlowTransformer.controlFlowReplacersMap.has(node.type)) {\n                    return node;\n                }\n\n                if (this.randomGenerator.getMathRandom() > this.options.controlFlowFlatteningThreshold) {\n                    return node;\n                }\n\n                const controlFlowReplacerName: ControlFlowReplacer = <ControlFlowReplacer>FunctionControlFlowTransformer\n                    .controlFlowReplacersMap.get(node.type);\n\n                if (controlFlowReplacerName === undefined) {\n                    return node;\n                }\n\n                return {\n                    ...this.controlFlowReplacerFactory(controlFlowReplacerName).replace(node, parentNode, controlFlowStorage),\n                    parentNode\n                };\n            }\n        });\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TControlFlowCustomNodeFactory } from '../../../types/container/custom-nodes/TControlFlowCustomNodeFactory';\nimport { TControlFlowStorage } from '../../../types/storages/TControlFlowStorage';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { ControlFlowCustomNode } from '../../../enums/custom-nodes/ControlFlowCustomNode';\n\nimport { ExpressionWithOperatorControlFlowReplacer } from './ExpressionWithOperatorControlFlowReplacer';\nimport { NodeGuards } from '../../../node/NodeGuards';\nimport { NodeUtils } from '../../../node/NodeUtils';\n\n@injectable()\nexport class LogicalExpressionControlFlowReplacer extends ExpressionWithOperatorControlFlowReplacer {\n    /**\n     * @type {number}\n     */\n    private static readonly usingExistingIdentifierChance: number = 0.5;\n\n    /**\n     * @param {TControlFlowCustomNodeFactory} controlFlowCustomNodeFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n            controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(controlFlowCustomNodeFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {LogicalExpression} logicalExpressionNode\n     * @param {NodeGuards} parentNode\n     * @param {TControlFlowStorage} controlFlowStorage\n     * @returns {NodeGuards}\n     */\n    public replace (\n        logicalExpressionNode: ESTree.LogicalExpression,\n        parentNode: ESTree.Node,\n        controlFlowStorage: TControlFlowStorage\n    ): ESTree.Node {\n        if (this.checkForProhibitedExpressions(logicalExpressionNode.left, logicalExpressionNode.right)) {\n            return logicalExpressionNode;\n        }\n\n        const replacerId: string = logicalExpressionNode.operator;\n        const logicalExpressionFunctionCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.LogicalExpressionFunctionNode\n        );\n\n        logicalExpressionFunctionCustomNode.initialize(replacerId);\n\n        const storageKey: string = this.insertCustomNodeToControlFlowStorage(\n            logicalExpressionFunctionCustomNode,\n            controlFlowStorage,\n            replacerId,\n            LogicalExpressionControlFlowReplacer.usingExistingIdentifierChance\n        );\n\n        return this.getControlFlowStorageCallNode(\n            controlFlowStorage.getStorageId(),\n            storageKey,\n            logicalExpressionNode.left,\n            logicalExpressionNode.right\n        );\n    }\n\n    /**\n     * @param {Expression} leftExpression\n     * @param {Expression} rightExpression\n     * @returns {boolean}\n     */\n    private checkForProhibitedExpressions (leftExpression: ESTree.Expression, rightExpression: ESTree.Expression): boolean {\n        return [leftExpression, rightExpression].some((expressionNode: ESTree.Node | ESTree.Expression): boolean => {\n            let nodeForCheck: ESTree.Node | ESTree.Expression;\n\n            if (!NodeGuards.isUnaryExpressionNode(expressionNode)) {\n                nodeForCheck = expressionNode;\n            } else {\n                nodeForCheck = NodeUtils.getUnaryExpressionArgumentNode(expressionNode);\n            }\n\n            return !NodeGuards.isLiteralNode(nodeForCheck) &&\n                !NodeGuards.isIdentifierNode(nodeForCheck) &&\n                !NodeGuards.isObjectExpressionNode(nodeForCheck) &&\n                !NodeGuards.isExpressionStatementNode(nodeForCheck);\n        });\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TControlFlowCustomNodeFactory } from '../../../types/container/custom-nodes/TControlFlowCustomNodeFactory';\nimport { TControlFlowStorage } from '../../../types/storages/TControlFlowStorage';\nimport { TStatement } from '../../../types/node/TStatement';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { ControlFlowCustomNode } from '../../../enums/custom-nodes/ControlFlowCustomNode';\n\nimport { AbstractControlFlowReplacer } from './AbstractControlFlowReplacer';\nimport { NodeGuards } from '../../../node/NodeGuards';\n\n@injectable()\nexport class StringLiteralControlFlowReplacer extends AbstractControlFlowReplacer {\n    /**\n     * @type {number}\n     */\n    private static readonly usingExistingIdentifierChance: number = 1;\n\n    /**\n     * @param {TControlFlowCustomNodeFactory} controlFlowCustomNodeFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n            controlFlowCustomNodeFactory: TControlFlowCustomNodeFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(controlFlowCustomNodeFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {Literal} literalNode\n     * @param {NodeGuards} parentNode\n     * @param {TControlFlowStorage} controlFlowStorage\n     * @returns {NodeGuards}\n     */\n    public replace (\n        literalNode: ESTree.Literal,\n        parentNode: ESTree.Node,\n        controlFlowStorage: TControlFlowStorage\n    ): ESTree.Node {\n        if (NodeGuards.isPropertyNode(parentNode) && parentNode.key === literalNode) {\n            return literalNode;\n        }\n\n        if (typeof literalNode.value !== 'string' || literalNode.value.length < 3) {\n            return literalNode;\n        }\n\n        const replacerId: string = String(literalNode.value);\n        const literalFunctionCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.StringLiteralNode\n        );\n\n        literalFunctionCustomNode.initialize(literalNode.value);\n\n        const storageKey: string = this.insertCustomNodeToControlFlowStorage(\n            literalFunctionCustomNode,\n            controlFlowStorage,\n            replacerId,\n            StringLiteralControlFlowReplacer.usingExistingIdentifierChance\n        );\n\n        return this.getControlFlowStorageCallNode(controlFlowStorage.getStorageId(), storageKey);\n    }\n\n    /**\n     * @param {string} controlFlowStorageId\n     * @param {string} storageKey\n     * @returns {NodeGuards}\n     */\n    protected getControlFlowStorageCallNode (\n        controlFlowStorageId: string,\n        storageKey: string\n    ): ESTree.Node {\n        const controlFlowStorageCallCustomNode: ICustomNode = this.controlFlowCustomNodeFactory(\n            ControlFlowCustomNode.StringLiteralControlFlowStorageCallNode\n        );\n\n        controlFlowStorageCallCustomNode.initialize(controlFlowStorageId, storageKey);\n\n        const statementNode: TStatement = controlFlowStorageCallCustomNode.getNode()[0];\n\n        if (!statementNode || !NodeGuards.isExpressionStatementNode(statementNode)) {\n            throw new Error(`\\`controlFlowStorageCallCustomNode.getNode()[0]\\` should returns array with \\`ExpressionStatement\\` node`);\n        }\n\n        return statementNode.expression;\n    }\n}\n","import { ContainerModule, interfaces } from 'inversify';\nimport { InversifyContainerFacade } from '../../InversifyContainerFacade';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { INodeTransformer } from '../../../interfaces/node-transformers/INodeTransformer';\nimport { IPropertiesExtractor } from '../../../interfaces/node-transformers/converting-transformers/properties-extractors/IPropertiesExtractor';\n\nimport { NodeTransformer } from '../../../enums/node-transformers/NodeTransformer';\nimport { PropertiesExtractor } from '../../../enums/node-transformers/converting-transformers/properties-extractors/PropertiesExtractor';\n\nimport { AssignmentExpressionPropertiesExtractor } from '../../../node-transformers/converting-transformers/properties-extractors/AssignmentExpressionPropertiesExtractor';\nimport { MemberExpressionTransformer } from '../../../node-transformers/converting-transformers/MemberExpressionTransformer';\nimport { MethodDefinitionTransformer } from '../../../node-transformers/converting-transformers/MethodDefinitionTransformer';\nimport { ObjectExpressionKeysTransformer } from '../../../node-transformers/converting-transformers/ObjectExpressionKeysTransformer';\nimport { ObjectExpressionTransformer } from '../../../node-transformers/converting-transformers/ObjectExpressionTransformer';\nimport { TemplateLiteralTransformer } from '../../../node-transformers/converting-transformers/TemplateLiteralTransformer';\nimport { VariableDeclaratorPropertiesExtractor } from '../../../node-transformers/converting-transformers/properties-extractors/VariableDeclaratorPropertiesExtractor';\n\nexport const convertingTransformersModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // converting transformers\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(MemberExpressionTransformer)\n        .whenTargetNamed(NodeTransformer.MemberExpressionTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(MethodDefinitionTransformer)\n        .whenTargetNamed(NodeTransformer.MethodDefinitionTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(ObjectExpressionKeysTransformer)\n        .whenTargetNamed(NodeTransformer.ObjectExpressionKeysTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(ObjectExpressionTransformer)\n        .whenTargetNamed(NodeTransformer.ObjectExpressionTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(TemplateLiteralTransformer)\n        .whenTargetNamed(NodeTransformer.TemplateLiteralTransformer);\n\n    // properties extractors\n    bind<IPropertiesExtractor>(ServiceIdentifiers.IPropertiesExtractor)\n        .to(AssignmentExpressionPropertiesExtractor)\n        .whenTargetNamed(PropertiesExtractor.AssignmentExpressionPropertiesExtractor);\n\n    bind<IPropertiesExtractor>(ServiceIdentifiers.IPropertiesExtractor)\n        .to(VariableDeclaratorPropertiesExtractor)\n        .whenTargetNamed(PropertiesExtractor.VariableDeclaratorPropertiesExtractor);\n\n    // properties extractor factory\n    bind<IPropertiesExtractor>(ServiceIdentifiers.Factory__IPropertiesExtractor)\n        .toFactory<IPropertiesExtractor>(InversifyContainerFacade\n            .getCacheFactory<PropertiesExtractor, IPropertiesExtractor>(\n                ServiceIdentifiers.IPropertiesExtractor\n            ));\n});\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { AbstractPropertiesExtractor } from './AbstractPropertiesExtractor';\n\n@injectable()\nexport class AssignmentExpressionPropertiesExtractor extends AbstractPropertiesExtractor {\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @param {AssignmentExpression} hostNode\n     * @returns {Node}\n     */\n    public extract (\n        objectExpressionNode: ESTree.ObjectExpression,\n        hostNode: ESTree.AssignmentExpression\n    ): ESTree.Node {\n        const leftNode: ESTree.MemberExpression | ESTree.Pattern = hostNode.left;\n\n        // left node shouldn't be as Pattern node\n        if (AbstractPropertiesExtractor.isProhibitedPattern(leftNode)) {\n            return objectExpressionNode;\n        }\n\n        return this.transformObjectExpressionNode(\n            objectExpressionNode,\n            leftNode\n        );\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeGuards } from '../../node/NodeGuards';\n\n@injectable()\nexport class MemberExpressionTransformer extends AbstractNodeTransformer {\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Converting:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isMemberExpressionNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * replaces:\n     *     object.identifier = 1;\n     *\n     * on:\n     *     object['identifier'] = 1;\n     *\n     * and skip:\n     *     object[identifier] = 1;\n     *\n     * Literal node will be obfuscated by LiteralTransformer\n     *\n     * @param {MemberExpression} memberExpressionNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (memberExpressionNode: ESTree.MemberExpression, parentNode: ESTree.Node): ESTree.Node {\n        if (NodeGuards.isIdentifierNode(memberExpressionNode.property)) {\n            if (memberExpressionNode.computed) {\n                return memberExpressionNode;\n            }\n\n            memberExpressionNode.computed = true;\n            memberExpressionNode.property = NodeFactory.literalNode(memberExpressionNode.property.name);\n        }\n\n        return memberExpressionNode;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeGuards } from '../../node/NodeGuards';\n\n/**\n * replaces:\n *     foo () { //... };\n *\n * on:\n *     ['foo'] { //... };\n *\n * Literal node will be obfuscated by LiteralTransformer\n */\n@injectable()\nexport class MethodDefinitionTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {string[]}\n     */\n    private static readonly ignoredNames: string[] = ['constructor'];\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Converting:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isMethodDefinitionNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * replaces:\n     *     object.identifier = 1;\n     *\n     * on:\n     *     object['identifier'] = 1;\n     *\n     * and skip:\n     *     object[identifier] = 1;\n     * Literal node will be obfuscated by LiteralTransformer\n     *\n     * @param {MethodDefinition} methodDefinitionNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (methodDefinitionNode: ESTree.MethodDefinition, parentNode: ESTree.Node): ESTree.Node {\n        if (\n            NodeGuards.isIdentifierNode(methodDefinitionNode.key) &&\n            !MethodDefinitionTransformer.ignoredNames.includes(methodDefinitionNode.key.name) &&\n            methodDefinitionNode.computed === false\n        ) {\n            methodDefinitionNode.computed = true;\n            methodDefinitionNode.key = NodeFactory.literalNode(methodDefinitionNode.key.name);\n        }\n\n        return methodDefinitionNode;\n    }\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TPropertiesExtractorFactory } from '../../types/container/node-transformers/TPropertiesExtractorFactory';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IPropertiesExtractor } from '../../interfaces/node-transformers/converting-transformers/properties-extractors/IPropertiesExtractor';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { NodeType } from '../../enums/node/NodeType';\nimport { PropertiesExtractor } from '../../enums/node-transformers/converting-transformers/properties-extractors/PropertiesExtractor';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\n\n@injectable()\nexport class ObjectExpressionKeysTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {Map<string, PropertiesExtractor>}\n     */\n    private static readonly propertiesExtractorsMap: Map <string, PropertiesExtractor> = new Map([\n        [NodeType.AssignmentExpression, PropertiesExtractor.AssignmentExpressionPropertiesExtractor],\n        [NodeType.VariableDeclarator, PropertiesExtractor.VariableDeclaratorPropertiesExtractor]\n    ]);\n\n    /**\n     * @type {TPropertiesExtractorFactory}\n     */\n    private readonly propertiesExtractorFactory: TPropertiesExtractorFactory;\n\n    /**\n     * @param {TPropertiesExtractorFactory} propertiesExtractorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IPropertiesExtractor)\n            propertiesExtractorFactory: TPropertiesExtractorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.propertiesExtractorFactory = propertiesExtractorFactory;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        if (transformationStage !== TransformationStage.Converting) {\n            return null;\n        }\n\n        return {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                if (\n                    this.options.transformObjectKeys\n                    && parentNode\n                    && NodeGuards.isObjectExpressionNode(node)\n                ) {\n                    return this.transformNode(node, parentNode);\n                }\n            }\n        };\n    }\n\n    /**\n     * replaces:\n     *     var object = {\n     *          foo: 1,\n     *          bar: 2\n     *     };\n     *\n     * on:\n     *     var object = {};\n     *     object['foo'] = 1;\n     *     object['bar'] = 2;\n     *\n     * @param {MemberExpression} objectExpressionNode\n     * @param {Node} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (objectExpressionNode: ESTree.ObjectExpression, parentNode: ESTree.Node): ESTree.Node {\n        if (!objectExpressionNode.properties.length) {\n            return objectExpressionNode;\n        }\n\n        const propertiesExtractorName: PropertiesExtractor | undefined = ObjectExpressionKeysTransformer\n            .propertiesExtractorsMap\n            .get(parentNode.type);\n\n        if (!propertiesExtractorName) {\n            return objectExpressionNode;\n        }\n\n        const propertiesExtractor: IPropertiesExtractor = this.propertiesExtractorFactory(propertiesExtractorName);\n\n        return propertiesExtractor.extract(objectExpressionNode, parentNode);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { IEscapeSequenceEncoder } from '../../interfaces/utils/IEscapeSequenceEncoder';\n\n/**\n * replaces:\n *     var object = { PSEUDO: 1 };\n *\n * on:\n *     var object = { 'PSEUDO': 1 };\n */\n@injectable()\nexport class ObjectExpressionTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IEscapeSequenceEncoder}\n     */\n    private readonly escapeSequenceEncoder: IEscapeSequenceEncoder;\n\n    /**\n     * @param {IEscapeSequenceEncoder} escapeSequenceEncoder\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IEscapeSequenceEncoder) escapeSequenceEncoder: IEscapeSequenceEncoder,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.escapeSequenceEncoder = escapeSequenceEncoder;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Converting:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isObjectExpressionNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (objectExpressionNode: ESTree.ObjectExpression, parentNode: ESTree.Node): ESTree.Node {\n        objectExpressionNode.properties\n            .forEach((property: ESTree.Property) => {\n                if (!property.key) {\n                    return;\n                }\n\n                if (property.computed) {\n                    this.transformComputedProperty(property);\n                } else {\n                    this.transformBaseProperty(property);\n                }\n            });\n\n        return objectExpressionNode;\n    }\n\n    /**\n     * @param {Property} property\n     */\n    private transformComputedProperty (property: ESTree.Property): void {\n        if (!NodeGuards.isLiteralNode(property.key) || !(typeof property.key.value === 'string')) {\n            return;\n        }\n\n        property.key = NodeFactory.literalNode(this.getPropertyKeyValue(property.key.value));\n    }\n\n    /**\n     * @param {Property} property\n     */\n    private transformBaseProperty (property: ESTree.Property): void {\n        if (property.shorthand) {\n            property.shorthand = false;\n        }\n\n        if (!NodeGuards.isIdentifierNode(property.key)) {\n            return;\n        }\n\n        property.key = NodeFactory.literalNode(this.getPropertyKeyValue(property.key.name));\n    }\n\n    /**\n     * @param {string} inputValue\n     * @returns {string}\n     */\n    private getPropertyKeyValue (inputValue: string): string {\n        return this.options.unicodeEscapeSequence\n            ? this.escapeSequenceEncoder.encode(inputValue, true)\n            : inputValue;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n/**\n * Transform ES2015 template literals to ES5\n * Thanks to Babel for algorithm\n */\n@injectable()\nexport class TemplateLiteralTransformer extends AbstractNodeTransformer {\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {NodeGuards} node\n     * @returns {boolean}\n     */\n    private static isLiteralNodeWithStringValue (node: ESTree.Node): boolean {\n        return node && NodeGuards.isLiteralNode(node) && typeof node.value === 'string';\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node | null} parentNode\n     * @returns {boolean}\n     */\n    private static isValidTemplateLiteralNode (node: ESTree.Node, parentNode: ESTree.Node): node is ESTree.TemplateLiteral {\n        return NodeGuards.isTemplateLiteralNode(node) && !NodeGuards.isTaggedTemplateExpressionNode(parentNode);\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Converting:\n                return {\n                    leave: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && TemplateLiteralTransformer.isValidTemplateLiteralNode(node, parentNode)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {TemplateLiteral} templateLiteralNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (templateLiteralNode: ESTree.TemplateLiteral, parentNode: ESTree.Node): ESTree.Node {\n        const templateLiteralExpressions: ESTree.Expression[] = templateLiteralNode.expressions;\n\n        let nodes: ESTree.Expression[] = [];\n\n        templateLiteralNode.quasis.forEach((templateElement: ESTree.TemplateElement) => {\n            nodes.push(NodeFactory.literalNode(templateElement.value.cooked));\n\n            const expression: ESTree.Expression | undefined = templateLiteralExpressions.shift();\n\n            if (!expression) {\n                return;\n            }\n\n            nodes.push(expression);\n        });\n\n        nodes = nodes.filter((node: ESTree.Literal | ESTree.Expression) => {\n            return !(NodeGuards.isLiteralNode(node) && node.value === '');\n        });\n\n        // since `+` is left-to-right associative\n        // ensure the first node is a string if first/second isn't\n        if (\n            !TemplateLiteralTransformer.isLiteralNodeWithStringValue(nodes[0]) &&\n            !TemplateLiteralTransformer.isLiteralNodeWithStringValue(nodes[1])\n        ) {\n            nodes.unshift(NodeFactory.literalNode(''));\n        }\n\n        let transformedNode: ESTree.Node;\n\n        if (nodes.length > 1) {\n            let root: ESTree.BinaryExpression = NodeFactory.binaryExpressionNode(\n                '+',\n                <ESTree.Literal>nodes.shift(),\n                <ESTree.Expression>nodes.shift()\n            );\n\n            nodes.forEach((node: ESTree.Literal | ESTree.Expression) => {\n                root = NodeFactory.binaryExpressionNode('+', root, node);\n            });\n\n            transformedNode = root;\n        } else {\n            transformedNode = nodes[0];\n        }\n\n        NodeUtils.parentizeAst(transformedNode);\n\n        return transformedNode;\n    }\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { AbstractPropertiesExtractor } from './AbstractPropertiesExtractor';\nimport { NodeGuards } from '../../../node/NodeGuards';\n\n@injectable()\nexport class VariableDeclaratorPropertiesExtractor extends AbstractPropertiesExtractor {\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @param {VariableDeclarator} hostNode\n     * @returns {Node}\n     */\n    public extract (\n        objectExpressionNode: ESTree.ObjectExpression,\n        hostNode: ESTree.VariableDeclarator\n    ): ESTree.Node {\n        if (\n            !NodeGuards.isIdentifierNode(hostNode.id)\n            || this.isProhibitedObjectExpressionNode(objectExpressionNode, hostNode.id)\n        ) {\n            return objectExpressionNode;\n        }\n\n        return this.transformObjectExpressionNode(objectExpressionNode, hostNode.id);\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @returns {VariableDeclarator}\n     */\n    private getHostVariableDeclaratorNode (objectExpressionNode: ESTree.ObjectExpression): ESTree.VariableDeclarator | never {\n        const { parentNode } = objectExpressionNode;\n\n        if (!parentNode || !NodeGuards.isVariableDeclaratorNode(parentNode)) {\n            throw new Error('Cannot get `VariableDeclarator` node for `ObjectExpression` node');\n        }\n\n        return parentNode;\n    }\n\n    /**\n     * @param {VariableDeclarator} variableDeclaratorNode\n     * @returns {VariableDeclaration}\n     */\n    private getHostVariableDeclarationNode (variableDeclaratorNode: ESTree.VariableDeclarator): ESTree.VariableDeclaration | never {\n        const { parentNode } = variableDeclaratorNode;\n\n        if (!parentNode || !NodeGuards.isVariableDeclarationNode(parentNode)) {\n            throw new Error('Cannot get `VariableDeclaration` node for `VariableDeclarator` node');\n        }\n\n        return parentNode;\n    }\n\n    /**\n     * @param {ObjectExpression} objectExpressionNode\n     * @param {Identifier} memberExpressionHostNode\n     * @returns {boolean}\n     */\n    private isProhibitedObjectExpressionNode (\n        objectExpressionNode: ESTree.ObjectExpression,\n        memberExpressionHostNode: ESTree.Identifier\n    ): boolean {\n        const hostVariableDeclarator: ESTree.VariableDeclarator = this.getHostVariableDeclaratorNode(objectExpressionNode);\n        const hostVariableDeclaration: ESTree.VariableDeclaration = this.getHostVariableDeclarationNode(hostVariableDeclarator);\n        const { declarations } = hostVariableDeclaration;\n        const indexOfDeclarator: number = declarations.indexOf(hostVariableDeclarator);\n        const isLastDeclarator: boolean = indexOfDeclarator === (declarations.length - 1);\n\n        // avoid unnecessary checks\n        if (isLastDeclarator) {\n            return false;\n        }\n\n        const declaratorsAfterCurrentDeclarator: ESTree.VariableDeclarator[] = declarations.slice(indexOfDeclarator);\n\n        let isProhibitedObjectExpressionNode: boolean = false;\n\n        // should mark node as prohibited if that node using inside other variable declarators\n        declaratorsAfterCurrentDeclarator.forEach((variableDeclarator: ESTree.VariableDeclarator) => {\n            estraverse.traverse(variableDeclarator, {\n                enter: (node: ESTree.Node): estraverse.VisitorOption | ESTree.Node => {\n                    if (\n                        NodeGuards.isMemberExpressionNode(node)\n                        && NodeGuards.isIdentifierNode(node.object)\n                        && node.object.name === memberExpressionHostNode.name\n                    ) {\n                        isProhibitedObjectExpressionNode = true;\n\n                        return estraverse.VisitorOption.Break;\n                    }\n\n                    return node;\n                }\n            });\n        });\n\n        return isProhibitedObjectExpressionNode;\n    }\n}\n","import { InversifyContainerFacade } from '../../InversifyContainerFacade';\nimport { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { ICustomNodeGroup } from '../../../interfaces/custom-nodes/ICustomNodeGroup';\n\nimport { ControlFlowCustomNode } from \"../../../enums/custom-nodes/ControlFlowCustomNode\";\nimport { CustomNode } from '../../../enums/custom-nodes/CustomNode';\nimport { CustomNodeGroup } from '../../../enums/custom-nodes/CustomNodeGroup';\nimport { DeadCodeInjectionCustomNode } from '../../../enums/custom-nodes/DeadCodeInjectionCustomNode';\n\nimport { ConsoleOutputCustomNodeGroup } from '../../../custom-nodes/console-output-nodes/group/ConsoleOutputCustomNodeGroup';\nimport { DebugProtectionCustomNodeGroup } from '../../../custom-nodes/debug-protection-nodes/group/DebugProtectionCustomNodeGroup';\nimport { DomainLockCustomNodeGroup } from '../../../custom-nodes/domain-lock-nodes/group/DomainLockCustomNodeGroup';\nimport { SelfDefendingCustomNodeGroup } from '../../../custom-nodes/self-defending-nodes/group/SelfDefendingCustomNodeGroup';\nimport { StringArrayCustomNodeGroup } from '../../../custom-nodes/string-array-nodes/group/StringArrayCustomNodeGroup';\n\nimport { BinaryExpressionFunctionNode } from '../../../custom-nodes/control-flow-flattening-nodes/BinaryExpressionFunctionNode';\nimport { BlockStatementControlFlowFlatteningNode } from '../../../custom-nodes/control-flow-flattening-nodes/BlockStatementControlFlowFlatteningNode';\nimport { BlockStatementDeadCodeInjectionNode } from '../../../custom-nodes/dead-code-injection-nodes/BlockStatementDeadCodeInjectionNode';\nimport { CallExpressionControlFlowStorageCallNode } from '../../../custom-nodes/control-flow-flattening-nodes/control-flow-storage-nodes/CallExpressionControlFlowStorageCallNode';\nimport { CallExpressionFunctionNode } from '../../../custom-nodes/control-flow-flattening-nodes/CallExpressionFunctionNode';\nimport { ControlFlowStorageNode } from '../../../custom-nodes/control-flow-flattening-nodes/control-flow-storage-nodes/ControlFlowStorageNode';\nimport { ConsoleOutputDisableExpressionNode } from '../../../custom-nodes/console-output-nodes/ConsoleOutputDisableExpressionNode';\nimport { DebugProtectionFunctionCallNode } from '../../../custom-nodes/debug-protection-nodes/DebugProtectionFunctionCallNode';\nimport { DebugProtectionFunctionIntervalNode } from '../../../custom-nodes/debug-protection-nodes/DebugProtectionFunctionIntervalNode';\nimport { DebugProtectionFunctionNode } from '../../../custom-nodes/debug-protection-nodes/DebugProtectionFunctionNode';\nimport { DomainLockNode } from '../../../custom-nodes/domain-lock-nodes/DomainLockNode';\nimport { ExpressionWithOperatorControlFlowStorageCallNode } from '../../../custom-nodes/control-flow-flattening-nodes/control-flow-storage-nodes/ExpressionWithOperatorControlFlowStorageCallNode';\nimport { LogicalExpressionFunctionNode } from '../../../custom-nodes/control-flow-flattening-nodes/LogicalExpressionFunctionNode';\nimport { NodeCallsControllerFunctionNode } from '../../../custom-nodes/node-calls-controller-nodes/NodeCallsControllerFunctionNode';\nimport { SelfDefendingUnicodeNode } from '../../../custom-nodes/self-defending-nodes/SelfDefendingUnicodeNode';\nimport { StringArrayCallsWrapper } from '../../../custom-nodes/string-array-nodes/StringArrayCallsWrapper';\nimport { StringArrayNode } from '../../../custom-nodes/string-array-nodes/StringArrayNode';\nimport { StringArrayRotateFunctionNode } from '../../../custom-nodes/string-array-nodes/StringArrayRotateFunctionNode';\nimport { StringLiteralControlFlowStorageCallNode } from '../../../custom-nodes/control-flow-flattening-nodes/control-flow-storage-nodes/StringLiteralControlFlowStorageCallNode';\nimport { StringLiteralNode } from '../../../custom-nodes/control-flow-flattening-nodes/StringLiteralNode';\n\nexport const customNodesModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // custom nodes\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(ConsoleOutputDisableExpressionNode)\n        .whenTargetNamed(CustomNode.ConsoleOutputDisableExpressionNode);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(DebugProtectionFunctionCallNode)\n        .whenTargetNamed(CustomNode.DebugProtectionFunctionCallNode);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(DebugProtectionFunctionIntervalNode)\n        .whenTargetNamed(CustomNode.DebugProtectionFunctionIntervalNode);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(DebugProtectionFunctionNode)\n        .whenTargetNamed(CustomNode.DebugProtectionFunctionNode);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(DomainLockNode)\n        .whenTargetNamed(CustomNode.DomainLockNode);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(NodeCallsControllerFunctionNode)\n        .whenTargetNamed(CustomNode.NodeCallsControllerFunctionNode);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(SelfDefendingUnicodeNode)\n        .whenTargetNamed(CustomNode.SelfDefendingUnicodeNode);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(StringArrayCallsWrapper)\n        .whenTargetNamed(CustomNode.StringArrayCallsWrapper);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(StringArrayNode)\n        .whenTargetNamed(CustomNode.StringArrayNode);\n\n    bind<ICustomNode>(ServiceIdentifiers.ICustomNode)\n        .to(StringArrayRotateFunctionNode)\n        .whenTargetNamed(CustomNode.StringArrayRotateFunctionNode);\n\n    // control flow custom nodes\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(BinaryExpressionFunctionNode)\n        .whenTargetNamed(ControlFlowCustomNode.BinaryExpressionFunctionNode);\n\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(BlockStatementControlFlowFlatteningNode)\n        .whenTargetNamed(ControlFlowCustomNode.BlockStatementControlFlowFlatteningNode);\n\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(CallExpressionControlFlowStorageCallNode)\n        .whenTargetNamed(ControlFlowCustomNode.CallExpressionControlFlowStorageCallNode);\n\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(CallExpressionFunctionNode)\n        .whenTargetNamed(ControlFlowCustomNode.CallExpressionFunctionNode);\n\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(ControlFlowStorageNode)\n        .whenTargetNamed(ControlFlowCustomNode.ControlFlowStorageNode);\n\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(ExpressionWithOperatorControlFlowStorageCallNode)\n        .whenTargetNamed(ControlFlowCustomNode.ExpressionWithOperatorControlFlowStorageCallNode);\n\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(LogicalExpressionFunctionNode)\n        .whenTargetNamed(ControlFlowCustomNode.LogicalExpressionFunctionNode);\n\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(StringLiteralNode)\n        .whenTargetNamed(ControlFlowCustomNode.StringLiteralNode);\n\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(StringLiteralControlFlowStorageCallNode)\n        .whenTargetNamed(ControlFlowCustomNode.StringLiteralControlFlowStorageCallNode);\n\n    // dead code injection custom nodes\n    bind<interfaces.Newable<ICustomNode>>(ServiceIdentifiers.Newable__ICustomNode)\n        .toConstructor(BlockStatementDeadCodeInjectionNode)\n        .whenTargetNamed(DeadCodeInjectionCustomNode.BlockStatementDeadCodeInjectionNode);\n\n    // node groups\n    bind<ICustomNodeGroup>(ServiceIdentifiers.ICustomNodeGroup)\n        .to(ConsoleOutputCustomNodeGroup)\n        .whenTargetNamed(CustomNodeGroup.ConsoleOutputCustomNodeGroup);\n\n    bind<ICustomNodeGroup>(ServiceIdentifiers.ICustomNodeGroup)\n        .to(DebugProtectionCustomNodeGroup)\n        .whenTargetNamed(CustomNodeGroup.DebugProtectionCustomNodeGroup);\n\n    bind<ICustomNodeGroup>(ServiceIdentifiers.ICustomNodeGroup)\n        .to(DomainLockCustomNodeGroup)\n        .whenTargetNamed(CustomNodeGroup.DomainLockCustomNodeGroup);\n\n    bind<ICustomNodeGroup>(ServiceIdentifiers.ICustomNodeGroup)\n        .to(SelfDefendingCustomNodeGroup)\n        .whenTargetNamed(CustomNodeGroup.SelfDefendingCustomNodeGroup);\n\n    bind<ICustomNodeGroup>(ServiceIdentifiers.ICustomNodeGroup)\n        .to(StringArrayCustomNodeGroup)\n        .whenTargetNamed(CustomNodeGroup.StringArrayCustomNodeGroup);\n\n    // customNode factory\n    bind<ICustomNode>(ServiceIdentifiers.Factory__ICustomNode)\n        .toFactory<ICustomNode>(InversifyContainerFacade\n            .getFactory<CustomNode, ICustomNode>(ServiceIdentifiers.ICustomNode));\n\n    // control flow customNode constructor factory\n    bind<ICustomNode>(ServiceIdentifiers.Factory__IControlFlowCustomNode)\n        .toFactory<ICustomNode>(InversifyContainerFacade\n            .getConstructorFactory<ControlFlowCustomNode, ICustomNode>(\n                ServiceIdentifiers.Newable__ICustomNode,\n                ServiceIdentifiers.Factory__IIdentifierNamesGenerator,\n                ServiceIdentifiers.IRandomGenerator,\n                ServiceIdentifiers.IOptions\n            ));\n\n    // dead code injection customNode constructor factory\n    bind<ICustomNode>(ServiceIdentifiers.Factory__IDeadCodeInjectionCustomNode)\n        .toFactory<ICustomNode>(InversifyContainerFacade\n            .getConstructorFactory<DeadCodeInjectionCustomNode, ICustomNode>(\n                ServiceIdentifiers.Newable__ICustomNode,\n                ServiceIdentifiers.Factory__IIdentifierNamesGenerator,\n                ServiceIdentifiers.IRandomGenerator,\n                ServiceIdentifiers.IOptions\n            ));\n\n    // customNodeGroup factory\n    bind<ICustomNodeGroup>(ServiceIdentifiers.Factory__ICustomNodeGroup)\n        .toFactory<ICustomNodeGroup>(InversifyContainerFacade\n            .getFactory<CustomNodeGroup, ICustomNodeGroup>(ServiceIdentifiers.ICustomNodeGroup));\n});\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport { TCustomNodeFactory } from '../../../types/container/custom-nodes/TCustomNodeFactory';\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TNodeWithStatements } from '../../../types/node/TNodeWithStatements';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\nimport { IStackTraceData } from '../../../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { CustomNode } from '../../../enums/custom-nodes/CustomNode';\nimport { ObfuscationEvent } from '../../../enums/event-emitters/ObfuscationEvent';\n\nimport { AbstractCustomNodeGroup } from '../../AbstractCustomNodeGroup';\nimport { NodeAppender } from '../../../node/NodeAppender';\n\n@injectable()\nexport class ConsoleOutputCustomNodeGroup extends AbstractCustomNodeGroup {\n    /**\n     * @type {ObfuscationEvent}\n     */\n    protected readonly appendEvent: ObfuscationEvent = ObfuscationEvent.BeforeObfuscation;\n\n    /**\n     * @type {Map<CustomNode, ICustomNode>}\n     */\n    @initializable()\n    protected customNodes!: Map <CustomNode, ICustomNode>;\n\n    /**\n     * @type {TCustomNodeFactory}\n     */\n    private readonly customNodeFactory: TCustomNodeFactory;\n\n    /**\n     * @param {TCustomNodeFactory} customNodeFactory\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__ICustomNode) customNodeFactory: TCustomNodeFactory,\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.customNodeFactory = customNodeFactory;\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {IStackTraceData[]} stackTraceData\n     */\n    public appendCustomNodes (nodeWithStatements: TNodeWithStatements, stackTraceData: IStackTraceData[]): void {\n        const randomStackTraceIndex: number = this.getRandomStackTraceIndex(stackTraceData.length);\n\n        // consoleOutputDisableExpressionNode append\n        this.appendCustomNodeIfExist(CustomNode.ConsoleOutputDisableExpressionNode, (customNode: ICustomNode) => {\n            NodeAppender.appendToOptimalBlockScope(\n                stackTraceData,\n                nodeWithStatements,\n                customNode.getNode(),\n                randomStackTraceIndex\n            );\n        });\n\n        // nodeCallsControllerFunctionNode append\n        this.appendCustomNodeIfExist(CustomNode.NodeCallsControllerFunctionNode, (customNode: ICustomNode) => {\n            const targetNodeWithStatements: TNodeWithStatements = stackTraceData.length\n                ? NodeAppender.getOptimalBlockScope(stackTraceData, randomStackTraceIndex, 1)\n                : nodeWithStatements;\n\n            NodeAppender.prepend(targetNodeWithStatements, customNode.getNode());\n        });\n    }\n\n    public initialize (): void {\n        this.customNodes = new Map <CustomNode, ICustomNode>();\n\n        if (!this.options.disableConsoleOutput) {\n            return;\n        }\n\n        const callsControllerFunctionName: string = this.identifierNamesGenerator.generate();\n\n        const consoleOutputDisableExpressionNode: ICustomNode = this.customNodeFactory(CustomNode.ConsoleOutputDisableExpressionNode);\n        const nodeCallsControllerFunctionNode: ICustomNode = this.customNodeFactory(CustomNode.NodeCallsControllerFunctionNode);\n\n        consoleOutputDisableExpressionNode.initialize(callsControllerFunctionName);\n        nodeCallsControllerFunctionNode.initialize(this.appendEvent, callsControllerFunctionName);\n\n        this.customNodes.set(CustomNode.ConsoleOutputDisableExpressionNode, consoleOutputDisableExpressionNode);\n        this.customNodes.set(CustomNode.NodeCallsControllerFunctionNode, nodeCallsControllerFunctionNode);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport { TCustomNodeFactory } from '../../../types/container/custom-nodes/TCustomNodeFactory';\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TNodeWithStatements } from '../../../types/node/TNodeWithStatements';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\nimport { IStackTraceData } from '../../../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { CustomNode } from '../../../enums/custom-nodes/CustomNode';\nimport { ObfuscationEvent } from '../../../enums/event-emitters/ObfuscationEvent';\n\nimport { AbstractCustomNodeGroup } from '../../AbstractCustomNodeGroup';\nimport { NodeAppender } from '../../../node/NodeAppender';\nimport { NodeGuards } from '../../../node/NodeGuards';\n\n@injectable()\nexport class DebugProtectionCustomNodeGroup extends AbstractCustomNodeGroup {\n    /**\n     * @type {ObfuscationEvent}\n     */\n    protected readonly appendEvent: ObfuscationEvent = ObfuscationEvent.BeforeObfuscation;\n\n    /**\n     * @type {Map<CustomNode, ICustomNode>}\n     */\n    @initializable()\n    protected customNodes!: Map <CustomNode, ICustomNode>;\n\n    /**\n     * @type {TCustomNodeFactory}\n     */\n    private readonly customNodeFactory: TCustomNodeFactory;\n\n    /**\n     * @param {TCustomNodeFactory} customNodeFactory\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__ICustomNode) customNodeFactory: TCustomNodeFactory,\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.customNodeFactory = customNodeFactory;\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {IStackTraceData[]} stackTraceData\n     */\n    public appendCustomNodes (nodeWithStatements: TNodeWithStatements, stackTraceData: IStackTraceData[]): void {\n        const randomStackTraceIndex: number = this.getRandomStackTraceIndex(stackTraceData.length);\n\n        // debugProtectionFunctionCallNode append\n        this.appendCustomNodeIfExist(CustomNode.DebugProtectionFunctionCallNode, (customNode: ICustomNode) => {\n            NodeAppender.appendToOptimalBlockScope(\n                stackTraceData,\n                nodeWithStatements,\n                customNode.getNode(),\n                randomStackTraceIndex\n            );\n        });\n\n        // debugProtectionFunctionNode append\n        this.appendCustomNodeIfExist(CustomNode.DebugProtectionFunctionNode, (customNode: ICustomNode) => {\n            NodeAppender.append(nodeWithStatements, customNode.getNode());\n        });\n\n        // debugProtectionFunctionIntervalNode append\n        this.appendCustomNodeIfExist(CustomNode.DebugProtectionFunctionIntervalNode, (customNode: ICustomNode) => {\n            const programBodyLength: number = NodeGuards.isSwitchCaseNode(nodeWithStatements)\n                ? nodeWithStatements.consequent.length\n                : nodeWithStatements.body.length;\n            const randomIndex: number = this.randomGenerator.getRandomInteger(0, programBodyLength);\n\n            NodeAppender.insertAtIndex(nodeWithStatements, customNode.getNode(), randomIndex);\n        });\n\n        // nodeCallsControllerFunctionNode append\n        this.appendCustomNodeIfExist(CustomNode.NodeCallsControllerFunctionNode, (customNode: ICustomNode) => {\n            const targetNodeWithStatements: TNodeWithStatements = stackTraceData.length\n                ? NodeAppender.getOptimalBlockScope(stackTraceData, randomStackTraceIndex, 1)\n                : nodeWithStatements;\n\n            NodeAppender.prepend(targetNodeWithStatements, customNode.getNode());\n        });\n    }\n\n    public initialize (): void {\n        this.customNodes = new Map <CustomNode, ICustomNode>();\n\n        if (!this.options.debugProtection) {\n            return;\n        }\n\n        const debugProtectionFunctionName: string = this.identifierNamesGenerator.generate();\n        const callsControllerFunctionName: string = this.identifierNamesGenerator.generate();\n\n        const debugProtectionFunctionNode: ICustomNode = this.customNodeFactory(CustomNode.DebugProtectionFunctionNode);\n        const debugProtectionFunctionCallNode: ICustomNode = this.customNodeFactory(CustomNode.DebugProtectionFunctionCallNode);\n        const debugProtectionFunctionIntervalNode: ICustomNode = this.customNodeFactory(CustomNode.DebugProtectionFunctionIntervalNode);\n        const nodeCallsControllerFunctionNode: ICustomNode = this.customNodeFactory(CustomNode.NodeCallsControllerFunctionNode);\n\n        debugProtectionFunctionNode.initialize(debugProtectionFunctionName);\n        debugProtectionFunctionCallNode.initialize(debugProtectionFunctionName, callsControllerFunctionName);\n        debugProtectionFunctionIntervalNode.initialize(debugProtectionFunctionName);\n        nodeCallsControllerFunctionNode.initialize(this.appendEvent, callsControllerFunctionName);\n\n        this.customNodes.set(CustomNode.DebugProtectionFunctionNode, debugProtectionFunctionNode);\n        this.customNodes.set(CustomNode.DebugProtectionFunctionCallNode, debugProtectionFunctionCallNode);\n\n        if (this.options.debugProtectionInterval) {\n            this.customNodes.set(CustomNode.DebugProtectionFunctionIntervalNode, debugProtectionFunctionIntervalNode);\n        }\n\n        this.customNodes.set(CustomNode.NodeCallsControllerFunctionNode, nodeCallsControllerFunctionNode);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport { TCustomNodeFactory } from '../../../types/container/custom-nodes/TCustomNodeFactory';\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TNodeWithStatements } from '../../../types/node/TNodeWithStatements';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\nimport { IStackTraceData } from '../../../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { CustomNode } from '../../../enums/custom-nodes/CustomNode';\nimport { ObfuscationEvent } from '../../../enums/event-emitters/ObfuscationEvent';\n\nimport { AbstractCustomNodeGroup } from '../../AbstractCustomNodeGroup';\nimport { NodeAppender } from '../../../node/NodeAppender';\n\n@injectable()\nexport class DomainLockCustomNodeGroup extends AbstractCustomNodeGroup {\n    /**\n     * @type {ObfuscationEvent}\n     */\n    protected readonly appendEvent: ObfuscationEvent = ObfuscationEvent.BeforeObfuscation;\n\n    /**\n     * @type {Map<CustomNode, ICustomNode>}\n     */\n    @initializable()\n    protected customNodes!: Map <CustomNode, ICustomNode>;\n\n    /**\n     * @type {TCustomNodeFactory}\n     */\n    private readonly customNodeFactory: TCustomNodeFactory;\n\n    /**\n     * @param {TCustomNodeFactory} customNodeFactory\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__ICustomNode) customNodeFactory: TCustomNodeFactory,\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.customNodeFactory = customNodeFactory;\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {IStackTraceData[]} stackTraceData\n     */\n    public appendCustomNodes (nodeWithStatements: TNodeWithStatements, stackTraceData: IStackTraceData[]): void {\n        const randomStackTraceIndex: number = this.getRandomStackTraceIndex(stackTraceData.length);\n\n        // domainLockNode append\n        this.appendCustomNodeIfExist(CustomNode.DomainLockNode, (customNode: ICustomNode) => {\n            NodeAppender.appendToOptimalBlockScope(\n                stackTraceData,\n                nodeWithStatements,\n                customNode.getNode(),\n                randomStackTraceIndex\n            );\n        });\n\n        // nodeCallsControllerFunctionNode append\n        this.appendCustomNodeIfExist(CustomNode.NodeCallsControllerFunctionNode, (customNode: ICustomNode) => {\n            const targetNodeWithStatements: TNodeWithStatements = stackTraceData.length\n                ? NodeAppender.getOptimalBlockScope(stackTraceData, randomStackTraceIndex, 1)\n                : nodeWithStatements;\n\n            NodeAppender.prepend(targetNodeWithStatements, customNode.getNode());\n        });\n    }\n\n    public initialize (): void {\n        this.customNodes = new Map <CustomNode, ICustomNode>();\n\n        if (!this.options.domainLock.length) {\n            return;\n        }\n\n        const callsControllerFunctionName: string = this.identifierNamesGenerator.generate();\n\n        const domainLockNode: ICustomNode = this.customNodeFactory(CustomNode.DomainLockNode);\n        const nodeCallsControllerFunctionNode: ICustomNode = this.customNodeFactory(CustomNode.NodeCallsControllerFunctionNode);\n\n        domainLockNode.initialize(callsControllerFunctionName);\n        nodeCallsControllerFunctionNode.initialize(this.appendEvent, callsControllerFunctionName);\n\n        this.customNodes.set(CustomNode.DomainLockNode, domainLockNode);\n        this.customNodes.set(CustomNode.NodeCallsControllerFunctionNode, nodeCallsControllerFunctionNode);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport { TCustomNodeFactory } from '../../../types/container/custom-nodes/TCustomNodeFactory';\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TNodeWithStatements } from '../../../types/node/TNodeWithStatements';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\nimport { IStackTraceData } from '../../../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { CustomNode } from '../../../enums/custom-nodes/CustomNode';\nimport { ObfuscationEvent } from '../../../enums/event-emitters/ObfuscationEvent';\n\nimport { AbstractCustomNodeGroup } from '../../AbstractCustomNodeGroup';\nimport { NodeAppender } from '../../../node/NodeAppender';\n\n@injectable()\nexport class SelfDefendingCustomNodeGroup extends AbstractCustomNodeGroup {\n    /**\n     * @type {ObfuscationEvent}\n     */\n    protected appendEvent: ObfuscationEvent = ObfuscationEvent.AfterObfuscation;\n\n    /**\n     * @type {Map<CustomNode, ICustomNode>}\n     */\n    @initializable()\n    protected customNodes!: Map <CustomNode, ICustomNode>;\n\n    /**\n     * @type {TCustomNodeFactory}\n     */\n    private readonly customNodeFactory: TCustomNodeFactory;\n\n    /**\n     * @param {TCustomNodeFactory} customNodeFactory\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__ICustomNode) customNodeFactory: TCustomNodeFactory,\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.customNodeFactory = customNodeFactory;\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {IStackTraceData[]} stackTraceData\n     */\n    public appendCustomNodes (nodeWithStatements: TNodeWithStatements, stackTraceData: IStackTraceData[]): void {\n        const randomStackTraceIndex: number = this.getRandomStackTraceIndex(stackTraceData.length);\n\n        // selfDefendingUnicodeNode append\n        this.appendCustomNodeIfExist(CustomNode.SelfDefendingUnicodeNode, (customNode: ICustomNode) => {\n            NodeAppender.appendToOptimalBlockScope(\n                stackTraceData,\n                nodeWithStatements,\n                customNode.getNode(),\n                randomStackTraceIndex\n            );\n        });\n\n        // nodeCallsControllerFunctionNode append\n        this.appendCustomNodeIfExist(CustomNode.NodeCallsControllerFunctionNode, (customNode: ICustomNode) => {\n            const targetNodeWithStatements: TNodeWithStatements = stackTraceData.length\n                ? NodeAppender.getOptimalBlockScope(stackTraceData, randomStackTraceIndex, 1)\n                : nodeWithStatements;\n\n            NodeAppender.prepend(targetNodeWithStatements, customNode.getNode());\n        });\n    }\n\n    public initialize (): void {\n        this.customNodes = new Map <CustomNode, ICustomNode>();\n\n        if (!this.options.selfDefending) {\n            return;\n        }\n\n        const callsControllerFunctionName: string = this.identifierNamesGenerator.generate();\n\n        const selfDefendingUnicodeNode: ICustomNode = this.customNodeFactory(CustomNode.SelfDefendingUnicodeNode);\n        const nodeCallsControllerFunctionNode: ICustomNode = this.customNodeFactory(CustomNode.NodeCallsControllerFunctionNode);\n\n        selfDefendingUnicodeNode.initialize(callsControllerFunctionName);\n        nodeCallsControllerFunctionNode.initialize(this.appendEvent, callsControllerFunctionName);\n\n        this.customNodes.set(CustomNode.SelfDefendingUnicodeNode, selfDefendingUnicodeNode);\n        this.customNodes.set(CustomNode.NodeCallsControllerFunctionNode, nodeCallsControllerFunctionNode);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport { TCustomNodeFactory } from '../../../types/container/custom-nodes/TCustomNodeFactory';\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TNodeWithStatements } from '../../../types/node/TNodeWithStatements';\nimport { TStringArrayStorage } from '../../../types/storages/TStringArrayStorage';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\nimport { IStackTraceData } from '../../../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { CustomNode } from '../../../enums/custom-nodes/CustomNode';\nimport { ObfuscationEvent } from '../../../enums/event-emitters/ObfuscationEvent';\n\nimport { AbstractCustomNodeGroup } from '../../AbstractCustomNodeGroup';\nimport { NodeAppender } from '../../../node/NodeAppender';\n\n@injectable()\nexport class StringArrayCustomNodeGroup extends AbstractCustomNodeGroup {\n    /**\n     * @type {ObfuscationEvent}\n     */\n    protected appendEvent: ObfuscationEvent = ObfuscationEvent.AfterObfuscation;\n\n    /**\n     * @type {Map<CustomNode, ICustomNode>}\n     */\n    @initializable()\n    protected customNodes!: Map <CustomNode, ICustomNode>;\n\n    /**\n     * @type {TCustomNodeFactory}\n     */\n    private readonly customNodeFactory: TCustomNodeFactory;\n\n    /**\n     * @type {TStringArrayStorage}\n     */\n    private readonly stringArrayStorage: TStringArrayStorage;\n\n    /**\n     * @param {TCustomNodeFactory} customNodeFactory\n     * @param {TStringArrayStorage} stringArrayStorage\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__ICustomNode) customNodeFactory: TCustomNodeFactory,\n        @inject(ServiceIdentifiers.TStringArrayStorage) stringArrayStorage: TStringArrayStorage,\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.customNodeFactory = customNodeFactory;\n        this.stringArrayStorage = stringArrayStorage;\n    }\n\n    /**\n     * @param {TNodeWithStatements} nodeWithStatements\n     * @param {IStackTraceData[]} stackTraceData\n     */\n    public appendCustomNodes (nodeWithStatements: TNodeWithStatements, stackTraceData: IStackTraceData[]): void {\n        if (!this.stringArrayStorage.getLength()) {\n            return;\n        }\n\n        // stringArrayNode append\n        this.appendCustomNodeIfExist(CustomNode.StringArrayNode, (customNode: ICustomNode) => {\n            NodeAppender.prepend(nodeWithStatements, customNode.getNode());\n        });\n\n        // stringArrayCallsWrapper append\n        this.appendCustomNodeIfExist(CustomNode.StringArrayCallsWrapper, (customNode: ICustomNode) => {\n            NodeAppender.insertAtIndex(nodeWithStatements, customNode.getNode(), 1);\n        });\n\n        // stringArrayRotateFunctionNode append\n        this.appendCustomNodeIfExist(CustomNode.StringArrayRotateFunctionNode, (customNode: ICustomNode) => {\n            NodeAppender.insertAtIndex(nodeWithStatements, customNode.getNode(), 1);\n        });\n    }\n\n    public initialize (): void {\n        this.customNodes = new Map <CustomNode, ICustomNode>();\n\n        if (!this.options.stringArray) {\n            return;\n        }\n\n        const stringArrayNode: ICustomNode = this.customNodeFactory(CustomNode.StringArrayNode);\n        const stringArrayCallsWrapper: ICustomNode = this.customNodeFactory(CustomNode.StringArrayCallsWrapper);\n        const stringArrayRotateFunctionNode: ICustomNode = this.customNodeFactory(CustomNode.StringArrayRotateFunctionNode);\n\n        const stringArrayStorageId: string = this.stringArrayStorage.getStorageId();\n\n        const [stringArrayName, stringArrayCallsWrapperName]: string[] = stringArrayStorageId.split('|');\n\n        let stringArrayRotateValue: number;\n\n        if (this.options.rotateStringArray) {\n            stringArrayRotateValue = this.randomGenerator.getRandomInteger(100, 500);\n        } else {\n            stringArrayRotateValue = 0;\n        }\n\n        stringArrayNode.initialize(this.stringArrayStorage, stringArrayName, stringArrayRotateValue);\n        stringArrayCallsWrapper.initialize(stringArrayName, stringArrayCallsWrapperName);\n        stringArrayRotateFunctionNode.initialize(stringArrayName, stringArrayRotateValue);\n\n        this.customNodes.set(CustomNode.StringArrayNode, stringArrayNode);\n        this.customNodes.set(CustomNode.StringArrayCallsWrapper, stringArrayCallsWrapper);\n\n        if (this.options.rotateStringArray) {\n            this.customNodes.set(CustomNode.StringArrayRotateFunctionNode, stringArrayRotateFunctionNode);\n        }\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { BinaryOperator } from 'estree';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class BinaryExpressionFunctionNode extends AbstractCustomNode {\n    /**\n     * @type {BinaryOperator}\n     */\n    @initializable()\n    private operator!: BinaryOperator;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {BinaryOperator} operator\n     */\n    public initialize (operator: BinaryOperator): void {\n        this.operator = operator;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        const structure: TStatement = NodeFactory.expressionStatementNode(\n            NodeFactory.functionExpressionNode(\n                [\n                    NodeFactory.identifierNode('x'),\n                    NodeFactory.identifierNode('y')\n                ],\n                NodeFactory.blockStatementNode([\n                    NodeFactory.returnStatementNode(\n                        NodeFactory.binaryExpressionNode(\n                            this.operator,\n                            NodeFactory.identifierNode('x'),\n                            NodeFactory.identifierNode('y')\n                        )\n                    )\n                ])\n            )\n        );\n\n        NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","/**\n * @returns {string}\n */\nexport function GlobalVariableTemplate1 (): string {\n    return `\n        var that;\n        \n        try {\n            var getGlobal = Function('return (function() ' + '{}.constructor(\"return this\")( )' + ');');\n            \n            that = getGlobal();\n        } catch (e) {\n            that = window;\n        }\n    `;\n}\n","/**\n * @returns {string}\n */\nexport function GlobalVariableTemplate2 (): string {\n    return `\n        var getGlobal = function () {\n            var globalObject;\n        \n            try {\n                globalObject = Function('return (function() ' + '{}.constructor(\"return this\")( )' + ');')();\n            } catch (e) {\n                globalObject = window;\n            }\n            \n            return globalObject;\n        };\n        var that = getGlobal();\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class BlockStatementControlFlowFlatteningNode extends AbstractCustomNode {\n    /**\n     * @type {ESTree.Statement[]}\n     */\n    @initializable()\n    private blockStatementBody!: ESTree.Statement[];\n\n    /**\n     * @type {number[]}\n     */\n    @initializable()\n    private originalKeysIndexesInShuffledArray!: number[];\n\n    /**\n     * @type {number[]}\n     */\n    @initializable()\n    private shuffledKeys!: number[];\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {Statement[]} blockStatementBody\n     * @param {number[]} shuffledKeys\n     * @param {number[]} originalKeysIndexesInShuffledArray\n     */\n    public initialize (\n        blockStatementBody: ESTree.Statement[],\n        shuffledKeys: number[],\n        originalKeysIndexesInShuffledArray: number[]\n    ): void {\n        this.blockStatementBody = blockStatementBody;\n        this.shuffledKeys = shuffledKeys;\n        this.originalKeysIndexesInShuffledArray = originalKeysIndexesInShuffledArray;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        const controllerIdentifierName: string = this.randomGenerator.getRandomString(6);\n        const indexIdentifierName: string = this.randomGenerator.getRandomString(6);\n        const structure: ESTree.BlockStatement = NodeFactory.blockStatementNode([\n            NodeFactory.variableDeclarationNode([\n                NodeFactory.variableDeclaratorNode(\n                    NodeFactory.identifierNode(controllerIdentifierName),\n                    NodeFactory.callExpressionNode(\n                        NodeFactory.memberExpressionNode(\n                            NodeFactory.literalNode(\n                                this.originalKeysIndexesInShuffledArray.join('|')\n                            ),\n                            NodeFactory.identifierNode('split')\n                        ),\n                        [\n                            NodeFactory.literalNode('|')\n                        ]\n                    )\n                ),\n                NodeFactory.variableDeclaratorNode(\n                    NodeFactory.identifierNode(indexIdentifierName),\n                    NodeFactory.literalNode(0)\n                )\n            ]),\n            NodeFactory.whileStatementNode(\n                NodeFactory.literalNode(true),\n                NodeFactory.blockStatementNode([\n                    NodeFactory.switchStatementNode(\n                        NodeFactory.memberExpressionNode(\n                            NodeFactory.identifierNode(controllerIdentifierName),\n                            NodeFactory.updateExpressionNode(\n                                '++',\n                                NodeFactory.identifierNode(indexIdentifierName)\n                            ),\n                            true\n                        ),\n                        this.shuffledKeys.map((key: number, index: number) => {\n                            const statement: ESTree.Statement = this.blockStatementBody[key];\n                            const consequent: ESTree.Statement[] = [statement];\n\n                            /**\n                             * We shouldn't add continue statement after return statement\n                             * to prevent `unreachable code after return statement` warnings\n                             */\n                            if (!NodeGuards.isReturnStatementNode(statement)) {\n                                consequent.push(NodeFactory.continueStatement());\n                            }\n\n                            return NodeFactory.switchCaseNode(\n                                NodeFactory.literalNode(String(index)),\n                                consequent\n                            );\n                        })\n                    ),\n                    NodeFactory.breakStatement()\n                ])\n            )\n        ]);\n\n        NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { BinaryOperator, BlockStatement } from 'estree';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class BlockStatementDeadCodeInjectionNode extends AbstractCustomNode {\n    /**\n     * @type {BlockStatement}\n     */\n    @initializable()\n    private blockStatementNode!: BlockStatement;\n\n    /**\n     * @type {BlockStatement}\n     */\n    @initializable()\n    private deadCodeInjectionRootAstHostNode!: BlockStatement;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {BlockStatement} blockStatementNode\n     * @param {BlockStatement} deadCodeInjectionRootAstHostNode\n     */\n    public initialize (\n        blockStatementNode: BlockStatement,\n        deadCodeInjectionRootAstHostNode: BlockStatement\n    ): void {\n        this.blockStatementNode = blockStatementNode;\n        this.deadCodeInjectionRootAstHostNode = deadCodeInjectionRootAstHostNode;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        const random1: boolean = this.randomGenerator.getMathRandom() > 0.5;\n        const random2: boolean = this.randomGenerator.getMathRandom() > 0.5;\n\n        const operator: BinaryOperator = random1 ? '===' : '!==';\n        const leftString: string = this.randomGenerator.getRandomString(5);\n        const rightString: string = random2 ? leftString : this.randomGenerator.getRandomString(5);\n\n        const [consequent, alternate]: [BlockStatement, BlockStatement] = random1 === random2\n            ? [this.blockStatementNode, this.deadCodeInjectionRootAstHostNode]\n            : [this.deadCodeInjectionRootAstHostNode, this.blockStatementNode];\n\n        const structure: BlockStatement = NodeFactory.blockStatementNode([\n            NodeFactory.ifStatementNode(\n                NodeFactory.binaryExpressionNode(\n                    operator,\n                    NodeFactory.literalNode(leftString),\n                    NodeFactory.literalNode(rightString)\n                ),\n                consequent,\n                alternate\n            )\n        ]);\n\n        NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\n// tslint:disable\nimport { Expression } from 'estree';\n// tslint:enable\n\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../../types/node/TStatement';\n\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from \"../../../interfaces/utils/IRandomGenerator\";\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../../AbstractCustomNode';\nimport { NodeFactory } from '../../../node/NodeFactory';\nimport { NodeUtils } from '../../../node/NodeUtils';\n\n@injectable()\nexport class CallExpressionControlFlowStorageCallNode extends AbstractCustomNode {\n    /**\n     * @type {Expression}\n     */\n    @initializable()\n    private callee!: Expression;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private controlFlowStorageKey!: string;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private controlFlowStorageName!: string;\n\n    /**\n     * @type {(ESTree.Expression | ESTree.SpreadElement)[]}\n     */\n    @initializable()\n    private expressionArguments!: (ESTree.Expression | ESTree.SpreadElement)[];\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} controlFlowStorageName\n     * @param {string} controlFlowStorageKey\n     * @param {Expression} callee\n     * @param {(Expression | SpreadElement)[]} expressionArguments\n     */\n    public initialize (\n        controlFlowStorageName: string,\n        controlFlowStorageKey: string,\n        callee: ESTree.Expression,\n        expressionArguments: (ESTree.Expression | ESTree.SpreadElement)[]\n    ): void {\n        this.controlFlowStorageName = controlFlowStorageName;\n        this.controlFlowStorageKey = controlFlowStorageKey;\n        this.callee = callee;\n        this.expressionArguments = expressionArguments;\n    }\n\n    protected getNodeStructure (): TStatement[] {\n        const structure: TStatement = NodeFactory.expressionStatementNode(\n            NodeFactory.callExpressionNode(\n                NodeFactory.memberExpressionNode(\n                    NodeFactory.identifierNode(this.controlFlowStorageName),\n                    NodeFactory.identifierNode(this.controlFlowStorageKey)\n                ),\n                [\n                    this.callee,\n                    ...this.expressionArguments\n                ]\n            )\n        );\n\n        NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class CallExpressionFunctionNode extends AbstractCustomNode {\n    /**\n     * @type {(ESTree.Expression | ESTree.SpreadElement)[]}\n     */\n    @initializable()\n    private expressionArguments!: (ESTree.Expression | ESTree.SpreadElement)[];\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {(Expression | SpreadElement)[]} expressionArguments\n     */\n    public initialize (expressionArguments: (ESTree.Expression | ESTree.SpreadElement)[]): void {\n        this.expressionArguments = expressionArguments;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        const calleeIdentifier: ESTree.Identifier = NodeFactory.identifierNode('callee');\n        const params: ESTree.Identifier[] = [];\n        const argumentsLength: number = this.expressionArguments.length;\n\n        for (let i: number = 0; i < argumentsLength; i++) {\n            params.push(NodeFactory.identifierNode(`param${i + 1}`));\n        }\n\n        const structure: TStatement = NodeFactory.expressionStatementNode(\n            NodeFactory.functionExpressionNode(\n                [\n                    calleeIdentifier,\n                    ...params\n                ],\n                NodeFactory.blockStatementNode([\n                    NodeFactory.returnStatementNode(\n                        NodeFactory.callExpressionNode(\n                            calleeIdentifier,\n                            params\n                        )\n                    )\n                ])\n            )\n        );\n\n        NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TControlFlowStorage } from '../../../types/storages/TControlFlowStorage';\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../../types/node/TStatement';\n\nimport { ICustomNode } from '../../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../../AbstractCustomNode';\nimport { NodeFactory } from '../../../node/NodeFactory';\nimport { NodeGuards } from '../../../node/NodeGuards';\nimport { NodeUtils } from '../../../node/NodeUtils';\n\n@injectable()\nexport class ControlFlowStorageNode extends AbstractCustomNode {\n    /**\n     * @type {TControlFlowStorage}\n     */\n    @initializable()\n    private controlFlowStorage!: TControlFlowStorage;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {TControlFlowStorage} controlFlowStorage\n     */\n    public initialize (controlFlowStorage: TControlFlowStorage): void {\n        this.controlFlowStorage = controlFlowStorage;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        const propertyNodes: ESTree.Property[] = Array\n            .from<[string, ICustomNode]>(this.controlFlowStorage.getStorage())\n            .map(([key, value]: [string, ICustomNode]) => {\n                const node: ESTree.Node = value.getNode()[0];\n\n                if (!NodeGuards.isExpressionStatementNode(node)) {\n                    throw new Error('Function node for control flow storage object should be passed inside the `ExpressionStatement` node!');\n                }\n\n                return NodeFactory.propertyNode(\n                    NodeFactory.identifierNode(key),\n                    node.expression\n                );\n            });\n\n        let structure: ESTree.Node = NodeFactory.variableDeclarationNode([\n            NodeFactory.variableDeclaratorNode(\n                NodeFactory.identifierNode(this.controlFlowStorage.getStorageId()),\n                NodeFactory.objectExpressionNode(propertyNodes)\n            )\n        ]);\n\n        structure = NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { ObfuscationTarget } from '../../enums/ObfuscationTarget';\n\nimport { ConsoleOutputDisableExpressionTemplate } from '../../templates/console-output-nodes/console-output-disable-expression-node/ConsoleOutputDisableExpressionTemplate';\nimport { GlobalVariableNoEvalTemplate } from '../../templates/GlobalVariableNoEvalTemplate';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class ConsoleOutputDisableExpressionNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private callsControllerFunctionName!: string;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} callsControllerFunctionName\n     */\n    public initialize (callsControllerFunctionName: string): void {\n        this.callsControllerFunctionName = callsControllerFunctionName;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        const globalVariableTemplate: string = this.options.target !== ObfuscationTarget.BrowserNoEval\n            ? this.getGlobalVariableTemplate()\n            : GlobalVariableNoEvalTemplate();\n\n        return format(ConsoleOutputDisableExpressionTemplate(), {\n            consoleLogDisableFunctionName: this.identifierNamesGenerator.generate(),\n            globalVariableTemplate,\n            singleNodeCallControllerFunctionName: this.callsControllerFunctionName\n        });\n    }\n}\n","/**\n * @returns {string}\n */\nexport function ConsoleOutputDisableExpressionTemplate (): string {\n    return `\n        var {consoleLogDisableFunctionName} = {singleNodeCallControllerFunctionName}(this, function () {\n            var func = function () {};\n            \n            {globalVariableTemplate}\n                        \n            if (!that.console) {\n                that.console = (function (func){\n                    var c = {};\n                    \n                    c.log = func;\n                    c.warn = func;\n                    c.debug = func;\n                    c.info = func;\n                    c.error = func;\n                    c.exception = func;\n                    c.trace = func;\n                    \n                    return c;\n                })(func);\n            } else {\n                that.console.log = func;\n                that.console.warn = func;\n                that.console.debug = func;\n                that.console.info = func;\n                that.console.error = func;\n                that.console.exception = func;\n                that.console.trace = func;\n            }\n        });\n        \n        {consoleLogDisableFunctionName}();\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { DebugProtectionFunctionCallTemplate } from '../../templates/debug-protection-nodes/debug-protection-function-call-node/DebugProtectionFunctionCallTemplate';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class DebugProtectionFunctionCallNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private callsControllerFunctionName!: string;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private debugProtectionFunctionName!: string;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} debugProtectionFunctionName\n     * @param {string} callsControllerFunctionName\n     */\n    public initialize (debugProtectionFunctionName: string, callsControllerFunctionName: string): void {\n        this.debugProtectionFunctionName = debugProtectionFunctionName;\n        this.callsControllerFunctionName = callsControllerFunctionName;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        return format(DebugProtectionFunctionCallTemplate(), {\n            debugProtectionFunctionName: this.debugProtectionFunctionName,\n            singleNodeCallControllerFunctionName: this.callsControllerFunctionName\n        });\n    }\n}\n","/**\n * @returns {string}\n */\nexport function DebugProtectionFunctionCallTemplate (): string {\n    return `\n        (function () {\n            {singleNodeCallControllerFunctionName}(this, function () {\n                var regExp1 = new RegExp('function *\\\\\\\\( *\\\\\\\\)');\n                var regExp2 = new RegExp('\\\\\\\\+\\\\\\\\+ *\\\\(?:_0x(?:[a-f0-9]){4,6}|(?:\\\\\\\\b|\\\\\\\\d)[a-z0-9]{1,4}(?:\\\\\\\\b|\\\\\\\\d)\\\\)', 'i');\n       \n                var result = {debugProtectionFunctionName}('init');\n                \n                if (!regExp1.test(result + 'chain') || !regExp2.test(result + 'input')) {\n                    result('0');\n                } else {\n                    {debugProtectionFunctionName}();\n                }\n            })();\n        })();\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { DebugProtectionFunctionIntervalTemplate } from '../../templates/debug-protection-nodes/debug-protection-function-interval-node/DebugProtectionFunctionIntervalTemplate';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class DebugProtectionFunctionIntervalNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private debugProtectionFunctionName!: string;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} debugProtectionFunctionName\n     */\n    public initialize (debugProtectionFunctionName: string): void {\n        this.debugProtectionFunctionName = debugProtectionFunctionName;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        return format(DebugProtectionFunctionIntervalTemplate(), {\n            debugProtectionFunctionName: this.debugProtectionFunctionName\n        });\n    }\n}\n","/**\n * @returns {string}\n */\nexport function DebugProtectionFunctionIntervalTemplate (): string {\n    return `\n        setInterval(function () {\n            {debugProtectionFunctionName}();\n        }, 4000);\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { ObfuscationTarget } from '../../enums/ObfuscationTarget';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { DebuggerTemplate } from '../../templates/debug-protection-nodes/debug-protection-function-node/DebuggerTemplate';\nimport { DebuggerTemplateNoEval } from '../../templates/debug-protection-nodes/debug-protection-function-node/DebuggerTemplateNoEval';\nimport { DebugProtectionFunctionTemplate } from '../../templates/debug-protection-nodes/debug-protection-function-node/DebugProtectionFunctionTemplate';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class DebugProtectionFunctionNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private debugProtectionFunctionName!: string;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} debugProtectionFunctionName\n     */\n    public initialize (debugProtectionFunctionName: string): void {\n        this.debugProtectionFunctionName = debugProtectionFunctionName;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        const debuggerTemplate: string = this.options.target !== ObfuscationTarget.BrowserNoEval\n            ? DebuggerTemplate()\n            : DebuggerTemplateNoEval();\n\n        return format(DebugProtectionFunctionTemplate(), {\n            debuggerTemplate,\n            debugProtectionFunctionName: this.debugProtectionFunctionName\n        });\n    }\n}\n","/**\n * @returns {string}\n */\nexport function DebuggerTemplate (): string {\n    return `\n        if (typeof counter === 'string') {\n            return (function (arg) {}.constructor('while (true) {}').apply('counter'));\n        } else {\n            if (('' + counter / counter)['length'] !== 1 || counter % 20 === 0) {\n                (function () {return true;}.constructor('debu' + 'gger').call('action'));\n            } else {\n                (function () {return false;}.constructor('debu' + 'gger').apply('stateObject'));\n            }\n            \n        }\n    `;\n}\n","/**\n * @returns {string}\n */\nexport function DebuggerTemplateNoEval (): string {\n    return `\n        if (typeof counter === 'string') {\n            var func = function () {\n                while (true) {}\n            };\n            \n            return func();\n        } else {\n            if (('' + counter / counter)['length'] !== 1 || counter % 20 === 0) {\n                debugger;\n            } else {\n                debugger;\n            }\n            \n        }\n    `;\n}\n","/**\n * @returns {string}\n */\nexport function DebugProtectionFunctionTemplate (): string {\n    return `\n        function {debugProtectionFunctionName} (ret) {\n            function debuggerProtection (counter) {\n            \n                {debuggerTemplate}\n                \n                debuggerProtection(++counter);\n            }\n            \n            try {\n                if (ret) {\n                    return debuggerProtection;\n                } else {\n                    debuggerProtection(0);\n                }\n            } catch (y) {}\n        }\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { ICryptUtils } from '../../interfaces/utils/ICryptUtils';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { ObfuscationTarget } from '../../enums/ObfuscationTarget';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { DomainLockNodeTemplate } from '../../templates/domain-lock-nodes/domain-lock-node/DomainLockNodeTemplate';\nimport { GlobalVariableNoEvalTemplate } from '../../templates/GlobalVariableNoEvalTemplate';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class DomainLockNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    protected callsControllerFunctionName!: string;\n\n    /**\n     * @type {ICryptUtils}\n     */\n    private readonly cryptUtils: ICryptUtils;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {ICryptUtils} cryptUtils\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.ICryptUtils) cryptUtils: ICryptUtils,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.cryptUtils = cryptUtils;\n    }\n\n    /**\n     * @param {string} callsControllerFunctionName\n     */\n    public initialize (callsControllerFunctionName: string): void {\n        this.callsControllerFunctionName = callsControllerFunctionName;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        const domainsString: string = this.options.domainLock.join(';');\n        const [hiddenDomainsString, diff]: string[] = this.cryptUtils.hideString(\n            domainsString,\n            domainsString.length * 3\n        );\n        const globalVariableTemplate: string = this.options.target !== ObfuscationTarget.BrowserNoEval\n            ? this.getGlobalVariableTemplate()\n            : GlobalVariableNoEvalTemplate();\n\n        return format(DomainLockNodeTemplate(), {\n            domainLockFunctionName: this.identifierNamesGenerator.generate(),\n            diff: diff,\n            domains: hiddenDomainsString,\n            globalVariableTemplate,\n            singleNodeCallControllerFunctionName: this.callsControllerFunctionName\n        });\n    }\n}\n","/**\n * @returns {string}\n */\nexport function DomainLockNodeTemplate (): string {\n    return `\n        var {domainLockFunctionName} = {singleNodeCallControllerFunctionName}(this, function () {\n            \n            {globalVariableTemplate}\n            \n            var func = function () {\n                return {\n                    key: 'item',\n                    value: 'attribute',\n                    getAttribute: function () {\n                        for (var i = 0; i < 1000; i--) {\n                            var isPositive = i > 0;\n                            \n                            switch (isPositive) {\n                                case true:\n                                    return this.item + '_' + this.value + '_' + i;\n                                default:\n                                    this.item + '_' + this.value;\n                            }\n                        }\n                    }()\n                };\n            };\n                        \n            var regExp = new RegExp(\"[{diff}]\", \"g\");\n            var domains = \"{domains}\".replace(regExp, \"\").split(\";\");\n            var document;\n            var domain;\n            var location;\n            var hostname;\n\n            for (var d in that) {\n                if (d.length == 8 && d.charCodeAt(7) == 116 && d.charCodeAt(5) == 101 && d.charCodeAt(3) == 117 && d.charCodeAt(0) == 100) {\n                    document = d;\n                \n                    break;\n                }\n            }\n\n            for (var d1 in that[document]) {\n                if (d1.length == 6 && d1.charCodeAt(5) == 110 && d1.charCodeAt(0) == 100) {\n                    domain = d1;\n                    \n                    break;\n                }\n            }\n\n            if (!(\"~\" > domain)) {\n                for (var d2 in that[document]) {\n                    if (d2.length == 8 && d2.charCodeAt(7) == 110 && d2.charCodeAt(0) == 108) {\n                        location = d2;\n                        \n                        break;\n                    }\n                }\n\n                for (var d3 in that[document][location]) {\n                    if (d3.length == 8 && d3.charCodeAt(7) == 101 && d3.charCodeAt(0) == 104) {\n                        hostname = d3;\n                        \n                        break;\n                    }\n                }\n            }\n            \n            if (!document || !that[document]) {\n                return;\n            }\n            \n            var documentDomain = that[document][domain];\n            var documentLocationHostName = !!that[document][location] && that[document][location][hostname];\n            var currentDomain = documentDomain || documentLocationHostName;\n          \n            if (!currentDomain) {\n                return;\n            }\n          \n            var ok = false;\n                        \n            for (var i = 0; i < domains.length; i++) {\n                var domain = domains[i];\n                var position = currentDomain.length - domain.length;\n                var lastIndex = currentDomain.indexOf(domain, position);\n                var endsWith = lastIndex !== -1 && lastIndex === position;\n                \n                if (endsWith) {\n                    if (currentDomain.length == domain.length || domain.indexOf(\".\") === 0) {\n                        ok = true;\n                    }\n                }\n            }\n               \n            if (!ok) {\n                data;\n            } else {\n                return;\n            }\n            \n            func();\n        });\n\n        {domainLockFunctionName}();\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport { Expression } from 'estree';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../../types/node/TStatement';\n\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../../AbstractCustomNode';\nimport { NodeFactory } from '../../../node/NodeFactory';\nimport { NodeUtils } from '../../../node/NodeUtils';\n\n@injectable()\nexport class ExpressionWithOperatorControlFlowStorageCallNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private controlFlowStorageKey!: string;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private controlFlowStorageName!: string;\n\n    /**\n     * @type {Expression}\n     */\n    @initializable()\n    private leftValue!: Expression;\n\n    /**\n     * @type {ESTree.Expression}\n     */\n    @initializable()\n    private rightValue!: Expression;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} controlFlowStorageName\n     * @param {string} controlFlowStorageKey\n     * @param {Expression} leftValue\n     * @param {Expression} rightValue\n     */\n    public initialize (\n        controlFlowStorageName: string,\n        controlFlowStorageKey: string,\n        leftValue: Expression,\n        rightValue: Expression,\n    ): void {\n        this.controlFlowStorageName = controlFlowStorageName;\n        this.controlFlowStorageKey = controlFlowStorageKey;\n        this.leftValue = leftValue;\n        this.rightValue = rightValue;\n    }\n\n    protected getNodeStructure (): TStatement[] {\n        const structure: TStatement = NodeFactory.expressionStatementNode(\n            NodeFactory.callExpressionNode(\n                NodeFactory.memberExpressionNode(\n                    NodeFactory.identifierNode(this.controlFlowStorageName),\n                    NodeFactory.identifierNode(this.controlFlowStorageKey)\n                ),\n                [\n                    this.leftValue,\n                    this.rightValue\n                ]\n            )\n        );\n\n        NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { LogicalOperator } from 'estree';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class LogicalExpressionFunctionNode extends AbstractCustomNode {\n    /**\n     * @type {LogicalOperator}\n     */\n    @initializable()\n    private operator!: LogicalOperator;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {LogicalOperator} operator\n     */\n    public initialize (operator: LogicalOperator): void {\n        this.operator = operator;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        const structure: TStatement = NodeFactory.expressionStatementNode(\n            NodeFactory.functionExpressionNode(\n                [\n                    NodeFactory.identifierNode('x'),\n                    NodeFactory.identifierNode('y')\n                ],\n                NodeFactory.blockStatementNode([\n                    NodeFactory.returnStatementNode(\n                        NodeFactory.logicalExpressionNode(\n                            this.operator,\n                            NodeFactory.identifierNode('x'),\n                            NodeFactory.identifierNode('y')\n                        )\n                    )\n                ])\n            )\n        );\n\n        NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { ObfuscationEvent } from '../../enums/event-emitters/ObfuscationEvent';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { SingleNodeCallControllerTemplate } from '../../templates/SingleNodeCallControllerTemplate';\n\nimport { NO_ADDITIONAL_NODES_PRESET } from '../../options/presets/NoCustomNodes';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { JavaScriptObfuscator } from '../../JavaScriptObfuscatorFacade';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class NodeCallsControllerFunctionNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    protected callsControllerFunctionName!: string;\n\n    /**\n     * @type {ObfuscationEvent}\n     */\n    @initializable()\n    private appendEvent!: ObfuscationEvent;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {ObfuscationEvent} appendEvent\n     * @param {string} callsControllerFunctionName\n     */\n    public initialize (appendEvent: ObfuscationEvent, callsControllerFunctionName: string): void {\n        this.appendEvent = appendEvent;\n        this.callsControllerFunctionName = callsControllerFunctionName;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        if (this.appendEvent === ObfuscationEvent.AfterObfuscation) {\n            return JavaScriptObfuscator.obfuscate(\n                format(SingleNodeCallControllerTemplate(), {\n                    singleNodeCallControllerFunctionName: this.callsControllerFunctionName\n                }),\n                {\n                    ...NO_ADDITIONAL_NODES_PRESET,\n                    identifierNamesGenerator: this.options.identifierNamesGenerator,\n                    seed: this.options.seed\n                }\n            ).getObfuscatedCode();\n        }\n\n        return format(SingleNodeCallControllerTemplate(), {\n            singleNodeCallControllerFunctionName: this.callsControllerFunctionName\n        });\n    }\n}\n","/**\n * @returns {string}\n */\nexport function SingleNodeCallControllerTemplate (): string {\n    return `\n        var {singleNodeCallControllerFunctionName} = (function(){\n            var firstCall = true;\n            \n            return function (context, fn){\n                var rfn = firstCall ? function(){\n                    if(fn){\n                        var res = fn.apply(context, arguments);\n                        fn = null;\n                        return res;\n                    }\n                } : function(){}\n                \n                firstCall = false;\n                \n                return rfn;\n            }\n        })();\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IEscapeSequenceEncoder } from '../../interfaces/utils/IEscapeSequenceEncoder';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { NO_ADDITIONAL_NODES_PRESET } from '../../options/presets/NoCustomNodes';\n\nimport { SelfDefendingTemplate } from '../../templates/self-defending-nodes/self-defending-unicode-node/SelfDefendingTemplate';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { JavaScriptObfuscator } from '../../JavaScriptObfuscatorFacade';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class SelfDefendingUnicodeNode extends AbstractCustomNode {\n    /**\n     * @type {IEscapeSequenceEncoder}\n     */\n    private readonly escapeSequenceEncoder: IEscapeSequenceEncoder;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private callsControllerFunctionName!: string;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IEscapeSequenceEncoder} escapeSequenceEncoder\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IEscapeSequenceEncoder) escapeSequenceEncoder: IEscapeSequenceEncoder,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.escapeSequenceEncoder = escapeSequenceEncoder;\n    }\n\n    /**\n     * @param {string} callsControllerFunctionName\n     */\n    public initialize (callsControllerFunctionName: string): void {\n        this.callsControllerFunctionName = callsControllerFunctionName;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        return JavaScriptObfuscator.obfuscate(\n            format(SelfDefendingTemplate(this.escapeSequenceEncoder), {\n                selfDefendingFunctionName: this.identifierNamesGenerator.generate(),\n                singleNodeCallControllerFunctionName: this.callsControllerFunctionName\n            }),\n            {\n                ...NO_ADDITIONAL_NODES_PRESET,\n                identifierNamesGenerator: this.options.identifierNamesGenerator,\n                seed: this.options.seed,\n                unicodeEscapeSequence: true\n            }\n        ).getObfuscatedCode();\n    }\n}\n","import { IEscapeSequenceEncoder } from '../../../interfaces/utils/IEscapeSequenceEncoder';\n\n/**\n * SelfDefendingTemplate. Enters code in infinity loop.\n * Notice, that second and third call to recursiveFunc1('indexOf') has cyrillic `е` character instead latin\n *\n * @param {IEscapeSequenceEncoder} escapeSequenceEncoder\n * @returns {string}\n */\nexport function SelfDefendingTemplate (escapeSequenceEncoder: IEscapeSequenceEncoder): string {\n    return `\n        var {selfDefendingFunctionName} = {singleNodeCallControllerFunctionName}(this, function () {\n            var func1 = function(){return 'dev';},\n                func2 = function () {\n                    return 'window';\n                };\n                \n            var test1 = function () {\n                var regExp = new RegExp('${\n                    escapeSequenceEncoder.encode(`\\\\w+ *\\\\(\\\\) *{\\\\w+ *['|\"].+['|\"];? *}`, true)\n                }');\n                \n                return !regExp.test(func1.toString());\n            };\n            \n            var test2 = function () {\n                var regExp = new RegExp('${\n                    escapeSequenceEncoder.encode(`(\\\\\\\\[x|u](\\\\w){2,4})+`, true)\n                }');\n                \n                return regExp.test(func2.toString());\n            };\n            \n            var recursiveFunc1 = function (string) {\n                var i = ~-1 >> 1 + 255 % 0;\n                                \n                if (string.indexOf('i' === i)) {\n                    recursiveFunc2(string)\n                }\n            };\n            \n            var recursiveFunc2 = function (string) {\n                var i = ~-4 >> 1 + 255 % 0;\n                \n                if (string.indexOf((true+\"\")[3]) !== i) {\n                    recursiveFunc1(string)\n                }\n            };\n            \n            if (!test1()) {\n                if (!test2()) {\n                    recursiveFunc1('indеxOf');\n                } else {\n                    recursiveFunc1('indexOf');\n                }\n            } else {\n                recursiveFunc1('indеxOf');\n            }\n        })\n        \n        {selfDefendingFunctionName}();\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IEscapeSequenceEncoder } from '../../interfaces/utils/IEscapeSequenceEncoder';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { ObfuscationTarget } from '../../enums/ObfuscationTarget';\nimport { StringArrayEncoding } from '../../enums/StringArrayEncoding';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { NO_ADDITIONAL_NODES_PRESET } from '../../options/presets/NoCustomNodes';\n\nimport { AtobTemplate } from '../../templates/AtobTemplate';\nimport { GlobalVariableNoEvalTemplate } from '../../templates/GlobalVariableNoEvalTemplate';\nimport { Rc4Template } from '../../templates/Rc4Template';\nimport { SelfDefendingTemplate } from '../../templates/string-array-nodes/string-array-calls-wrapper/SelfDefendingTemplate';\nimport { StringArrayBase64DecodeNodeTemplate } from '../../templates/string-array-nodes/string-array-calls-wrapper/StringArrayBase64DecodeNodeTemplate';\nimport { StringArrayCallsWrapperTemplate } from '../../templates/string-array-nodes/string-array-calls-wrapper/StringArrayCallsWrapperTemplate';\nimport { StringArrayRc4DecodeNodeTemplate } from '../../templates/string-array-nodes/string-array-calls-wrapper/StringArrayRC4DecodeNodeTemplate';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { JavaScriptObfuscator } from '../../JavaScriptObfuscatorFacade';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class StringArrayCallsWrapper extends AbstractCustomNode {\n    /**\n     * @type {IEscapeSequenceEncoder}\n     */\n    private readonly escapeSequenceEncoder: IEscapeSequenceEncoder;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private stringArrayName!: string;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private stringArrayCallsWrapperName!: string;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IEscapeSequenceEncoder} escapeSequenceEncoder\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IEscapeSequenceEncoder) escapeSequenceEncoder: IEscapeSequenceEncoder,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.escapeSequenceEncoder = escapeSequenceEncoder;\n    }\n\n    /**\n     * @param {string} stringArrayName\n     * @param {string} stringArrayCallsWrapperName\n     */\n    public initialize (\n        stringArrayName: string,\n        stringArrayCallsWrapperName: string\n    ): void {\n        this.stringArrayName = stringArrayName;\n        this.stringArrayCallsWrapperName = stringArrayCallsWrapperName;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        const decodeNodeTemplate: string = this.getDecodeStringArrayTemplate();\n\n        return JavaScriptObfuscator.obfuscate(\n            format(StringArrayCallsWrapperTemplate(), {\n                decodeNodeTemplate,\n                stringArrayCallsWrapperName: this.stringArrayCallsWrapperName,\n                stringArrayName: this.stringArrayName\n            }),\n            {\n                ...NO_ADDITIONAL_NODES_PRESET,\n                identifierNamesGenerator: this.options.identifierNamesGenerator,\n                seed: this.options.seed\n            }\n        ).getObfuscatedCode();\n    }\n\n    /**\n     * @returns {string}\n     */\n    private getDecodeStringArrayTemplate (): string {\n        const globalVariableTemplate: string = this.options.target !== ObfuscationTarget.BrowserNoEval\n            ? this.getGlobalVariableTemplate()\n            : GlobalVariableNoEvalTemplate();\n        const atobPolyfill: string = format(AtobTemplate(), { globalVariableTemplate });\n\n        let decodeStringArrayTemplate: string = '';\n        let selfDefendingCode: string = '';\n\n        if (this.options.selfDefending) {\n            selfDefendingCode = format(\n                SelfDefendingTemplate(\n                    this.randomGenerator,\n                    this.escapeSequenceEncoder\n                ),\n                {\n                    stringArrayCallsWrapperName: this.stringArrayCallsWrapperName,\n                    stringArrayName: this.stringArrayName\n                }\n            );\n        }\n\n        switch (this.options.stringArrayEncoding) {\n            case StringArrayEncoding.Rc4:\n                decodeStringArrayTemplate = format(\n                    StringArrayRc4DecodeNodeTemplate(this.randomGenerator),\n                    {\n                        atobPolyfill,\n                        rc4Polyfill: Rc4Template(),\n                        selfDefendingCode,\n                        stringArrayCallsWrapperName: this.stringArrayCallsWrapperName\n                    }\n                );\n\n                break;\n\n            case StringArrayEncoding.Base64:\n                decodeStringArrayTemplate = format(\n                    StringArrayBase64DecodeNodeTemplate(this.randomGenerator),\n                    {\n                        atobPolyfill,\n                        selfDefendingCode,\n                        stringArrayCallsWrapperName: this.stringArrayCallsWrapperName\n                    }\n                );\n        }\n\n        return decodeStringArrayTemplate;\n    }\n}\n","/**\n * @returns {string}\n */\nexport function AtobTemplate (): string {\n    return `\n        (function () {\n            {globalVariableTemplate}\n            \n            var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n            that.atob || (\n                that.atob = function(input) {\n                    var str = String(input).replace(/=+$/, '');\n                    for (\n                        var bc = 0, bs, buffer, idx = 0, output = '';\n                        buffer = str.charAt(idx++);\n                        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n                            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n                    ) {\n                        buffer = chars.indexOf(buffer);\n                    }\n                return output;\n            });\n        })();\n    `;\n}\n","/**\n * @returns {string}\n */\nexport function Rc4Template (): string {\n    return `\n        var rc4 = function (str, key) {\n            var s = [], j = 0, x, res = '', newStr = '';\n           \n            str = atob(str);\n                \n            for (var k = 0, length = str.length; k < length; k++) {\n                newStr += '%' + ('00' + str.charCodeAt(k).toString(16)).slice(-2);\n            }\n        \n            str = decodeURIComponent(newStr);\n                    \t        \n\t        for (var i = 0; i < 256; i++) {\n                s[i] = i;\n            }\n \n            for (i = 0; i < 256; i++) {\n                j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;\n                x = s[i];\n                s[i] = s[j];\n                s[j] = x;\n            }\n            \n            i = 0;\n            j = 0;\n            \n            for (var y = 0; y < str.length; y++) {\n                i = (i + 1) % 256;\n                j = (j + s[i]) % 256;\n                x = s[i];\n                s[i] = s[j];\n                s[j] = x;\n                res += String.fromCharCode(str.charCodeAt(y) ^ s[(s[i] + s[j]) % 256]);\n            }\n                      \n            return res;\n        }\n    `;\n}\n","import { IEscapeSequenceEncoder } from '../../../interfaces/utils/IEscapeSequenceEncoder';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\n/**\n * @param {IRandomGenerator} randomGenerator\n * @param {IEscapeSequenceEncoder} escapeSequenceEncoder\n * @returns {string}\n * @constructor\n */\nexport function SelfDefendingTemplate (\n    randomGenerator: IRandomGenerator,\n    escapeSequenceEncoder: IEscapeSequenceEncoder\n): string {\n    const identifierLength: number = 6;\n    const rc4BytesIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const statesIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const newStateIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const firstStateIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const secondStateIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const checkStateIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const runStateIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const getStateIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const stateResultIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    \n    return `\n        var StatesClass = function (${rc4BytesIdentifier}) {\n            this.${rc4BytesIdentifier} = ${rc4BytesIdentifier};\n            this.${statesIdentifier} = [1, 0, 0];\n            this.${newStateIdentifier} = function(){return 'newState';};\n            this.${firstStateIdentifier} = '${\n                escapeSequenceEncoder.encode(`\\\\w+ *\\\\(\\\\) *{\\\\w+ *`, true)\n            }';\n            this.${secondStateIdentifier} = '${\n                escapeSequenceEncoder.encode(`['|\"].+['|\"];? *}`, true)\n            }';\n        };\n        \n        StatesClass.prototype.${checkStateIdentifier} = function () {\n            var regExp = new RegExp(this.${firstStateIdentifier} + this.${secondStateIdentifier});\n            var expression = regExp.test(this.${newStateIdentifier}.toString())\n                ? --this.${statesIdentifier}[1]\n                : --this.${statesIdentifier}[0];\n            \n            return this.${runStateIdentifier}(expression);\n        };\n        \n        StatesClass.prototype.${runStateIdentifier} = function (${stateResultIdentifier}) {\n            if (!Boolean(~${stateResultIdentifier})) {\n                return ${stateResultIdentifier};\n            }\n            \n            return this.${getStateIdentifier}(this.${rc4BytesIdentifier});\n        };\n\n        StatesClass.prototype.${getStateIdentifier} = function (${rc4BytesIdentifier}) {\n            for (var i = 0, len = this.${statesIdentifier}.length; i < len; i++) {\n                this.${statesIdentifier}.push(Math.round(Math.random()));\n                len = this.${statesIdentifier}.length;\n            }\n            \n            return ${rc4BytesIdentifier}(this.${statesIdentifier}[0]);\n        };\n\n        new StatesClass({stringArrayCallsWrapperName}).${checkStateIdentifier}();\n    `;\n}\n","import { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\n/**\n * @param {IRandomGenerator} randomGenerator\n * @returns {string}\n * @constructor\n */\nexport function StringArrayBase64DecodeNodeTemplate (\n    randomGenerator: IRandomGenerator\n): string {\n    const identifierLength: number = 6;\n    const initializedIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const base64DecodeFunctionIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const dataIdentifier: string = randomGenerator.getRandomString(identifierLength);\n\n    return `\n        if ({stringArrayCallsWrapperName}.${initializedIdentifier} === undefined) {\n            {atobPolyfill}\n            \n            {stringArrayCallsWrapperName}.${base64DecodeFunctionIdentifier} = function (str) {\n                var string = atob(str);\n                var newStringChars = [];\n                \n                for (var i = 0, length = string.length; i < length; i++) {\n                    newStringChars += '%' + ('00' + string.charCodeAt(i).toString(16)).slice(-2);\n                }\n                \n                return decodeURIComponent(newStringChars);\n            };\n            \n            {stringArrayCallsWrapperName}.${dataIdentifier} = {};\n            \n            {stringArrayCallsWrapperName}.${initializedIdentifier} = true;\n        }\n                  \n        var cachedValue = {stringArrayCallsWrapperName}.${dataIdentifier}[index];\n                        \n        if (cachedValue === undefined) {\n            {selfDefendingCode}\n            \n            value = {stringArrayCallsWrapperName}.${base64DecodeFunctionIdentifier}(value);\n            {stringArrayCallsWrapperName}.${dataIdentifier}[index] = value;\n        } else {\n            value = cachedValue;\n        }\n    `;\n}\n","/**\n * @returns {string}\n */\nexport function StringArrayCallsWrapperTemplate (): string {\n    return `\n        var {stringArrayCallsWrapperName} = function (index, key) {\n            index = index - 0;\n            \n            var value = {stringArrayName}[index];\n            \n            {decodeNodeTemplate}\n        \n            return value;\n        };\n    `;\n}\n","import { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\n/**\n * @param {IRandomGenerator} randomGenerator\n * @returns {string}\n * @constructor\n */\nexport function StringArrayRc4DecodeNodeTemplate (\n    randomGenerator: IRandomGenerator\n): string {\n    const identifierLength: number = 6;\n    const initializedIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const rc4Identifier: string = randomGenerator.getRandomString(identifierLength);\n    const dataIdentifier: string = randomGenerator.getRandomString(identifierLength);\n    const onceIdentifier: string = randomGenerator.getRandomString(identifierLength);\n  \n    return `\n        if ({stringArrayCallsWrapperName}.${initializedIdentifier} === undefined) {\n            {atobPolyfill}\n            \n            {rc4Polyfill}\n            {stringArrayCallsWrapperName}.${rc4Identifier} = rc4;\n            \n            {stringArrayCallsWrapperName}.${dataIdentifier} = {};\n            \n            {stringArrayCallsWrapperName}.${initializedIdentifier} = true;\n        }\n  \n        var cachedValue = {stringArrayCallsWrapperName}.${dataIdentifier}[index];\n\n        if (cachedValue === undefined) {\n            if ({stringArrayCallsWrapperName}.${onceIdentifier} === undefined) {\n                {selfDefendingCode}\n                \n                {stringArrayCallsWrapperName}.${onceIdentifier} = true;\n            }\n            \n            value = {stringArrayCallsWrapperName}.${rc4Identifier}(value, key);\n            {stringArrayCallsWrapperName}.${dataIdentifier}[index] = value;\n        } else {\n            value = cachedValue;\n        }\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\nimport { TStringArrayStorage } from '../../types/storages/TStringArrayStorage';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { StringArrayTemplate } from '../../templates/string-array-nodes/string-array-node/StringArrayTemplate';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeUtils } from '../../node/NodeUtils';\nimport { StringArrayStorage } from '../../storages/string-array/StringArrayStorage';\n\n@injectable()\nexport class StringArrayNode extends AbstractCustomNode {\n    /**\n     * @type {TStringArrayStorage}\n     */\n    @initializable()\n    private stringArrayStorage!: TStringArrayStorage;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private stringArrayName!: string;\n\n    /**\n     * @type {number}\n     */\n    @initializable()\n    private stringArrayRotateValue!: number;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {TStringArrayStorage} stringArrayStorage\n     * @param {string} stringArrayName\n     * @param {number} stringArrayRotateValue\n     */\n    public initialize (\n        stringArrayStorage: TStringArrayStorage,\n        stringArrayName: string,\n        stringArrayRotateValue: number\n    ): void {\n        this.stringArrayStorage = stringArrayStorage;\n        this.stringArrayName = stringArrayName;\n        this.stringArrayRotateValue = stringArrayRotateValue;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    public getNode (): TStatement[] {\n        (<StringArrayStorage>this.stringArrayStorage).rotateArray(this.stringArrayRotateValue);\n\n        return super.getNode();\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        return format(StringArrayTemplate(), {\n            stringArrayName: this.stringArrayName,\n            stringArray: this.stringArrayStorage.toString()\n        });\n    }\n}\n","/**\n * @returns {string}\n */\nexport function StringArrayTemplate (): string {\n    return `\n        var {stringArrayName} = [{stringArray}];\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport format from 'string-template';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IEscapeSequenceEncoder } from '../../interfaces/utils/IEscapeSequenceEncoder';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { NO_ADDITIONAL_NODES_PRESET } from '../../options/presets/NoCustomNodes';\n\nimport { SelfDefendingTemplate } from '../../templates/string-array-nodes/string-array-rotate-function-node/SelfDefendingTemplate';\nimport { StringArrayRotateFunctionTemplate } from '../../templates/string-array-nodes/string-array-rotate-function-node/StringArrayRotateFunctionTemplate';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { JavaScriptObfuscator } from '../../JavaScriptObfuscatorFacade';\nimport { NodeUtils } from '../../node/NodeUtils';\nimport { NumberUtils } from '../../utils/NumberUtils';\n\n@injectable()\nexport class StringArrayRotateFunctionNode extends AbstractCustomNode {\n    /**\n     * @type {IEscapeSequenceEncoder}\n     */\n    private readonly escapeSequenceEncoder: IEscapeSequenceEncoder;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private stringArrayName!: string;\n\n    /**\n     * @param {number}\n     */\n    @initializable()\n    private stringArrayRotateValue!: number;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IEscapeSequenceEncoder} escapeSequenceEncoder\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IEscapeSequenceEncoder) escapeSequenceEncoder: IEscapeSequenceEncoder,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n\n        this.escapeSequenceEncoder = escapeSequenceEncoder;\n    }\n\n    /**\n     * @param {string} stringArrayName\n     * @param {number} stringArrayRotateValue\n     */\n    public initialize (\n        stringArrayName: string,\n        stringArrayRotateValue: number\n    ): void {\n        this.stringArrayName = stringArrayName;\n        this.stringArrayRotateValue = stringArrayRotateValue;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        return NodeUtils.convertCodeToStructure(this.getTemplate());\n    }\n\n    /**\n     * @returns {string}\n     */\n    protected getTemplate (): string {\n        const timesName: string = this.identifierNamesGenerator.generate();\n        const whileFunctionName: string = this.identifierNamesGenerator.generate();\n\n        let code: string = '';\n\n        if (this.options.selfDefending) {\n            code = format(SelfDefendingTemplate(this.escapeSequenceEncoder), {\n                timesName,\n                whileFunctionName\n            });\n        } else {\n            code = `${whileFunctionName}(++${timesName})`;\n        }\n\n        return JavaScriptObfuscator.obfuscate(\n            format(StringArrayRotateFunctionTemplate(), {\n                code,\n                timesName,\n                stringArrayName: this.stringArrayName,\n                stringArrayRotateValue: NumberUtils.toHex(this.stringArrayRotateValue),\n                whileFunctionName\n            }),\n            {\n                ...NO_ADDITIONAL_NODES_PRESET,\n                identifierNamesGenerator: this.options.identifierNamesGenerator,\n                seed: this.options.seed\n            }\n        ).getObfuscatedCode();\n    }\n}\n","import { IEscapeSequenceEncoder } from '../../../interfaces/utils/IEscapeSequenceEncoder';\n\n/**\n * SelfDefendingTemplate. Enter code in infinity loop.\n *\n * @param {IEscapeSequenceEncoder} escapeSequenceEncoder\n * @returns {string}\n */\nexport function SelfDefendingTemplate (escapeSequenceEncoder: IEscapeSequenceEncoder): string {\n    return `\n        var selfDefendingFunc = function () {\n            var object = {\n                data: {\n                    key: 'cookie',\n                    value: 'timeout'\n                },\n                setCookie: function (options, name, value, document) {\n                    document = document || {};\n                    \n                    var updatedCookie = name + \"=\" + value;\n\n                    var i = 0;\n                                                            \n                    for (var i = 0, len = options.length; i < len; i++) {\n                        var propName = options[i];\n                                     \n                        updatedCookie += \"; \" + propName;\n                        \n                        var propValue = options[propName];\n                        \n                        options.push(propValue);\n                        len = options.length;\n                                                                        \n                        if (propValue !== true) {\n                            updatedCookie += \"=\" + propValue;\n                        }\n                    }\n\n                    document['cookie'] = updatedCookie;\n                },\n                removeCookie: function(){return 'dev';},\n                getCookie: function (document, name) {\n                    document = document || function (value) { return value };\n                    var matches = document(new RegExp(\n                        \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\n                    ));\n                    \n                    var func = function (param1, param2) {\n                        param1(++param2);\n                    };\n                    \n                    func({whileFunctionName}, {timesName});\n                                        \n                    return matches ? decodeURIComponent(matches[1]) : undefined;\n                }\n            };\n            \n            var test1 = function () {\n                var regExp = new RegExp('${\n                    escapeSequenceEncoder.encode(`\\\\w+ *\\\\(\\\\) *{\\\\w+ *['|\"].+['|\"];? *}`, true)\n                }');\n                \n                return regExp.test(object.removeCookie.toString());\n            };\n            \n            object['updateCookie'] = test1;\n            \n            var cookie = '';\n            var result = object['updateCookie']();\n                                    \n            if (!result) {\n                object['setCookie'](['*'], 'counter', 1);\n            } else if (result) {\n                cookie = object['getCookie'](null, 'counter');\n            } else {\n                object['removeCookie']();\n            }\n        };\n        \n        selfDefendingFunc();\n    `;\n}\n","/**\n * @returns {string}\n */\nexport function StringArrayRotateFunctionTemplate (): string {\n    return `\n        (function (array, {timesName}) {\n            var {whileFunctionName} = function (times) {\n                while (--times) {\n                    array['push'](array['shift']());\n                }\n            };\n            \n            {code}\n        })({stringArrayName}, 0x{stringArrayRotateValue});\n    `;\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../container/ServiceIdentifiers';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../../types/node/TStatement';\n\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../../AbstractCustomNode';\nimport { NodeFactory } from '../../../node/NodeFactory';\nimport { NodeUtils } from '../../../node/NodeUtils';\n\n@injectable()\nexport class StringLiteralControlFlowStorageCallNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private controlFlowStorageKey!: string;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private controlFlowStorageName!: string;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} controlFlowStorageName\n     * @param {string} controlFlowStorageKey\n     */\n    public initialize (\n        controlFlowStorageName: string,\n        controlFlowStorageKey: string\n    ): void {\n        this.controlFlowStorageName = controlFlowStorageName;\n        this.controlFlowStorageKey = controlFlowStorageKey;\n    }\n\n    protected getNodeStructure (): TStatement[] {\n        const structure: TStatement = NodeFactory.expressionStatementNode(\n            NodeFactory.memberExpressionNode(\n                NodeFactory.identifierNode(this.controlFlowStorageName),\n                NodeFactory.identifierNode(this.controlFlowStorageKey)\n            )\n        );\n\n        NodeUtils.parentizeAst(structure);\n\n        return [structure];\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TStatement } from '../../types/node/TStatement';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../../decorators/Initializable';\n\nimport { AbstractCustomNode } from '../AbstractCustomNode';\nimport { NodeFactory } from '../../node/NodeFactory';\n\n@injectable()\nexport class StringLiteralNode extends AbstractCustomNode {\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private literalValue!: string;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(identifierNamesGeneratorFactory, randomGenerator, options);\n    }\n\n    /**\n     * @param {string} literalValue\n     */\n    public initialize (literalValue: string): void {\n        this.literalValue = literalValue;\n    }\n\n    /**\n     * @returns {TStatement[]}\n     */\n    protected getNodeStructure (): TStatement[] {\n        const structure: TStatement = NodeFactory.expressionStatementNode(\n            NodeFactory.literalNode(this.literalValue)\n        );\n\n        return [structure];\n    }\n}\n","import { ContainerModule, interfaces } from 'inversify';\n\nexport const finalizingTransformersModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // finalizing transformers\n\n});\n","import { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { IIdentifierNamesGenerator } from '../../../interfaces/generators/identifier-names-generators/IIdentifierNamesGenerator';\nimport { IOptions } from '../../../interfaces/options/IOptions';\n\nimport { IdentifierNamesGenerator } from '../../../enums/generators/identifier-names-generators/IdentifierNamesGenerator';\n\nimport { HexadecimalIdentifierNamesGenerator } from '../../../generators/identifier-names-generators/HexadecimalIdentifierNamesGenerator';\nimport { MangledIdentifierNamesGenerator } from '../../../generators/identifier-names-generators/MangledIdentifierNamesGenerator';\n\nexport const generatorsModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // identifier name generators\n    bind<IIdentifierNamesGenerator>(ServiceIdentifiers.IIdentifierNamesGenerator)\n        .to(HexadecimalIdentifierNamesGenerator)\n        .inSingletonScope()\n        .whenTargetNamed(IdentifierNamesGenerator.HexadecimalIdentifierNamesGenerator);\n\n    bind<IIdentifierNamesGenerator>(ServiceIdentifiers.IIdentifierNamesGenerator)\n        .to(MangledIdentifierNamesGenerator)\n        .inSingletonScope()\n        .whenTargetNamed(IdentifierNamesGenerator.MangledIdentifierNamesGenerator);\n\n    // identifier name generator factory\n    bind<IIdentifierNamesGenerator>(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n        .toFactory<IIdentifierNamesGenerator>((context: interfaces.Context): (options: IOptions) => IIdentifierNamesGenerator => {\n            let cachedIdentifierNamesGenerator: IIdentifierNamesGenerator | null = null;\n\n            return (options: IOptions) => {\n                if (cachedIdentifierNamesGenerator) {\n                    return cachedIdentifierNamesGenerator;\n                }\n\n                let identifierNamesGenerator: IIdentifierNamesGenerator;\n\n                switch (options.identifierNamesGenerator) {\n                    case IdentifierNamesGenerator.MangledIdentifierNamesGenerator:\n                        identifierNamesGenerator = context.container.getNamed<IIdentifierNamesGenerator>(\n                            ServiceIdentifiers.IIdentifierNamesGenerator,\n                            IdentifierNamesGenerator.MangledIdentifierNamesGenerator\n                        );\n\n                        break;\n\n                    case IdentifierNamesGenerator.HexadecimalIdentifierNamesGenerator:\n                    default:\n                        identifierNamesGenerator = context.container.getNamed<IIdentifierNamesGenerator>(\n                            ServiceIdentifiers.IIdentifierNamesGenerator,\n                            IdentifierNamesGenerator.HexadecimalIdentifierNamesGenerator\n                        );\n                }\n\n                cachedIdentifierNamesGenerator = identifierNamesGenerator;\n\n                return identifierNamesGenerator;\n            };\n        });\n});\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { AbstractIdentifierNamesGenerator } from './AbstractIdentifierNamesGenerator';\nimport { NumberUtils } from '../../utils/NumberUtils';\nimport { Utils } from '../../utils/Utils';\n\n@injectable()\nexport class HexadecimalIdentifierNamesGenerator extends AbstractIdentifierNamesGenerator {\n    /**\n     * @type {number}\n     */\n    private static readonly baseIdentifierNameLength: number = 6;\n\n    /**\n     * @type {Set<string>}\n     */\n    private readonly randomVariableNameSet: Set <string> = new Set();\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @returns {string}\n     */\n    public generate (): string {\n        const rangeMinInteger: number = 10000;\n        const rangeMaxInteger: number = 99_999_999;\n        const randomInteger: number = this.randomGenerator.getRandomInteger(rangeMinInteger, rangeMaxInteger);\n        const hexadecimalNumber: string = NumberUtils.toHex(randomInteger);\n        const baseIdentifierName: string = hexadecimalNumber.substr(0, HexadecimalIdentifierNamesGenerator.baseIdentifierNameLength);\n        const identifierName: string = `_${Utils.hexadecimalPrefix}${baseIdentifierName}`;\n\n        if (this.randomVariableNameSet.has(identifierName)) {\n            return this.generate();\n        }\n\n        this.randomVariableNameSet.add(identifierName);\n\n        return identifierName;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public generateWithPrefix (): string {\n        const identifierName: string = this.generate();\n\n        return `${this.options.identifiersPrefix}${identifierName}`.replace('__', '_');\n    }\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { AbstractIdentifierNamesGenerator } from './AbstractIdentifierNamesGenerator';\n\n@injectable()\nexport class MangledIdentifierNamesGenerator extends AbstractIdentifierNamesGenerator {\n    /**\n     * @type {string}\n     */\n    private static readonly initMangledNameCharacter: string = '9';\n\n    /**\n     * @type {string[]}\n     */\n    private static readonly nameSequence: string[] = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\n    /**\n     * Reserved JS words with length of 2-4 symbols that can be possible generated with this replacer\n     *\n     * @type {string[]}\n     */\n    private static readonly reservedNames: string[] = [\n        'byte', 'case', 'char', 'do', 'else', 'enum', 'eval', 'for', 'goto',\n        'if', 'in', 'int', 'let', 'long', 'new', 'null', 'this', 'true', 'try',\n        'var', 'void', 'with'\n    ];\n\n    /**\n     * @type {string}\n     */\n    private previousMangledName: string = MangledIdentifierNamesGenerator.initMangledNameCharacter;\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @returns {string}\n     */\n    public generate (): string {\n        const identifierName: string = this.generateNewMangledName(this.previousMangledName);\n\n        this.previousMangledName = identifierName;\n\n        return identifierName;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public generateWithPrefix (): string {\n        const prefix: string = this.options.identifiersPrefix ?\n            `${this.options.identifiersPrefix}_`\n            : '';\n        const identifierName: string = this.generate();\n\n        return `${prefix}${identifierName}`;\n    }\n\n    /**\n     * @param {string} mangledName\n     * @returns {boolean}\n     */\n    public isValidIdentifierName (mangledName: string): boolean {\n        return super.isValidIdentifierName(mangledName)\n            && !MangledIdentifierNamesGenerator.reservedNames.includes(mangledName);\n    }\n\n    /**\n     * @param {string} previousMangledName\n     * @returns {string}\n     */\n    private generateNewMangledName (previousMangledName: string): string {\n        const generateNewMangledName: (name: string) => string = (name: string): string => {\n            const nameSequence: string[] = MangledIdentifierNamesGenerator.nameSequence;\n            const nameLength: number = name.length;\n\n            const zeroSequence: (num: number) => string = (num: number): string => {\n                return '0'.repeat(num);\n            };\n\n            let index: number = nameLength - 1;\n\n            do {\n                const character: string = name.charAt(index);\n                const indexInSequence: number = nameSequence.indexOf(character);\n                const lastNameSequenceIndex: number = nameSequence.length - 1;\n\n                if (indexInSequence !== lastNameSequenceIndex) {\n                    const previousNamePart: string = name.substring(0, index);\n                    const nextCharacter: string = nameSequence[indexInSequence + 1];\n                    const zeroSequenceLength: number = nameLength - (index + 1);\n                    const zeroSequenceCharacters: string = zeroSequence(zeroSequenceLength);\n\n                    return previousNamePart + nextCharacter + zeroSequenceCharacters;\n                }\n\n                --index;\n            } while (index >= 0);\n\n            return `a${zeroSequence(nameLength)}`;\n        };\n\n        let newMangledName: string = generateNewMangledName(previousMangledName);\n\n        if (!this.isValidIdentifierName(newMangledName)) {\n            newMangledName = this.generateNewMangledName(newMangledName);\n        }\n\n        return newMangledName;\n    }\n}\n","import { InversifyContainerFacade } from '../../InversifyContainerFacade';\nimport { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { INodeTransformer } from '../../../interfaces/node-transformers/INodeTransformer';\n\nimport { NodeTransformer } from '../../../enums/node-transformers/NodeTransformer';\n\nexport const nodeTransformersModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // node transformers factory\n    bind<INodeTransformer>(ServiceIdentifiers.Factory__INodeTransformer)\n        .toFactory<INodeTransformer>(InversifyContainerFacade\n            .getCacheFactory<NodeTransformer, INodeTransformer>(ServiceIdentifiers.INodeTransformer));\n});\n","import { InversifyContainerFacade } from '../../InversifyContainerFacade';\nimport { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { IIdentifierObfuscatingReplacer } from '../../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { INodeTransformer } from '../../../interfaces/node-transformers/INodeTransformer';\nimport { IObfuscatingReplacer } from '../../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IObfuscatingReplacer';\n\nimport { IdentifierObfuscatingReplacer } from '../../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer';\nimport { LiteralObfuscatingReplacer } from '../../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/LiteralObfuscatingReplacer';\nimport { NodeTransformer } from '../../../enums/node-transformers/NodeTransformer';\n\nimport { BaseIdentifierObfuscatingReplacer } from '../../../node-transformers/obfuscating-transformers/obfuscating-replacers/identifier-obfuscating-replacers/BaseIdentifierObfuscatingReplacer';\nimport { BooleanLiteralObfuscatingReplacer } from '../../../node-transformers/obfuscating-transformers/obfuscating-replacers/literal-obfuscating-replacers/BooleanLiteralObfuscatingReplacer';\nimport { CatchClauseTransformer } from '../../../node-transformers/obfuscating-transformers/CatchClauseTransformer';\nimport { ClassDeclarationTransformer } from '../../../node-transformers/obfuscating-transformers/ClassDeclarationTransformer';\nimport { FunctionDeclarationTransformer } from '../../../node-transformers/obfuscating-transformers/FunctionDeclarationTransformer';\nimport { FunctionTransformer } from '../../../node-transformers/obfuscating-transformers/FunctionTransformer';\nimport { ImportDeclarationTransformer } from '../../../node-transformers/obfuscating-transformers/ImportDeclarationTransformer';\nimport { LabeledStatementTransformer } from '../../../node-transformers/obfuscating-transformers/LabeledStatementTransformer';\nimport { LiteralTransformer } from '../../../node-transformers/obfuscating-transformers/LiteralTransformer';\nimport { NumberLiteralObfuscatingReplacer } from '../../../node-transformers/obfuscating-transformers/obfuscating-replacers/literal-obfuscating-replacers/NumberLiteralObfuscatingReplacer';\nimport { StringLiteralObfuscatingReplacer } from '../../../node-transformers/obfuscating-transformers/obfuscating-replacers/literal-obfuscating-replacers/StringLiteralObfuscatingReplacer';\nimport { VariableDeclarationTransformer } from '../../../node-transformers/obfuscating-transformers/VariableDeclarationTransformer';\n\nexport const obfuscatingTransformersModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // obfuscating transformers\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(CatchClauseTransformer)\n        .whenTargetNamed(NodeTransformer.CatchClauseTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(ClassDeclarationTransformer)\n        .whenTargetNamed(NodeTransformer.ClassDeclarationTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(FunctionDeclarationTransformer)\n        .whenTargetNamed(NodeTransformer.FunctionDeclarationTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(FunctionTransformer)\n        .whenTargetNamed(NodeTransformer.FunctionTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(ImportDeclarationTransformer)\n        .whenTargetNamed(NodeTransformer.ImportDeclarationTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(LabeledStatementTransformer)\n        .whenTargetNamed(NodeTransformer.LabeledStatementTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(LiteralTransformer)\n        .whenTargetNamed(NodeTransformer.LiteralTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(VariableDeclarationTransformer)\n        .whenTargetNamed(NodeTransformer.VariableDeclarationTransformer);\n\n    // literal obfuscating replacers\n    bind<IObfuscatingReplacer>(ServiceIdentifiers.IObfuscatingReplacer)\n        .to(BooleanLiteralObfuscatingReplacer)\n        .whenTargetNamed(LiteralObfuscatingReplacer.BooleanLiteralObfuscatingReplacer);\n\n    bind<IObfuscatingReplacer>(ServiceIdentifiers.IObfuscatingReplacer)\n        .to(NumberLiteralObfuscatingReplacer)\n        .whenTargetNamed(LiteralObfuscatingReplacer.NumberLiteralObfuscatingReplacer);\n\n    bind<IObfuscatingReplacer>(ServiceIdentifiers.IObfuscatingReplacer)\n        .to(StringLiteralObfuscatingReplacer)\n        .whenTargetNamed(LiteralObfuscatingReplacer.StringLiteralObfuscatingReplacer);\n\n    // identifier obfuscating replacers\n    bind<IIdentifierObfuscatingReplacer>(ServiceIdentifiers.IIdentifierObfuscatingReplacer)\n        .to(BaseIdentifierObfuscatingReplacer)\n        .whenTargetNamed(IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer);\n\n    // literal obfuscating replacer factory\n    bind<IObfuscatingReplacer>(ServiceIdentifiers.Factory__IObfuscatingReplacer)\n        .toFactory<IObfuscatingReplacer>(InversifyContainerFacade\n            .getCacheFactory<LiteralObfuscatingReplacer, IObfuscatingReplacer>(\n                ServiceIdentifiers.IObfuscatingReplacer\n            ));\n\n    // identifier obfuscating replacer factory\n    bind<IIdentifierObfuscatingReplacer>(ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)\n        .toFactory<IIdentifierObfuscatingReplacer>(InversifyContainerFacade\n            .getCacheFactory<IdentifierObfuscatingReplacer, IIdentifierObfuscatingReplacer>(\n                ServiceIdentifiers.IIdentifierObfuscatingReplacer\n            ));\n});\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { TNodeWithLexicalScope } from '../../../../types/node/TNodeWithLexicalScope';\n\nimport { IIdentifierNamesGenerator } from '../../../../interfaces/generators/identifier-names-generators/IIdentifierNamesGenerator';\nimport { IIdentifierObfuscatingReplacer } from '../../../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { IOptions } from '../../../../interfaces/options/IOptions';\n\nimport { AbstractObfuscatingReplacer } from '../AbstractObfuscatingReplacer';\nimport { NodeFactory } from '../../../../node/NodeFactory';\n\n@injectable()\nexport class BaseIdentifierObfuscatingReplacer extends AbstractObfuscatingReplacer implements IIdentifierObfuscatingReplacer {\n    /**\n     * @type {IIdentifierNamesGenerator}\n     */\n    private readonly identifierNamesGenerator: IIdentifierNamesGenerator;\n\n    /**\n     * @type {Map<TNodeWithLexicalScope, Map<string, string>>}\n     */\n    private readonly blockScopesMap: Map<TNodeWithLexicalScope, Map<string, string>> = new Map();\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(options);\n\n        this.identifierNamesGenerator = identifierNamesGeneratorFactory(options);\n    }\n\n    /**\n     * @param {string} nodeValue\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     * @returns {Identifier}\n     */\n    public replace (nodeValue: string, lexicalScopeNode: TNodeWithLexicalScope): ESTree.Identifier {\n        if (this.blockScopesMap.has(lexicalScopeNode)) {\n            const namesMap: Map<string, string> = <Map<string, string>>this.blockScopesMap.get(lexicalScopeNode);\n\n            if (namesMap.has(nodeValue)) {\n                nodeValue = <string>namesMap.get(nodeValue);\n            }\n        }\n\n        return NodeFactory.identifierNode(nodeValue);\n    }\n\n    /**\n     * Store `nodeName` of global identifiers as key in map with random name as value.\n     * Reserved name will be ignored.\n     *\n     * @param {string} nodeName\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    public storeGlobalName (nodeName: string, lexicalScopeNode: TNodeWithLexicalScope): void {\n        if (this.isReservedName(nodeName)) {\n            return;\n        }\n\n        const identifierName: string = this.identifierNamesGenerator.generateWithPrefix();\n\n        if (!this.blockScopesMap.has(lexicalScopeNode)) {\n            this.blockScopesMap.set(lexicalScopeNode, new Map());\n        }\n\n        const namesMap: Map<string, string> = <Map<string, string>>this.blockScopesMap.get(lexicalScopeNode);\n\n        namesMap.set(nodeName, identifierName);\n    }\n\n    /**\n     * Store `nodeName` of local identifier as key in map with random name as value.\n     * Reserved name will be ignored.\n     *\n     * @param {string} nodeName\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    public storeLocalName (nodeName: string, lexicalScopeNode: TNodeWithLexicalScope): void {\n        if (this.isReservedName(nodeName)) {\n            return;\n        }\n\n        const identifierName: string = this.identifierNamesGenerator.generate();\n\n        if (!this.blockScopesMap.has(lexicalScopeNode)) {\n            this.blockScopesMap.set(lexicalScopeNode, new Map());\n        }\n\n        const namesMap: Map<string, string> = <Map<string, string>>this.blockScopesMap.get(lexicalScopeNode);\n\n        namesMap.set(nodeName, identifierName);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {boolean}\n     */\n    private isReservedName (name: string): boolean {\n        if (!this.options.reservedStrings.length) {\n            return false;\n        }\n\n        return this.options.reservedNames\n            .some((reservedName: string) => {\n                return new RegExp(reservedName, 'g').exec(name) !== null;\n            });\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../../../interfaces/options/IOptions';\n\nimport { AbstractObfuscatingReplacer } from '../AbstractObfuscatingReplacer';\nimport { NodeFactory } from '../../../../node/NodeFactory';\n\n@injectable()\nexport class BooleanLiteralObfuscatingReplacer extends AbstractObfuscatingReplacer {\n    /**\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(options);\n    }\n\n    /**\n     * @return {ESTree.UnaryExpression}\n     */\n    private static getTrueUnaryExpressionNode (): ESTree.UnaryExpression {\n        return NodeFactory.unaryExpressionNode(\n            '!',\n            BooleanLiteralObfuscatingReplacer.getFalseUnaryExpressionNode()\n        );\n    }\n\n    /**\n     * @return {ESTree.UnaryExpression}\n     */\n    private static getFalseUnaryExpressionNode (): ESTree.UnaryExpression {\n        return NodeFactory.unaryExpressionNode(\n            '!',\n            NodeFactory.arrayExpressionNode()\n        );\n    }\n\n    /**\n     * @param {boolean} nodeValue\n     * @returns {Node}\n     */\n    public replace (nodeValue: boolean): ESTree.Node {\n        return nodeValue\n            ? BooleanLiteralObfuscatingReplacer.getTrueUnaryExpressionNode()\n            : BooleanLiteralObfuscatingReplacer.getFalseUnaryExpressionNode();\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TIdentifierObfuscatingReplacerFactory } from '../../types/container/node-transformers/TIdentifierObfuscatingReplacerFactory';\nimport { TNodeWithLexicalScope } from '../../types/node/TNodeWithLexicalScope';\n\nimport { IIdentifierObfuscatingReplacer } from '../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { IdentifierObfuscatingReplacer } from '../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeLexicalScopeUtils } from '../../node/NodeLexicalScopeUtils';\nimport { NodeMetadata } from '../../node/NodeMetadata';\n\n/**\n * replaces:\n *     try {} catch (e) { console.log(e); };\n *\n * on:\n *     try {} catch (_0x12d45f) { console.log(_0x12d45f); };\n *\n */\n@injectable()\nexport class CatchClauseTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IIdentifierObfuscatingReplacer}\n     */\n    private readonly identifierObfuscatingReplacer: IIdentifierObfuscatingReplacer;\n\n    /**\n     * @param {TIdentifierObfuscatingReplacerFactory} identifierObfuscatingReplacerFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)\n            identifierObfuscatingReplacerFactory: TIdentifierObfuscatingReplacerFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(\n            IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer\n        );\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Obfuscating:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isCatchClauseNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {CatchClause} catchClauseNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (catchClauseNode: ESTree.CatchClause, parentNode: ESTree.Node): ESTree.Node {\n        const lexicalScopeNode: TNodeWithLexicalScope | undefined = NodeLexicalScopeUtils.getLexicalScope(catchClauseNode);\n\n        if (!lexicalScopeNode) {\n            return catchClauseNode;\n        }\n\n        this.storeCatchClauseParam(catchClauseNode, lexicalScopeNode);\n        this.replaceCatchClauseParam(catchClauseNode, lexicalScopeNode);\n\n        return catchClauseNode;\n    }\n\n    /**\n     * @param {CatchClause} catchClauseNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private storeCatchClauseParam (\n        catchClauseNode: ESTree.CatchClause,\n        lexicalScopeNode: TNodeWithLexicalScope\n    ): void {\n        if (NodeGuards.isIdentifierNode(catchClauseNode.param)) {\n            this.identifierObfuscatingReplacer.storeLocalName(catchClauseNode.param.name, lexicalScopeNode);\n        }\n    }\n\n    /**\n     * @param {CatchClause} catchClauseNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceCatchClauseParam (\n        catchClauseNode: ESTree.CatchClause,\n        lexicalScopeNode: TNodeWithLexicalScope\n    ): void {\n        estraverse.replace(catchClauseNode, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): void => {\n                if (parentNode && NodeGuards.isReplaceableIdentifierNode(node, parentNode)) {\n                    const newIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                        .replace(node.name, lexicalScopeNode);\n                    const newIdentifierName: string = newIdentifier.name;\n\n                    if (node.name !== newIdentifierName) {\n                        node.name = newIdentifierName;\n\n                        NodeMetadata.set(node, { renamedIdentifier: true });\n                    }\n                }\n            }\n        });\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TIdentifierObfuscatingReplacerFactory } from \"../../types/container/node-transformers/TIdentifierObfuscatingReplacerFactory\";\nimport { TNodeWithLexicalScope } from '../../types/node/TNodeWithLexicalScope';\nimport { TReplaceableIdentifiers } from '../../types/node-transformers/TReplaceableIdentifiers';\nimport { TReplaceableIdentifiersNames } from '../../types/node-transformers/TReplaceableIdentifiersNames';\n\nimport { IIdentifierObfuscatingReplacer } from '../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { IdentifierObfuscatingReplacer } from \"../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer\";\nimport { NodeType } from '../../enums/node/NodeType';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeLexicalScopeUtils } from '../../node/NodeLexicalScopeUtils';\nimport { NodeMetadata } from '../../node/NodeMetadata';\n\n/**\n * replaces:\n *     class Foo { //... };\n *     new Foo();\n *\n * on:\n *     class _0x12d45f { //... };\n *     new _0x12d45f();\n */\n@injectable()\nexport class ClassDeclarationTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IIdentifierObfuscatingReplacer}\n     */\n    private readonly identifierObfuscatingReplacer: IIdentifierObfuscatingReplacer;\n\n    /**\n     * @type {Map<ESTree.Node, ESTree.Identifier[]>}\n     */\n    private readonly replaceableIdentifiers: TReplaceableIdentifiers = new Map();\n\n    /**\n     * @param {TIdentifierObfuscatingReplacerFactory} identifierObfuscatingReplacerFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)\n            identifierObfuscatingReplacerFactory: TIdentifierObfuscatingReplacerFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(\n            IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer\n        );\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Obfuscating:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (\n                            parentNode\n                            && NodeGuards.isClassDeclarationNode(node)\n                            && !NodeGuards.isExportNamedDeclarationNode(parentNode)\n                        ) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {ClassDeclaration} classDeclarationNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (classDeclarationNode: ESTree.ClassDeclaration, parentNode: ESTree.Node): ESTree.Node {\n        const lexicalScopeNode: TNodeWithLexicalScope | undefined = NodeLexicalScopeUtils.getLexicalScope(classDeclarationNode);\n\n        if (!lexicalScopeNode) {\n            return classDeclarationNode;\n        }\n\n        const isGlobalDeclaration: boolean = lexicalScopeNode.type === NodeType.Program;\n\n        if (!this.options.renameGlobals && isGlobalDeclaration) {\n            return classDeclarationNode;\n        }\n\n        this.storeClassName(classDeclarationNode, lexicalScopeNode, isGlobalDeclaration);\n\n        // check for cached identifiers for current scope node. If exist - loop through them.\n        if (this.replaceableIdentifiers.has(lexicalScopeNode)) {\n            this.replaceScopeCachedIdentifiers(classDeclarationNode, lexicalScopeNode);\n        } else {\n            this.replaceScopeIdentifiers(lexicalScopeNode);\n        }\n\n        return classDeclarationNode;\n    }\n\n    /**\n     * @param {ClassDeclaration} classDeclarationNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     * @param {boolean} isGlobalDeclaration\n     */\n    private storeClassName (\n        classDeclarationNode: ESTree.ClassDeclaration,\n        lexicalScopeNode: TNodeWithLexicalScope,\n        isGlobalDeclaration: boolean\n    ): void {\n        if (isGlobalDeclaration) {\n            this.identifierObfuscatingReplacer.storeGlobalName(classDeclarationNode.id.name, lexicalScopeNode);\n        } else {\n            this.identifierObfuscatingReplacer.storeLocalName(classDeclarationNode.id.name, lexicalScopeNode);\n        }\n    }\n\n    /**\n     * @param {ClassDeclaration} classDeclarationNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceScopeCachedIdentifiers (\n        classDeclarationNode: ESTree.ClassDeclaration,\n        lexicalScopeNode: TNodeWithLexicalScope\n    ): void {\n        const cachedReplaceableIdentifiersNamesMap: TReplaceableIdentifiersNames =\n            <TReplaceableIdentifiersNames>this.replaceableIdentifiers.get(lexicalScopeNode);\n\n        const cachedReplaceableIdentifiers: ESTree.Identifier[] | undefined = cachedReplaceableIdentifiersNamesMap\n            .get(classDeclarationNode.id.name);\n\n        if (!cachedReplaceableIdentifiers) {\n            return;\n        }\n\n        const cachedReplaceableIdentifierLength: number = cachedReplaceableIdentifiers.length;\n\n        for (let i: number = 0; i < cachedReplaceableIdentifierLength; i++) {\n            const replaceableIdentifier: ESTree.Identifier = cachedReplaceableIdentifiers[i];\n            const newReplaceableIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                .replace(replaceableIdentifier.name, lexicalScopeNode);\n\n            replaceableIdentifier.name = newReplaceableIdentifier.name;\n            NodeMetadata.set(replaceableIdentifier, { renamedIdentifier: true });\n        }\n    }\n\n    /**\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceScopeIdentifiers (lexicalScopeNode: TNodeWithLexicalScope): void {\n        const storedReplaceableIdentifiersNamesMap: TReplaceableIdentifiersNames = new Map();\n\n        estraverse.replace(lexicalScopeNode, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): void => {\n                if (\n                    parentNode\n                    && NodeGuards.isReplaceableIdentifierNode(node, parentNode)\n                    && !NodeMetadata.isRenamedIdentifier(node)\n                ) {\n                    const newIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                        .replace(node.name, lexicalScopeNode);\n                    const newIdentifierName: string = newIdentifier.name;\n\n                    if (node.name !== newIdentifierName) {\n                        node.name = newIdentifierName;\n                        NodeMetadata.set(node, { renamedIdentifier: true });\n                    } else {\n                        const storedReplaceableIdentifiers: ESTree.Identifier[] =\n                            storedReplaceableIdentifiersNamesMap.get(node.name) || [];\n\n                        storedReplaceableIdentifiers.push(node);\n                        storedReplaceableIdentifiersNamesMap.set(node.name, storedReplaceableIdentifiers);\n                    }\n                }\n            }\n        });\n\n        this.replaceableIdentifiers.set(lexicalScopeNode, storedReplaceableIdentifiersNamesMap);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TIdentifierObfuscatingReplacerFactory } from \"../../types/container/node-transformers/TIdentifierObfuscatingReplacerFactory\";\nimport { TNodeWithLexicalScope } from '../../types/node/TNodeWithLexicalScope';\nimport { TReplaceableIdentifiers } from '../../types/node-transformers/TReplaceableIdentifiers';\nimport { TReplaceableIdentifiersNames } from '../../types/node-transformers/TReplaceableIdentifiersNames';\n\nimport { IIdentifierObfuscatingReplacer } from '../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { IdentifierObfuscatingReplacer } from \"../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer\";\nimport { NodeType } from '../../enums/node/NodeType';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeLexicalScopeUtils } from '../../node/NodeLexicalScopeUtils';\nimport { NodeMetadata } from '../../node/NodeMetadata';\n\n/**\n * replaces:\n *     function foo () { //... };\n *     foo();\n *\n * on:\n *     function _0x12d45f () { //... };\n *     _0x12d45f();\n */\n@injectable()\nexport class FunctionDeclarationTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IIdentifierObfuscatingReplacer}\n     */\n    private readonly identifierObfuscatingReplacer: IIdentifierObfuscatingReplacer;\n\n    /**\n     * @type {Map<ESTree.Node, ESTree.Identifier[]>}\n     */\n    private readonly replaceableIdentifiers: TReplaceableIdentifiers = new Map();\n\n    /**\n     * @param {TIdentifierObfuscatingReplacerFactory} identifierObfuscatingReplacerFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)\n            identifierObfuscatingReplacerFactory: TIdentifierObfuscatingReplacerFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(\n            IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer\n        );\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Obfuscating:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (\n                            parentNode\n                            && NodeGuards.isFunctionDeclarationNode(node)\n                            && !NodeGuards.isExportNamedDeclarationNode(parentNode)\n                        ) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {FunctionDeclaration} functionDeclarationNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (functionDeclarationNode: ESTree.FunctionDeclaration, parentNode: ESTree.Node): ESTree.Node {\n        const lexicalScopeNode: TNodeWithLexicalScope | undefined = NodeLexicalScopeUtils.getLexicalScope(parentNode);\n\n        if (!lexicalScopeNode) {\n            return functionDeclarationNode;\n        }\n\n        const isGlobalDeclaration: boolean = lexicalScopeNode.type === NodeType.Program;\n\n        if (!this.options.renameGlobals && isGlobalDeclaration) {\n            return functionDeclarationNode;\n        }\n\n        this.storeFunctionName(functionDeclarationNode, lexicalScopeNode, isGlobalDeclaration);\n\n        // check for cached identifiers for current scope node. If exist - loop through them.\n        if (this.replaceableIdentifiers.has(lexicalScopeNode)) {\n            this.replaceScopeCachedIdentifiers(functionDeclarationNode, lexicalScopeNode);\n        } else {\n            this.replaceScopeIdentifiers(lexicalScopeNode);\n        }\n\n        return functionDeclarationNode;\n    }\n\n    /**\n     * @param {FunctionDeclaration} functionDeclarationNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     * @param {boolean} isGlobalDeclaration\n     */\n    private storeFunctionName (\n        functionDeclarationNode: ESTree.FunctionDeclaration,\n        lexicalScopeNode: TNodeWithLexicalScope,\n        isGlobalDeclaration: boolean\n    ): void {\n        if (isGlobalDeclaration) {\n            this.identifierObfuscatingReplacer.storeGlobalName(functionDeclarationNode.id.name, lexicalScopeNode);\n        } else {\n            this.identifierObfuscatingReplacer.storeLocalName(functionDeclarationNode.id.name, lexicalScopeNode);\n        }\n    }\n\n    /**\n     * @param {FunctionDeclaration} functionDeclarationNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceScopeCachedIdentifiers (\n        functionDeclarationNode: ESTree.FunctionDeclaration,\n        lexicalScopeNode: TNodeWithLexicalScope\n    ): void {\n        const cachedReplaceableIdentifiersNamesMap: TReplaceableIdentifiersNames =\n            <TReplaceableIdentifiersNames>this.replaceableIdentifiers.get(lexicalScopeNode);\n\n        const cachedReplaceableIdentifiers: ESTree.Identifier[] | undefined = cachedReplaceableIdentifiersNamesMap\n            .get(functionDeclarationNode.id.name);\n\n        if (!cachedReplaceableIdentifiers) {\n            return;\n        }\n\n        const cachedReplaceableIdentifierLength: number = cachedReplaceableIdentifiers.length;\n\n        for (let i: number = 0; i < cachedReplaceableIdentifierLength; i++) {\n            const replaceableIdentifier: ESTree.Identifier = cachedReplaceableIdentifiers[i];\n            const newReplaceableIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                .replace(replaceableIdentifier.name, lexicalScopeNode);\n\n            replaceableIdentifier.name = newReplaceableIdentifier.name;\n            NodeMetadata.set(replaceableIdentifier, { renamedIdentifier: true });\n        }\n    }\n\n    /**\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceScopeIdentifiers (lexicalScopeNode: TNodeWithLexicalScope): void {\n        const storedReplaceableIdentifiersNamesMap: TReplaceableIdentifiersNames = new Map();\n\n        estraverse.replace(lexicalScopeNode, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): void => {\n                if (\n                    parentNode\n                    && NodeGuards.isReplaceableIdentifierNode(node, parentNode)\n                    && !NodeMetadata.isRenamedIdentifier(node)\n                ) {\n                    const newIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                        .replace(node.name, lexicalScopeNode);\n                    const newIdentifierName: string = newIdentifier.name;\n\n                    if (node.name !== newIdentifierName) {\n                        node.name = newIdentifierName;\n                        NodeMetadata.set(node, { renamedIdentifier: true });\n                    } else {\n                        const storedReplaceableIdentifiers: ESTree.Identifier[] =\n                            storedReplaceableIdentifiersNamesMap.get(node.name) || [];\n\n                        storedReplaceableIdentifiers.push(node);\n                        storedReplaceableIdentifiersNamesMap.set(node.name, storedReplaceableIdentifiers);\n                    }\n                }\n            }\n        });\n\n        this.replaceableIdentifiers.set(lexicalScopeNode, storedReplaceableIdentifiersNamesMap);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TIdentifierObfuscatingReplacerFactory } from '../../types/container/node-transformers/TIdentifierObfuscatingReplacerFactory';\nimport { TNodeWithLexicalScope } from '../../types/node/TNodeWithLexicalScope';\n\nimport { IIdentifierObfuscatingReplacer } from '../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { IdentifierObfuscatingReplacer } from '../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeLexicalScopeUtils } from '../../node/NodeLexicalScopeUtils';\nimport { NodeMetadata } from '../../node/NodeMetadata';\nimport { NodeType } from '../../enums/node/NodeType';\n\n/**\n * replaces:\n *     function foo (argument1) { return argument1; };\n *\n * on:\n *     function foo (_0x12d45f) { return _0x12d45f; };\n *\n */\n@injectable()\nexport class FunctionTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IIdentifierObfuscatingReplacer}\n     */\n    private readonly identifierObfuscatingReplacer: IIdentifierObfuscatingReplacer;\n\n    /**\n     * @param {TIdentifierObfuscatingReplacerFactory} identifierObfuscatingReplacerFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)\n            identifierObfuscatingReplacerFactory: TIdentifierObfuscatingReplacerFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(\n            IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer\n        );\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {boolean}\n     */\n    private static isProhibitedIdentifierOfPropertyNode (\n        node: ESTree.Node,\n        parentNode: ESTree.Node | null\n    ): node is ESTree.Identifier {\n        return NodeGuards.isIdentifierNode(node)\n            && !!parentNode\n            && NodeGuards.isPropertyNode(parentNode)\n            && parentNode.key === node;\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    private static isProhibitedIdentifierOfShorthandPropertyNode (\n        node: ESTree.Node,\n    ): node is ESTree.Property & {key: ESTree.Identifier} {\n        return NodeGuards.isPropertyNode(node)\n            && node.shorthand\n            && NodeGuards.isIdentifierNode(node.key);\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Obfuscating:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isFunctionNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {Function} functionNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (functionNode: ESTree.Function, parentNode: ESTree.Node): ESTree.Node {\n        const lexicalScopeNode: TNodeWithLexicalScope | undefined = NodeLexicalScopeUtils.getLexicalScope(functionNode);\n\n        if (!lexicalScopeNode) {\n            return functionNode;\n        }\n\n        this.storeFunctionParams(functionNode, lexicalScopeNode);\n        this.replaceFunctionParams(functionNode, lexicalScopeNode);\n\n        return functionNode;\n    }\n\n    /**\n     * @param {Identifier} node\n     * @param {Node} parentNode\n     * @returns {boolean}\n     */\n    private isGlobalFunctionDeclarationIdentifier (node: ESTree.Identifier, parentNode: ESTree.Node): boolean {\n        if (!NodeGuards.isFunctionDeclarationNode(parentNode) || parentNode.id !== node) {\n            return false\n        }\n\n        const lexicalScopeNode: TNodeWithLexicalScope | undefined = NodeLexicalScopeUtils.getLexicalScopes(parentNode)[1];\n\n        if (!lexicalScopeNode) {\n            return false;\n        }\n\n        const isGlobalDeclaration: boolean = lexicalScopeNode.type === NodeType.Program;\n\n        return !this.options.renameGlobals && isGlobalDeclaration;\n    }\n\n    /**\n     * @param {Function} functionNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private storeFunctionParams (functionNode: ESTree.Function, lexicalScopeNode: TNodeWithLexicalScope): void {\n        const visitor: estraverse.Visitor = {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): estraverse.VisitorOption | void => {\n                // should check with identifier as first argument,\n                // because prohibited identifier can be easily ignored\n                if (FunctionTransformer.isProhibitedIdentifierOfPropertyNode(node, parentNode)) {\n                    return;\n                }\n\n                if (NodeGuards.isAssignmentPatternNode(node) && NodeGuards.isIdentifierNode(node.left)) {\n                    this.identifierObfuscatingReplacer.storeLocalName(node.left.name, lexicalScopeNode);\n\n                    return estraverse.VisitorOption.Skip;\n                }\n\n                if (NodeGuards.isIdentifierNode(node)) {\n                    this.identifierObfuscatingReplacer.storeLocalName(node.name, lexicalScopeNode);\n                }\n            }\n        };\n\n        functionNode.params.forEach((paramsNode: ESTree.Node) => {\n            estraverse.traverse(paramsNode, visitor);\n        });\n    }\n\n    /**\n     * @param {Function} functionNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     * @param {Set<string>} ignoredIdentifierNamesSet\n     */\n    private replaceFunctionParams (\n        functionNode: ESTree.Function,\n        lexicalScopeNode: TNodeWithLexicalScope,\n        ignoredIdentifierNamesSet: Set <string> = new Set()\n    ): void {\n        const visitor: estraverse.Visitor = {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): void | estraverse.VisitorOption => {\n                /**\n                 * should process nested functions in different traverse loop to avoid wrong code generation\n                 */\n                if (NodeGuards.isFunctionNode(node) && node !== functionNode) {\n                    this.replaceFunctionParams(node, lexicalScopeNode, new Set(ignoredIdentifierNamesSet));\n\n                    return estraverse.VisitorOption.Skip;\n                }\n\n                /**\n                 * should ignore all shorthand `key` identifiers of the `PropertyNode`\n                 */\n                if (FunctionTransformer.isProhibitedIdentifierOfShorthandPropertyNode(node)) {\n                    ignoredIdentifierNamesSet.add(node.key.name);\n\n                    return;\n                }\n\n                if (\n                    parentNode\n                    && NodeGuards.isReplaceableIdentifierNode(node, parentNode)\n                    && !NodeMetadata.isRenamedIdentifier(node)\n                    && !ignoredIdentifierNamesSet.has(node.name)\n                ) {\n                    // should ignore identifiers of global function declarations\n                    if (this.isGlobalFunctionDeclarationIdentifier(node, parentNode)) {\n                        return;\n                    }\n\n                    const newIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                        .replace(node.name, lexicalScopeNode);\n                    const newIdentifierName: string = newIdentifier.name;\n\n                    if (node.name !== newIdentifierName) {\n                        node.name = newIdentifierName;\n                        NodeMetadata.set(node, { renamedIdentifier: true });\n                    }\n                }\n            }\n        };\n\n        estraverse.replace(functionNode, visitor);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TIdentifierObfuscatingReplacerFactory } from \"../../types/container/node-transformers/TIdentifierObfuscatingReplacerFactory\";\nimport { TImportSpecifier } from '../../types/node/TimportSpecifier';\nimport { TNodeWithLexicalScope } from '../../types/node/TNodeWithLexicalScope';\n\nimport { IIdentifierObfuscatingReplacer } from '../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { IdentifierObfuscatingReplacer } from \"../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer\";\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeLexicalScopeUtils } from '../../node/NodeLexicalScopeUtils';\nimport { NodeMetadata } from '../../node/NodeMetadata';\n\n/**\n * replaces:\n *     import foo from './foo';\n *     import * as bar from './bar';\n *\n * on:\n *     import _0x12d45f from './foo';\n *     import * as _0x12d45f from './bar';\n */\n@injectable()\nexport class ImportDeclarationTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IIdentifierObfuscatingReplacer}\n     */\n    private readonly identifierObfuscatingReplacer: IIdentifierObfuscatingReplacer;\n\n    /**\n     * @type {Map<ESTree.Node, ESTree.Identifier[]>}\n     */\n    private readonly replaceableIdentifiers: Map <ESTree.Node, ESTree.Identifier[]> = new Map();\n\n    /**\n     * @param {TIdentifierObfuscatingReplacerFactory} identifierObfuscatingReplacerFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)\n            identifierObfuscatingReplacerFactory: TIdentifierObfuscatingReplacerFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(\n            IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer\n        );\n    }\n\n    /**\n     * @param {TImportSpecifier} importSpecifierNode\n     * @returns {boolean}\n     */\n    private static isProhibitedImportSpecifierNode (importSpecifierNode: TImportSpecifier): boolean {\n        return NodeGuards.isImportSpecifierNode(importSpecifierNode)\n            && importSpecifierNode.imported.name === importSpecifierNode.local.name;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Obfuscating:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isImportDeclarationNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {ImportDeclaration} importDeclarationNode\n     * @param {Node} parentNode\n     * @returns {Node}\n     */\n    public transformNode (importDeclarationNode: ESTree.ImportDeclaration, parentNode: ESTree.Node): ESTree.Node {\n        const lexicalScopeNode: TNodeWithLexicalScope | undefined = NodeLexicalScopeUtils.getLexicalScope(importDeclarationNode);\n\n        if (!lexicalScopeNode) {\n            return importDeclarationNode;\n        }\n\n        this.storeImportSpecifierNames(importDeclarationNode, lexicalScopeNode);\n\n        // check for cached identifiers for current scope node. If exist - loop through them.\n        if (this.replaceableIdentifiers.has(lexicalScopeNode)) {\n            this.replaceScopeCachedIdentifiers(lexicalScopeNode);\n        } else {\n            this.replaceScopeIdentifiers(lexicalScopeNode);\n        }\n\n        return importDeclarationNode;\n    }\n\n    /**\n     * @param {ImportDeclaration} importDeclarationNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private storeImportSpecifierNames (\n        importDeclarationNode: ESTree.ImportDeclaration,\n        lexicalScopeNode: TNodeWithLexicalScope\n    ): void {\n        importDeclarationNode.specifiers.forEach((importSpecifierNode: TImportSpecifier) => {\n            if (ImportDeclarationTransformer.isProhibitedImportSpecifierNode(importSpecifierNode)) {\n                return;\n            }\n\n            this.identifierObfuscatingReplacer.storeGlobalName(importSpecifierNode.local.name, lexicalScopeNode);\n        });\n    }\n\n    /**\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceScopeCachedIdentifiers (lexicalScopeNode: TNodeWithLexicalScope): void {\n        const cachedReplaceableIdentifiers: ESTree.Identifier[] =\n            <ESTree.Identifier[]>this.replaceableIdentifiers.get(lexicalScopeNode);\n\n        cachedReplaceableIdentifiers.forEach((replaceableIdentifier: ESTree.Identifier) => {\n            const newReplaceableIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                .replace(replaceableIdentifier.name, lexicalScopeNode);\n\n            replaceableIdentifier.name = newReplaceableIdentifier.name;\n            NodeMetadata.set(replaceableIdentifier, { renamedIdentifier: true });\n        });\n    }\n\n    /**\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceScopeIdentifiers (lexicalScopeNode: TNodeWithLexicalScope): void {\n        const storedReplaceableIdentifiers: ESTree.Identifier[] = [];\n\n        estraverse.replace(lexicalScopeNode, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): void => {\n                if (\n                    parentNode\n                    && NodeGuards.isReplaceableIdentifierNode(node, parentNode)\n                    && !NodeMetadata.isRenamedIdentifier(node)\n                ) {\n                    const newIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                        .replace(node.name, lexicalScopeNode);\n                    const newIdentifierName: string = newIdentifier.name;\n\n                    if (node.name !== newIdentifierName) {\n                        node.name = newIdentifierName;\n                        NodeMetadata.set(node, { renamedIdentifier: true });\n                    } else {\n                        storedReplaceableIdentifiers.push(node);\n                    }\n                }\n            }\n        });\n\n        this.replaceableIdentifiers.set(lexicalScopeNode, storedReplaceableIdentifiers);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TIdentifierObfuscatingReplacerFactory } from '../../types/container/node-transformers/TIdentifierObfuscatingReplacerFactory';\nimport { TNodeWithLexicalScope } from '../../types/node/TNodeWithLexicalScope';\n\nimport { IIdentifierObfuscatingReplacer } from '../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { IdentifierObfuscatingReplacer } from '../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeLexicalScopeUtils } from '../../node/NodeLexicalScopeUtils';\n\n/**\n * replaces:\n *     label: {\n *          for (var i = 0; i < 1000; i++) {\n *              break label;\n *          }\n *     }\n *\n * on:\n *     _0x12d45f: {\n *          for (var i = 0; i < 1000; i++) {\n *              break _0x12d45f;\n *          }\n *     }\n *\n */\n@injectable()\nexport class LabeledStatementTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IIdentifierObfuscatingReplacer}\n     */\n    private readonly identifierObfuscatingReplacer: IIdentifierObfuscatingReplacer;\n\n    /**\n     * @param {TIdentifierObfuscatingReplacerFactory} identifierObfuscatingReplacerFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)\n            identifierObfuscatingReplacerFactory: TIdentifierObfuscatingReplacerFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(\n            IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer\n        );\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Obfuscating:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isLabeledStatementNode(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {LabeledStatement} labeledStatementNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (labeledStatementNode: ESTree.LabeledStatement, parentNode: ESTree.Node): ESTree.Node {\n        const lexicalScopeNode: TNodeWithLexicalScope | undefined = NodeLexicalScopeUtils.getLexicalScope(labeledStatementNode);\n\n        if (!lexicalScopeNode) {\n            return labeledStatementNode;\n        }\n\n        this.storeLabeledStatementName(labeledStatementNode, lexicalScopeNode);\n        this.replaceLabeledStatementName(labeledStatementNode, lexicalScopeNode);\n\n        return labeledStatementNode;\n    }\n\n    /**\n     * @param {LabeledStatement} labeledStatementNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private storeLabeledStatementName (\n        labeledStatementNode: ESTree.LabeledStatement,\n        lexicalScopeNode: TNodeWithLexicalScope\n    ): void {\n        this.identifierObfuscatingReplacer.storeLocalName(labeledStatementNode.label.name, lexicalScopeNode);\n    }\n\n    /**\n     * @param {LabeledStatement} labeledStatementNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceLabeledStatementName (\n        labeledStatementNode: ESTree.LabeledStatement,\n        lexicalScopeNode: TNodeWithLexicalScope\n    ): void {\n        estraverse.replace(labeledStatementNode, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): void => {\n                if (parentNode && NodeGuards.isLabelIdentifierNode(node, parentNode)) {\n                    const newIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                        .replace(node.name, lexicalScopeNode);\n\n                    node.name = newIdentifier.name;\n                }\n            }\n        });\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TLiteralObfuscatingReplacerFactory } from '../../types/container/node-transformers/TLiteralObfuscatingReplacerFactory';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { LiteralObfuscatingReplacer } from '../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/LiteralObfuscatingReplacer';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeMetadata } from '../../node/NodeMetadata';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class LiteralTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {TLiteralObfuscatingReplacerFactory}\n     */\n    private readonly literalObfuscatingReplacerFactory: TLiteralObfuscatingReplacerFactory;\n\n    /**\n     * @param {TLiteralObfuscatingReplacerFactory} literalObfuscatingReplacerFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IObfuscatingReplacer)\n            literalObfuscatingReplacerFactory: TLiteralObfuscatingReplacerFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.literalObfuscatingReplacerFactory = literalObfuscatingReplacerFactory;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Obfuscating:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isLiteralNode(node) && !NodeMetadata.isReplacedLiteral(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {Literal} literalNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (literalNode: ESTree.Literal, parentNode: ESTree.Node): ESTree.Node {\n        if (this.isProhibitedNode(literalNode, parentNode)) {\n            return literalNode;\n        }\n\n        let newLiteralNode: ESTree.Node;\n\n        switch (typeof literalNode.value) {\n            case 'boolean':\n                newLiteralNode = this.literalObfuscatingReplacerFactory(\n                    LiteralObfuscatingReplacer.BooleanLiteralObfuscatingReplacer\n                ).replace(<boolean>literalNode.value);\n\n                break;\n\n            case 'number':\n                newLiteralNode = this.literalObfuscatingReplacerFactory(\n                    LiteralObfuscatingReplacer.NumberLiteralObfuscatingReplacer\n                ).replace(<number>literalNode.value);\n\n                break;\n\n            case 'string':\n                newLiteralNode = this.literalObfuscatingReplacerFactory(\n                    LiteralObfuscatingReplacer.StringLiteralObfuscatingReplacer\n                ).replace(<string>literalNode.value);\n\n                break;\n\n            default:\n                newLiteralNode = literalNode;\n        }\n\n        NodeUtils.parentizeNode(newLiteralNode, parentNode);\n\n        return newLiteralNode;\n    }\n\n    /**\n     * @param {Literal} literalNode\n     * @param {Node} parentNode\n     * @returns {boolean}\n     */\n    private isProhibitedNode (literalNode: ESTree.Literal, parentNode: ESTree.Node): boolean {\n        if (NodeGuards.isPropertyNode(parentNode) && parentNode.key === literalNode) {\n            return true;\n        }\n\n        if (NodeGuards.isImportDeclarationNode(parentNode)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../../../interfaces/options/IOptions';\n\nimport { AbstractObfuscatingReplacer } from '../AbstractObfuscatingReplacer';\nimport { NodeFactory } from '../../../../node/NodeFactory';\nimport { NumberUtils } from '../../../../utils/NumberUtils';\nimport { Utils } from '../../../../utils/Utils';\n\n@injectable()\nexport class NumberLiteralObfuscatingReplacer extends AbstractObfuscatingReplacer {\n    /**\n     * @type {Map<string, string>}\n     */\n    private readonly numberLiteralCache: Map <number, string> = new Map();\n\n    /**\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(options);\n    }\n\n    /**\n     * @param {number} nodeValue\n     * @returns {Node}\n     */\n    public replace (nodeValue: number): ESTree.Node {\n        let rawValue: string;\n\n        if (this.numberLiteralCache.has(nodeValue)) {\n            rawValue = <string>this.numberLiteralCache.get(nodeValue);\n        } else {\n            if (!NumberUtils.isCeil(nodeValue)) {\n                rawValue = String(nodeValue);\n            } else {\n                rawValue = `${Utils.hexadecimalPrefix}${NumberUtils.toHex(nodeValue)}`;\n            }\n\n            this.numberLiteralCache.set(nodeValue, rawValue);\n        }\n\n        return NodeFactory.literalNode(nodeValue, rawValue);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TStringArrayStorage } from '../../../../types/storages/TStringArrayStorage';\n\nimport { ICryptUtils } from '../../../../interfaces/utils/ICryptUtils';\nimport { IEncodedValue } from '../../../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/literal-obfuscating-replacers/IEncodedValue';\nimport { IEscapeSequenceEncoder } from '../../../../interfaces/utils/IEscapeSequenceEncoder';\nimport { IOptions } from '../../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../../interfaces/utils/IRandomGenerator';\nimport { IStringArrayIndexData } from '../../../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/literal-obfuscating-replacers/IStringArrayIndexData';\n\nimport { StringArrayEncoding } from '../../../../enums/StringArrayEncoding';\n\nimport { AbstractObfuscatingReplacer } from '../AbstractObfuscatingReplacer';\nimport { NodeMetadata } from '../../../../node/NodeMetadata';\nimport { NodeFactory } from '../../../../node/NodeFactory';\nimport { NumberUtils } from '../../../../utils/NumberUtils';\nimport { Utils } from '../../../../utils/Utils';\n\n@injectable()\nexport class StringLiteralObfuscatingReplacer extends AbstractObfuscatingReplacer {\n    /**\n     * @type {number}\n     */\n    private static readonly minimumLengthForStringArray: number = 3;\n\n    /**\n     * @type {number}\n     */\n    private static readonly rc4KeyLength: number = 4;\n\n    /**\n     * @type {number}\n     */\n    private static readonly rc4KeysCount: number = 50;\n\n    /**\n     * @type {ICryptUtils}\n     */\n    private readonly cryptUtils: ICryptUtils;\n\n    /**\n     * @type {IEscapeSequenceEncoder}\n     */\n    private readonly escapeSequenceEncoder: IEscapeSequenceEncoder;\n\n    /**\n     * @type {Map<string, ESTree.Node>}\n     */\n    private readonly nodesCache: Map <string, ESTree.Node> = new Map();\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    private readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @type {string[]}\n     */\n    private readonly rc4Keys: string[];\n\n    /**\n     * @type {Map<string, string>}\n     */\n    private readonly stringLiteralHexadecimalIndexCache: Map <string, string> = new Map();\n\n    /**\n     * @type {TStringArrayStorage}\n     */\n    private readonly stringArrayStorage: TStringArrayStorage;\n\n    /**\n     * @param {TStringArrayStorage} stringArrayStorage\n     * @param {IEscapeSequenceEncoder} escapeSequenceEncoder\n     * @param {IRandomGenerator} randomGenerator\n     * @param {ICryptUtils} cryptUtils\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.TStringArrayStorage) stringArrayStorage: TStringArrayStorage,\n        @inject(ServiceIdentifiers.IEscapeSequenceEncoder) escapeSequenceEncoder: IEscapeSequenceEncoder,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.ICryptUtils) cryptUtils: ICryptUtils,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(\n            options\n        );\n\n        this.stringArrayStorage = stringArrayStorage;\n        this.escapeSequenceEncoder = escapeSequenceEncoder;\n        this.randomGenerator = randomGenerator;\n        this.cryptUtils = cryptUtils;\n\n        this.rc4Keys = this.randomGenerator.getRandomGenerator()\n            .n(\n                () => this.randomGenerator.getRandomGenerator().string({\n                    length: StringLiteralObfuscatingReplacer.rc4KeyLength\n                }),\n                StringLiteralObfuscatingReplacer.rc4KeysCount\n            );\n    }\n\n    /**\n     * @param {string} hexadecimalIndex\n     * @returns {Literal}\n     */\n    private static getHexadecimalLiteralNode (hexadecimalIndex: string): ESTree.Literal {\n        const hexadecimalLiteralNode: ESTree.Literal = NodeFactory.literalNode(hexadecimalIndex);\n\n        NodeMetadata.set(hexadecimalLiteralNode, { replacedLiteral: true });\n\n        return hexadecimalLiteralNode;\n    }\n\n    /**\n     * @param {string} literalValue\n     * @returns {Literal}\n     */\n    private static getRc4KeyLiteralNode (literalValue: string): ESTree.Literal {\n        const rc4KeyLiteralNode: ESTree.Literal = NodeFactory.literalNode(literalValue);\n\n        NodeMetadata.set(rc4KeyLiteralNode, { replacedLiteral: true });\n\n        return rc4KeyLiteralNode;\n    }\n\n    /**\n     * @param {string} nodeValue\n     * @returns {Node}\n     */\n    public replace (nodeValue: string): ESTree.Node {\n        if (this.isReservedString(nodeValue)) {\n            return NodeFactory.literalNode(nodeValue);\n        }\n\n        const useStringArray: boolean = this.canUseStringArray(nodeValue);\n        const cacheKey: string = `${nodeValue}-${String(useStringArray)}`;\n        const useCacheValue: boolean = this.nodesCache.has(cacheKey) && this.options.stringArrayEncoding !== StringArrayEncoding.Rc4;\n\n        if (useCacheValue) {\n            return <ESTree.Node>this.nodesCache.get(cacheKey);\n        }\n\n        const resultNode: ESTree.Node = useStringArray\n            ? this.replaceWithStringArrayCallNode(nodeValue)\n            : this.replaceWithLiteralNode(nodeValue);\n\n        this.nodesCache.set(cacheKey, resultNode);\n\n        return resultNode;\n    }\n\n    /**\n     * @param {string} nodeValue\n     * @returns {boolean}\n     */\n    private canUseStringArray (nodeValue: string): boolean {\n        return (\n            this.options.stringArray &&\n            nodeValue.length >= StringLiteralObfuscatingReplacer.minimumLengthForStringArray &&\n            this.randomGenerator.getMathRandom() <= this.options.stringArrayThreshold\n        );\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} stringArrayStorageLength\n     * @returns {IStringArrayIndexData}\n     */\n    private getStringArrayHexadecimalIndex (value: string, stringArrayStorageLength: number): IStringArrayIndexData {\n        if (this.stringLiteralHexadecimalIndexCache.has(value)) {\n            return {\n                fromCache: true,\n                index: <string>this.stringLiteralHexadecimalIndexCache.get(value)\n            };\n        }\n\n        const hexadecimalRawIndex: string = NumberUtils.toHex(stringArrayStorageLength);\n        const hexadecimalIndex: string = `${Utils.hexadecimalPrefix}${hexadecimalRawIndex}`;\n\n        this.stringLiteralHexadecimalIndexCache.set(value, hexadecimalIndex);\n\n        return {\n            fromCache: false,\n            index: hexadecimalIndex\n        };\n    }\n\n    /**\n     * @param {string} value\n     * @returns {IEncodedValue}\n     */\n    private getEncodedValue (value: string): IEncodedValue {\n        let encodedValue: string;\n        let key: string | null = null;\n\n        switch (this.options.stringArrayEncoding) {\n            case StringArrayEncoding.Rc4:\n                key = this.randomGenerator.getRandomGenerator().pickone(this.rc4Keys);\n                encodedValue = this.cryptUtils.btoa(this.cryptUtils.rc4(value, key));\n\n                break;\n\n            case StringArrayEncoding.Base64:\n                encodedValue = this.cryptUtils.btoa(value);\n\n                break;\n\n            default:\n                encodedValue = value;\n        }\n\n        return { encodedValue, key };\n    }\n\n    /**\n     * @param {string} value\n     * @returns {Node}\n     */\n    private replaceWithLiteralNode (value: string): ESTree.Node {\n        return NodeFactory.literalNode(\n            this.escapeSequenceEncoder.encode(value, this.options.unicodeEscapeSequence)\n        );\n    }\n\n    /**\n     * @param {string} value\n     * @returns {Node}\n     */\n    private replaceWithStringArrayCallNode (value: string): ESTree.Node {\n        const { encodedValue, key }: IEncodedValue = this.getEncodedValue(value);\n        const escapedValue: string = this.escapeSequenceEncoder.encode(encodedValue, this.options.unicodeEscapeSequence);\n\n        const stringArrayStorageLength: number = this.stringArrayStorage.getLength();\n        const stringArrayStorageCallsWrapperName: string = this.stringArrayStorage.getStorageId().split('|')[1];\n\n        const { fromCache, index }: IStringArrayIndexData = this.getStringArrayHexadecimalIndex(\n            escapedValue,\n            stringArrayStorageLength\n        );\n\n        if (!fromCache) {\n            this.stringArrayStorage.set(stringArrayStorageLength, escapedValue);\n        }\n\n        const callExpressionArgs: (ESTree.Expression | ESTree.SpreadElement)[] = [\n            StringLiteralObfuscatingReplacer.getHexadecimalLiteralNode(index)\n        ];\n\n        if (key) {\n            callExpressionArgs.push(StringLiteralObfuscatingReplacer.getRc4KeyLiteralNode(\n                this.escapeSequenceEncoder.encode(key, this.options.unicodeEscapeSequence)\n            ));\n        }\n\n        const stringArrayIdentifierNode: ESTree.Identifier = NodeFactory.identifierNode(stringArrayStorageCallsWrapperName);\n\n        // prevent obfuscation of this identifier\n        NodeMetadata.set(stringArrayIdentifierNode, { renamedIdentifier: true });\n\n        return NodeFactory.callExpressionNode(\n            stringArrayIdentifierNode,\n            callExpressionArgs\n        );\n    }\n\n    /**\n     * @param {string} value\n     * @returns {boolean}\n     */\n    private isReservedString (value: string): boolean {\n        if (!this.options.reservedStrings.length) {\n            return false;\n        }\n\n        return this.options.reservedStrings\n            .some((reservedString: string) => {\n                return new RegExp(reservedString, 'g').exec(value) !== null;\n            });\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TIdentifierObfuscatingReplacerFactory } from '../../types/container/node-transformers/TIdentifierObfuscatingReplacerFactory';\nimport { TNodeWithLexicalScope } from '../../types/node/TNodeWithLexicalScope';\nimport { TReplaceableIdentifiers } from '../../types/node-transformers/TReplaceableIdentifiers';\nimport { TReplaceableIdentifiersNames } from '../../types/node-transformers/TReplaceableIdentifiersNames';\n\nimport { IIdentifierObfuscatingReplacer } from '../../interfaces/node-transformers/obfuscating-transformers/obfuscating-replacers/IIdentifierObfuscatingReplacer';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { IdentifierObfuscatingReplacer } from \"../../enums/node-transformers/obfuscating-transformers/obfuscating-replacers/IdentifierObfuscatingReplacer\";\nimport { NodeType } from '../../enums/node/NodeType';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeLexicalScopeUtils } from '../../node/NodeLexicalScopeUtils';\nimport { NodeMetadata } from '../../node/NodeMetadata';\n\n/**\n * replaces:\n *     var variable = 1;\n *     variable++;\n *\n * on:\n *     var _0x12d45f = 1;\n *     _0x12d45f++;\n *\n */\n@injectable()\nexport class VariableDeclarationTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {IIdentifierObfuscatingReplacer}\n     */\n    private readonly identifierObfuscatingReplacer: IIdentifierObfuscatingReplacer;\n\n    /**\n     * @type {TReplaceableIdentifiers}\n     */\n    private readonly replaceableIdentifiers: TReplaceableIdentifiers = new Map();\n\n    /**\n     * @param {TIdentifierObfuscatingReplacerFactory} identifierObfuscatingReplacerFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierObfuscatingReplacer)\n            identifierObfuscatingReplacerFactory: TIdentifierObfuscatingReplacerFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.identifierObfuscatingReplacer = identifierObfuscatingReplacerFactory(\n            IdentifierObfuscatingReplacer.BaseIdentifierObfuscatingReplacer\n        );\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Obfuscating:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (\n                            parentNode\n                            && NodeGuards.isVariableDeclarationNode(node)\n                            && !NodeGuards.isExportNamedDeclarationNode(parentNode)\n                        ) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {VariableDeclaration} variableDeclarationNode\n     * @param {NodeGuards} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (variableDeclarationNode: ESTree.VariableDeclaration, parentNode: ESTree.Node): ESTree.Node {\n        const lexicalScopeNode: TNodeWithLexicalScope | undefined = NodeLexicalScopeUtils.getLexicalScope(variableDeclarationNode);\n\n        if (!lexicalScopeNode) {\n            return variableDeclarationNode;\n        }\n\n        const isGlobalDeclaration: boolean = lexicalScopeNode.type === NodeType.Program;\n\n        if (!this.options.renameGlobals && isGlobalDeclaration) {\n            return variableDeclarationNode;\n        }\n\n        const scopeNode: ESTree.Node = variableDeclarationNode.kind === 'var'\n            ? lexicalScopeNode\n            : parentNode;\n\n        this.storeVariableNames(variableDeclarationNode, lexicalScopeNode, isGlobalDeclaration);\n\n        // check for cached identifiers for current scope node. If exist - loop through them.\n        if (this.replaceableIdentifiers.has(scopeNode)) {\n            this.replaceScopeCachedIdentifiers(variableDeclarationNode, lexicalScopeNode, scopeNode);\n        } else {\n            this.replaceScopeIdentifiers(scopeNode, lexicalScopeNode);\n        }\n\n        return variableDeclarationNode;\n    }\n\n    /**\n     * @param {VariableDeclaration} variableDeclarationNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     * @param {boolean} isGlobalDeclaration\n     */\n    private storeVariableNames (\n        variableDeclarationNode: ESTree.VariableDeclaration,\n        lexicalScopeNode: TNodeWithLexicalScope,\n        isGlobalDeclaration: boolean\n    ): void {\n        this.traverseDeclarationIdentifiers(variableDeclarationNode, (identifierNode: ESTree.Identifier) => {\n            if (isGlobalDeclaration) {\n                this.identifierObfuscatingReplacer.storeGlobalName(identifierNode.name, lexicalScopeNode);\n            } else {\n                this.identifierObfuscatingReplacer.storeLocalName(identifierNode.name, lexicalScopeNode);\n            }\n        });\n    }\n\n    /**\n     * @param {VariableDeclaration} variableDeclarationNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     * @param {Node} scopeNode\n     */\n    private replaceScopeCachedIdentifiers (\n        variableDeclarationNode: ESTree.VariableDeclaration,\n        lexicalScopeNode: TNodeWithLexicalScope,\n        scopeNode: ESTree.Node\n    ): void {\n        const cachedReplaceableIdentifiersNamesMap: TReplaceableIdentifiersNames =\n            <TReplaceableIdentifiersNames>this.replaceableIdentifiers.get(scopeNode);\n\n        const identifierNames: string[] = [];\n\n        this.traverseDeclarationIdentifiers(variableDeclarationNode, (identifierNode: ESTree.Identifier) => {\n            identifierNames.push(identifierNode.name);\n        });\n\n        identifierNames.forEach((identifierName: string) => {\n            const cachedReplaceableIdentifiers: ESTree.Identifier[] | undefined =\n                cachedReplaceableIdentifiersNamesMap.get(identifierName);\n\n            if (!cachedReplaceableIdentifiers) {\n                return;\n            }\n\n            const cachedReplaceableIdentifierLength: number = cachedReplaceableIdentifiers.length;\n\n            for (let i: number = 0; i < cachedReplaceableIdentifierLength; i++) {\n                const replaceableIdentifier: ESTree.Identifier = cachedReplaceableIdentifiers[i];\n\n                if (identifierName !== replaceableIdentifier.name) {\n                    continue;\n                }\n\n                const newReplaceableIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                    .replace(replaceableIdentifier.name, lexicalScopeNode);\n\n                replaceableIdentifier.name = newReplaceableIdentifier.name;\n                NodeMetadata.set(replaceableIdentifier, { renamedIdentifier: true });\n            }\n        });\n    }\n\n    /**\n     * @param {Node} scopeNode\n     * @param {TNodeWithLexicalScope} lexicalScopeNode\n     */\n    private replaceScopeIdentifiers (scopeNode: ESTree.Node, lexicalScopeNode: TNodeWithLexicalScope): void {\n        const storedReplaceableIdentifiersNamesMap: TReplaceableIdentifiersNames = new Map();\n\n        estraverse.replace(scopeNode, {\n            enter: (node: ESTree.Node, parentNode: ESTree.Node | null): void => {\n                if (\n                    parentNode\n                    && NodeGuards.isReplaceableIdentifierNode(node, parentNode)\n                    && !NodeMetadata.isRenamedIdentifier(node)\n                ) {\n                    const newIdentifier: ESTree.Identifier = this.identifierObfuscatingReplacer\n                        .replace(node.name, lexicalScopeNode);\n                    const newIdentifierName: string = newIdentifier.name;\n\n                    if (node.name !== newIdentifierName) {\n                        node.name = newIdentifierName;\n                        NodeMetadata.set(node, { renamedIdentifier: true });\n                    } else {\n                        const storedReplaceableIdentifiers: ESTree.Identifier[] =\n                            storedReplaceableIdentifiersNamesMap.get(node.name) || [];\n\n                        storedReplaceableIdentifiers.push(node);\n                        storedReplaceableIdentifiersNamesMap.set(node.name, storedReplaceableIdentifiers);\n                    }\n                }\n            }\n        });\n\n        this.replaceableIdentifiers.set(scopeNode, storedReplaceableIdentifiersNamesMap);\n    }\n\n    /**\n     * @param {VariableDeclaration} variableDeclarationNode\n     * @param {(identifier: Identifier) => void} callback\n     */\n    private traverseDeclarationIdentifiers (\n        variableDeclarationNode: ESTree.VariableDeclaration,\n        callback: (identifier: ESTree.Identifier) => void\n    ): void {\n        variableDeclarationNode.declarations\n            .forEach((declarationNode: ESTree.VariableDeclarator) => {\n                estraverse.traverse(declarationNode.id, {\n                    enter: (node: ESTree.Node) => {\n                        if (NodeGuards.isPropertyNode(node)) {\n                            return estraverse.VisitorOption.Skip;\n                        }\n\n                        if (NodeGuards.isIdentifierNode(node)) {\n                            callback(node);\n                        }\n                    }\n                });\n            });\n    }\n}\n","import { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IOptionsNormalizer } from '../../../interfaces/options/IOptionsNormalizer';\n\nimport { Options } from '../../../options/Options';\nimport { OptionsNormalizer } from '../../../options/OptionsNormalizer';\n\nexport const optionsModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    bind<IOptions>(ServiceIdentifiers.IOptions)\n        .to(Options)\n        .inSingletonScope();\n\n    bind<IOptionsNormalizer>(ServiceIdentifiers.IOptionsNormalizer)\n        .to(OptionsNormalizer)\n        .inSingletonScope();\n});\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport {\n    ArrayUnique,\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNumber,\n    IsString,\n    IsUrl,\n    Max,\n    Min,\n    ValidateIf,\n    validateSync,\n    ValidationError,\n    ValidatorOptions\n} from 'class-validator';\n\nimport { TInputOptions } from '../types/options/TInputOptions';\nimport { TStringArrayEncoding } from '../types/options/TStringArrayEncoding';\n\nimport { IOptions } from '../interfaces/options/IOptions';\nimport { IOptionsNormalizer } from '../interfaces/options/IOptionsNormalizer';\n\nimport { IdentifierNamesGenerator } from '../enums/generators/identifier-names-generators/IdentifierNamesGenerator';\nimport { ObfuscationTarget } from '../enums/ObfuscationTarget';\nimport { SourceMapMode } from '../enums/source-map/SourceMapMode';\nimport { StringArrayEncoding } from '../enums/StringArrayEncoding';\n\nimport { DEFAULT_PRESET } from './presets/Default';\n\nimport { ValidationErrorsFormatter } from './ValidationErrorsFormatter';\n\n@injectable()\nexport class Options implements IOptions {\n    /**\n     * @type {ValidatorOptions}\n     */\n    private static readonly validatorOptions: ValidatorOptions = {\n        validationError: {\n            target: false\n        }\n    };\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly compact!: boolean;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly controlFlowFlattening!: boolean;\n\n    /**\n     * @type {boolean}\n     */\n    @IsNumber()\n    @Min(0)\n    @Max(1)\n    public readonly controlFlowFlatteningThreshold!: number;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly deadCodeInjection!: boolean;\n\n    /**\n     * @type {number}\n     */\n    @IsNumber()\n    public readonly deadCodeInjectionThreshold!: number;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly debugProtection!: boolean;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly debugProtectionInterval!: boolean;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly disableConsoleOutput!: boolean;\n\n    /**\n     * @type {string[]}\n     */\n    @IsArray()\n    @ArrayUnique()\n    @IsString({\n        each: true\n    })\n    public readonly domainLock!: string[];\n\n    /**\n     * @type {IdentifierNamesGenerator}\n     */\n    @IsIn([\n        IdentifierNamesGenerator.HexadecimalIdentifierNamesGenerator,\n        IdentifierNamesGenerator.MangledIdentifierNamesGenerator\n    ])\n    public readonly identifierNamesGenerator!: IdentifierNamesGenerator;\n\n    /**\n     * @type {string}\n     */\n    @IsString()\n    public readonly identifiersPrefix!: string;\n\n    /**\n     * @type {string}\n     */\n    @IsString()\n    public readonly inputFileName!: string;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly log!: boolean;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly renameGlobals!: boolean;\n\n    /**\n     * @type {string[]}\n     */\n    @IsArray()\n    @ArrayUnique()\n    @IsString({\n        each: true\n    })\n    public readonly reservedNames!: string[];\n\n    /**\n     * @type {string[]}\n     */\n    @IsArray()\n    @ArrayUnique()\n    @IsString({\n        each: true\n    })\n    public readonly reservedStrings!: string[];\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly rotateStringArray!: boolean;\n\n    /**\n     * @type {number}\n     */\n    @IsNumber()\n    public readonly seed!: number;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly selfDefending!: boolean;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly sourceMap!: boolean;\n\n    /**\n     * @type {string}\n     */\n    @IsString()\n    @ValidateIf((options: IOptions) => Boolean(options.sourceMapBaseUrl))\n    @IsUrl({\n        require_protocol: true,\n        require_tld: false,\n        require_valid_protocol: true\n    })\n    public readonly sourceMapBaseUrl!: string;\n\n    /**\n     * @type {string}\n     */\n    @IsString()\n    public readonly sourceMapFileName!: string;\n\n    /**\n     * @type {SourceMapMode}\n     */\n    @IsIn([SourceMapMode.Inline, SourceMapMode.Separate])\n    public readonly sourceMapMode!: SourceMapMode;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly stringArray!: boolean;\n\n    /**\n     * @type {TStringArrayEncoding}\n     */\n    @IsIn([true, false, StringArrayEncoding.Base64, StringArrayEncoding.Rc4])\n    public readonly stringArrayEncoding!: TStringArrayEncoding;\n\n    /**\n     * @type {number}\n     */\n    @IsNumber()\n    @Min(0)\n    @Max(1)\n    public readonly stringArrayThreshold!: number;\n\n    /**\n     * @type {ObfuscationTarget}\n     */\n    @IsIn([ObfuscationTarget.Browser, ObfuscationTarget.BrowserNoEval, ObfuscationTarget.Node])\n    public readonly target!: ObfuscationTarget;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly transformObjectKeys!: boolean;\n\n    /**\n     * @type {boolean}\n     */\n    @IsBoolean()\n    public readonly unicodeEscapeSequence!: boolean;\n\n    /**\n     * @param {TInputOptions} inputOptions\n     * @param {IOptionsNormalizer} optionsNormalizer\n     */\n    constructor (\n        @inject(ServiceIdentifiers.TInputOptions) inputOptions: TInputOptions,\n        @inject(ServiceIdentifiers.IOptionsNormalizer) optionsNormalizer: IOptionsNormalizer\n    ) {\n        Object.assign(this, DEFAULT_PRESET, inputOptions);\n\n        const errors: ValidationError[] = validateSync(this, Options.validatorOptions);\n\n        if (errors.length) {\n            throw new ReferenceError(`Validation failed. errors:\\n${ValidationErrorsFormatter.format(errors)}`);\n        }\n\n        Object.assign(this, optionsNormalizer.normalize(this));\n    }\n}\n","module.exports = require(\"class-validator\");","import { ValidationError } from 'class-validator';\n\nimport { TObject } from '../types/TObject';\n\nexport class ValidationErrorsFormatter {\n    /**\n     * @param {ValidationError[]} errors\n     * @returns {string}\n     */\n    public static format (errors: ValidationError[]): string {\n        return errors\n            .reduce(\n                (errorMessages: string[], error: ValidationError) => ([\n                    ...errorMessages,\n                    ValidationErrorsFormatter.formatWithNestedConstraints(error)\n                ]),\n                []\n            )\n            .join('\\n');\n    }\n\n    /**\n     * @param {ValidationError} error\n     * @returns {string}\n     */\n    private static formatWithNestedConstraints (error: ValidationError): string {\n        const constraints: TObject<string> = error.constraints;\n\n        const rootError: string = `\\`${error.property}\\` errors:\\n`;\n        const nestedErrors: string = Object\n            .keys(constraints)\n            .map((constraint: string) => `    - ${constraints[constraint]}\\n`)\n            .join();\n\n        return `${rootError}${nestedErrors}`;\n    }\n}\n","import { injectable } from 'inversify';\n\nimport { TOptionsNormalizerRule } from '../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../interfaces/options/IOptions';\nimport { IOptionsNormalizer } from '../interfaces/options/IOptionsNormalizer';\n\nimport { ControlFlowFlatteningThresholdRule } from './normalizer-rules/ControlFlowFlatteningThresholdRule';\nimport { DeadCodeInjectionRule } from './normalizer-rules/DeadCodeInjectionRule';\nimport { DeadCodeInjectionThresholdRule } from './normalizer-rules/DeadCodeInjectionThresholdRule';\nimport { DomainLockRule } from './normalizer-rules/DomainLockRule';\nimport { InputFileNameRule } from './normalizer-rules/InputFileNameRule';\nimport { SelfDefendingRule } from './normalizer-rules/SelfDefendingRule';\nimport { SourceMapBaseUrlRule } from './normalizer-rules/SourceMapBaseUrlRule';\nimport { SourceMapFileNameRule } from './normalizer-rules/SourceMapFileNameRule';\nimport { StringArrayRule } from './normalizer-rules/StringArrayRule';\nimport { StringArrayEncodingRule } from './normalizer-rules/StringArrayEncodingRule';\nimport { StringArrayThresholdRule } from './normalizer-rules/StringArrayThresholdRule';\n\n@injectable()\nexport class OptionsNormalizer implements IOptionsNormalizer {\n    /**\n     * @type {TOptionsNormalizerRule[]}\n     */\n    private static readonly normalizerRules: TOptionsNormalizerRule[] = [\n        ControlFlowFlatteningThresholdRule,\n        DeadCodeInjectionRule,\n        DeadCodeInjectionThresholdRule,\n        DomainLockRule,\n        InputFileNameRule,\n        SelfDefendingRule,\n        SourceMapBaseUrlRule,\n        SourceMapFileNameRule,\n        StringArrayRule,\n        StringArrayEncodingRule,\n        StringArrayThresholdRule,\n    ];\n\n    /**\n     * @param {IOptions} options\n     * @returns {IOptions}\n     */\n    public normalize (options: IOptions): IOptions {\n        let normalizedOptions: IOptions = {\n            ...options\n        };\n\n        for (const normalizerRule of OptionsNormalizer.normalizerRules) {\n            normalizedOptions = normalizerRule(normalizedOptions);\n        }\n\n        return normalizedOptions;\n    }\n}\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const ControlFlowFlatteningThresholdRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    if (options.controlFlowFlatteningThreshold === 0) {\n        options = {\n            ...options,\n            controlFlowFlattening: false,\n            controlFlowFlatteningThreshold: 0\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\nimport { DEFAULT_PRESET } from '../presets/Default';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const DeadCodeInjectionRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    if (options.deadCodeInjection) {\n        options = {\n            ...options,\n            deadCodeInjection: true,\n            stringArray: true\n        };\n\n        if (!options.stringArrayThreshold) {\n            options = {\n                ...options,\n                stringArray: true,\n                stringArrayThreshold: <number>DEFAULT_PRESET.stringArrayThreshold\n            };\n        }\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const DeadCodeInjectionThresholdRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    if (options.deadCodeInjectionThreshold === 0) {\n        options = {\n            ...options,\n            deadCodeInjection: false,\n            deadCodeInjectionThreshold: 0\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\nimport { Utils } from '../../utils/Utils';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const DomainLockRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    if (options.domainLock.length) {\n        const normalizedDomains: string[] = [];\n\n        for (const domain of options.domainLock) {\n            normalizedDomains.push(Utils.extractDomainFrom(domain));\n        }\n\n        options = {\n            ...options,\n            domainLock: normalizedDomains\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const InputFileNameRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    let { inputFileName } = options;\n\n    if (inputFileName) {\n        inputFileName = inputFileName\n            .replace(/^\\/+/, '')\n            .split('.')\n            .slice(0, -1)\n            .join('.') || inputFileName;\n\n        options = {\n            ...options,\n            inputFileName: `${inputFileName}.js`\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const SelfDefendingRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    if (options.selfDefending) {\n        options = {\n            ...options,\n            compact: true,\n            selfDefending: true\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const SourceMapBaseUrlRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    const { sourceMapBaseUrl }: { sourceMapBaseUrl: string } = options;\n\n    if (!options.sourceMapFileName) {\n        options = {\n            ...options,\n            sourceMapBaseUrl: ''\n        };\n\n        return options;\n    }\n\n    if (sourceMapBaseUrl && !sourceMapBaseUrl.endsWith('/')) {\n        options = {\n            ...options,\n            sourceMapBaseUrl: `${sourceMapBaseUrl}/`\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const SourceMapFileNameRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    let { sourceMapFileName }: { sourceMapFileName: string } = options;\n\n    if (sourceMapFileName) {\n        sourceMapFileName = sourceMapFileName\n            .replace(/^\\/+/, '')\n            .split('.')[0];\n\n        options = {\n            ...options,\n            sourceMapFileName: `${sourceMapFileName}.js.map`\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const StringArrayRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    if (!options.stringArray) {\n        options = {\n            ...options,\n            rotateStringArray: false,\n            stringArray: false,\n            stringArrayEncoding: false,\n            stringArrayThreshold: 0\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\nimport { StringArrayEncoding } from '../../enums/StringArrayEncoding';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const StringArrayEncodingRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    if (options.stringArrayEncoding === true) {\n        options = {\n            ...options,\n            stringArrayEncoding: StringArrayEncoding.Base64\n        };\n    }\n\n    return options;\n};\n","import { TOptionsNormalizerRule } from '../../types/options/TOptionsNormalizerRule';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\n\n/**\n * @param {IOptions} options\n * @returns {IOptions}\n */\nexport const StringArrayThresholdRule: TOptionsNormalizerRule = (options: IOptions): IOptions => {\n    if (options.stringArrayThreshold === 0) {\n        options = {\n            ...options,\n            rotateStringArray: false,\n            stringArray: false,\n            stringArrayEncoding: false,\n            stringArrayThreshold: 0\n        };\n    }\n\n    return options;\n};\n","import { InversifyContainerFacade } from '../../InversifyContainerFacade';\nimport { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { INodeTransformer } from '../../../interfaces/node-transformers/INodeTransformer';\nimport { IObfuscatingGuard } from '../../../interfaces/node-transformers/preparing-transformers/obfuscating-guards/IObfuscatingGuard';\n\nimport { NodeTransformer } from '../../../enums/node-transformers/NodeTransformer';\nimport { ObfuscatingGuard } from '../../../enums/node-transformers/preparing-transformers/obfuscating-guards/ObfuscatingGuard';\n\nimport { BlackListObfuscatingGuard } from '../../../node-transformers/preparing-transformers/obfuscating-guards/BlackListObfuscatingGuard';\nimport { CommentsTransformer } from '../../../node-transformers/preparing-transformers/CommentsTransformer';\nimport { ConditionalCommentObfuscatingGuard } from '../../../node-transformers/preparing-transformers/obfuscating-guards/ConditionalCommentObfuscatingGuard';\nimport { CustomNodesTransformer } from '../../../node-transformers/preparing-transformers/CustomNodesTransformer';\nimport { EvalCallExpressionTransformer } from '../../../node-transformers/preparing-transformers/EvaCallExpressionTransformer';\nimport { MetadataTransformer } from '../../../node-transformers/preparing-transformers/MetadataTransformer';\nimport { ObfuscatingGuardsTransformer } from '../../../node-transformers/preparing-transformers/ObfuscatingGuardsTransformer';\nimport { ParentificationTransformer } from '../../../node-transformers/preparing-transformers/ParentificationTransformer';\n\nexport const preparingTransformersModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // preparing transformers\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(CommentsTransformer)\n        .whenTargetNamed(NodeTransformer.CommentsTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(CustomNodesTransformer)\n        .whenTargetNamed(NodeTransformer.CustomNodesTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(EvalCallExpressionTransformer)\n        .whenTargetNamed(NodeTransformer.EvalCallExpressionTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(MetadataTransformer)\n        .whenTargetNamed(NodeTransformer.MetadataTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(ObfuscatingGuardsTransformer)\n        .whenTargetNamed(NodeTransformer.ObfuscatingGuardsTransformer);\n\n    bind<INodeTransformer>(ServiceIdentifiers.INodeTransformer)\n        .to(ParentificationTransformer)\n        .whenTargetNamed(NodeTransformer.ParentificationTransformer);\n\n    // obfuscating guards\n    bind<IObfuscatingGuard>(ServiceIdentifiers.INodeGuard)\n        .to(BlackListObfuscatingGuard)\n        .inSingletonScope()\n        .whenTargetNamed(ObfuscatingGuard.BlackListNodeGuard);\n\n    bind<IObfuscatingGuard>(ServiceIdentifiers.INodeGuard)\n        .to(ConditionalCommentObfuscatingGuard)\n        .inSingletonScope()\n        .whenTargetNamed(ObfuscatingGuard.ConditionalCommentNodeGuard);\n\n    // obfuscating guards factory\n    bind<IObfuscatingGuard>(ServiceIdentifiers.Factory__INodeGuard)\n        .toFactory<IObfuscatingGuard>(InversifyContainerFacade\n            .getCacheFactory<ObfuscatingGuard, IObfuscatingGuard>(\n                ServiceIdentifiers.INodeGuard\n            ));\n});\n","import { injectable } from 'inversify';\n\nimport * as ESTree from 'estree';\n\nimport { TNodeGuard } from '../../../types/node/TNodeGuard';\n\nimport { IObfuscatingGuard } from '../../../interfaces/node-transformers/preparing-transformers/obfuscating-guards/IObfuscatingGuard';\n\nimport { NodeGuards } from '../../../node/NodeGuards';\n\n@injectable()\nexport class BlackListObfuscatingGuard implements IObfuscatingGuard {\n    /**\n     * @type {((node: Node) => boolean)[]}\n     */\n    private static readonly blackListGuards: TNodeGuard[] = [\n        NodeGuards.isUseStrictOperator\n    ];\n\n    /**\n     * @type {number}\n     */\n    private readonly blackListGuardsLength: number;\n\n    constructor () {\n        this.blackListGuardsLength = BlackListObfuscatingGuard.blackListGuards.length;\n    }\n\n    /**\n     * @returns {boolean}\n     * @param node\n     */\n    public check (node: ESTree.Node): boolean {\n        for (let i: number = 0; i < this.blackListGuardsLength; i++) {\n            if (BlackListObfuscatingGuard.blackListGuards[i](node)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\n\n@injectable()\nexport class CommentsTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {string[]}\n     */\n    private static readonly preservedWords: string[] = [\n        '@license',\n        '@preserve'\n    ];\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Preparing:\n                return {\n                    leave: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && NodeGuards.isNodeWithComments(node)) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * Removes all comments from node except comments that contain\n     * `@license`, `@preserve` or `javascript-obfuscator` words\n     *\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {NodeGuards}\n     */\n    public transformNode (node: ESTree.Node, parentNode: ESTree.Node): ESTree.Node {\n        if (node.leadingComments) {\n            node.leadingComments = this.transformComments(node.leadingComments);\n        }\n\n        if (node.trailingComments) {\n            node.trailingComments = this.transformComments(node.trailingComments);\n        }\n\n        return node;\n    }\n\n    /**\n     * @param {Comment[]} comments\n     * @returns {Comment[]}\n     */\n    private transformComments (comments: ESTree.Comment[]): ESTree.Comment[] {\n        return comments.filter((comment: ESTree.Comment) =>\n            CommentsTransformer.preservedWords\n                .some((preservedWord: string) => comment.value.includes(preservedWord))\n        );\n    }\n}\n","import { injectable } from 'inversify';\n\nimport * as ESTree from 'estree';\n\nimport { IObfuscatingGuard } from '../../../interfaces/node-transformers/preparing-transformers/obfuscating-guards/IObfuscatingGuard';\n\nimport { NodeGuards } from '../../../node/NodeGuards';\n\n@injectable()\nexport class ConditionalCommentObfuscatingGuard implements IObfuscatingGuard {\n    /**\n     * @type {RegExp}\n     */\n    private static readonly obfuscationEnableCommentRegExp: RegExp = new RegExp('javascript-obfuscator *: *enable');\n\n    /**\n     * @type {RegExp}\n     */\n    private static readonly obfuscationDisableCommentRegExp: RegExp = new RegExp('javascript-obfuscator *: *disable');\n\n    /**\n     * @type {boolean}\n     */\n    private obfuscationAllowedForCurrentNode: boolean = true;\n\n    /**\n     * @type {boolean}\n     */\n    private obfuscationAllowedForNextNode: boolean | null = null;\n\n    /**\n     * @returns {boolean}\n     * @param node\n     */\n    public check (node: ESTree.Node): boolean {\n        if (this.obfuscationAllowedForNextNode) {\n            this.obfuscationAllowedForCurrentNode = this.obfuscationAllowedForNextNode;\n            this.obfuscationAllowedForNextNode = null;\n        }\n\n        if (!NodeGuards.isNodeWithComments(node)) {\n            return this.obfuscationAllowedForCurrentNode;\n        }\n\n        const leadingComments: ESTree.Comment[] | undefined = node.leadingComments;\n        const trailingComments: ESTree.Comment[] | undefined = node.trailingComments;\n\n        if (leadingComments) {\n            this.obfuscationAllowedForCurrentNode = this.checkComments(leadingComments);\n        }\n\n        if (trailingComments) {\n            this.obfuscationAllowedForNextNode = this.checkComments(trailingComments);\n        }\n\n        return this.obfuscationAllowedForCurrentNode;\n    }\n\n    /**\n     * @param {Comment[]} comments\n     * @returns {boolean}\n     */\n    private checkComments (comments: ESTree.Comment[]): boolean {\n        const commentsLength: number = comments.length;\n\n        let obfuscationAllowed: boolean = this.obfuscationAllowedForCurrentNode;\n\n        for (let i: number = 0; i < commentsLength; i++) {\n            const comment: ESTree.Comment = comments[i];\n\n            if (ConditionalCommentObfuscatingGuard.obfuscationEnableCommentRegExp.test(comment.value)) {\n                obfuscationAllowed = true;\n\n                continue;\n            }\n\n            if (ConditionalCommentObfuscatingGuard.obfuscationDisableCommentRegExp.test(comment.value)) {\n                obfuscationAllowed = false;\n            }\n        }\n\n        return obfuscationAllowed;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TCustomNodeGroupStorage } from '../../types/storages/TCustomNodeGroupStorage';\n\nimport { ICustomNodeGroup } from '../../interfaces/custom-nodes/ICustomNodeGroup';\nimport { IObfuscationEventEmitter } from '../../interfaces/event-emitters/IObfuscationEventEmitter';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IStackTraceAnalyzer } from '../../interfaces/analyzers/stack-trace-analyzer/IStackTraceAnalyzer';\nimport { IStackTraceData } from '../../interfaces/analyzers/stack-trace-analyzer/IStackTraceData';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { ObfuscationEvent } from '../../enums/event-emitters/ObfuscationEvent';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\n\n/**\n * Analyzing AST-tree and appending custom nodes\n */\n@injectable()\nexport class CustomNodesTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {TCustomNodeGroupStorage}\n     */\n    private readonly customNodeGroupStorage: TCustomNodeGroupStorage;\n\n    /**\n     * @type {IObfuscationEventEmitter}\n     */\n    private readonly obfuscationEventEmitter: IObfuscationEventEmitter;\n\n    /**\n     * @type {IStackTraceAnalyzer}\n     */\n    private readonly stackTraceAnalyzer: IStackTraceAnalyzer;\n\n    /**\n     * @type {IStackTraceData[]}\n     */\n    private stackTraceData: IStackTraceData[] = [];\n\n    /**\n     * @param {IStackTraceAnalyzer} stackTraceAnalyzer\n     * @param {IObfuscationEventEmitter} obfuscationEventEmitter\n     * @param {TCustomNodeGroupStorage} customNodeGroupStorage\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IStackTraceAnalyzer) stackTraceAnalyzer: IStackTraceAnalyzer,\n        @inject(ServiceIdentifiers.IObfuscationEventEmitter) obfuscationEventEmitter: IObfuscationEventEmitter,\n        @inject(ServiceIdentifiers.TCustomNodeGroupStorage) customNodeGroupStorage: TCustomNodeGroupStorage,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.stackTraceAnalyzer = stackTraceAnalyzer;\n        this.obfuscationEventEmitter = obfuscationEventEmitter;\n        this.customNodeGroupStorage = customNodeGroupStorage;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Preparing:\n                return {\n                    leave: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (NodeGuards.isProgramNode(node)) {\n                            this.analyzeNode(node, parentNode);\n                            this.appendCustomNodesBeforeObfuscation(node, parentNode);\n\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            case TransformationStage.Finalizing:\n                return {\n                    leave: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (NodeGuards.isProgramNode(node)) {\n                            this.appendCustomNodesAfterObfuscation(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {Program} node\n     * @param {Node | null} parentNode\n     */\n    public analyzeNode (node: ESTree.Program, parentNode: ESTree.Node | null): void {\n        this.stackTraceData = this.stackTraceAnalyzer.analyze(node);\n    }\n\n    /**\n     * @param {Program} node\n     * @param {Node | null} parentNode\n     * @returns {Node}\n     */\n    public transformNode (node: ESTree.Program, parentNode: ESTree.Node | null): ESTree.Node {\n        return node;\n    }\n\n    /**\n     * @param {Program} node\n     * @param {Node | null} parentNode\n     */\n    private appendCustomNodesBeforeObfuscation (node: ESTree.Program, parentNode: ESTree.Node | null): void {\n        this.customNodeGroupStorage\n            .getStorage()\n            .forEach((customNodeGroup: ICustomNodeGroup) => {\n                customNodeGroup.initialize();\n\n                this.obfuscationEventEmitter.once(\n                    customNodeGroup.getAppendEvent(),\n                    customNodeGroup.appendCustomNodes.bind(customNodeGroup)\n                );\n            });\n\n        this.obfuscationEventEmitter.emit(ObfuscationEvent.BeforeObfuscation, node, this.stackTraceData);\n    }\n\n    /**\n     * @param {Program} node\n     * @param {Node | null} parentNode\n     */\n    private appendCustomNodesAfterObfuscation (node: ESTree.Program, parentNode: ESTree.Node | null): void {\n        this.obfuscationEventEmitter.emit(ObfuscationEvent.AfterObfuscation, node, this.stackTraceData);\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\nimport jsStringEscape from 'js-string-escape';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeFactory } from '../../node/NodeFactory';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n@injectable()\nexport class EvalCallExpressionTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {Set <FunctionExpression>}\n     */\n    private readonly evalRootAstHostNodeSet: Set <ESTree.FunctionExpression> = new Set();\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {Expression | SpreadElement} node\n     * @returns {string | null}\n     */\n    private static extractEvalStringFromCallExpressionArgument (node: ESTree.Expression | ESTree.SpreadElement): string | null {\n        if (NodeGuards.isLiteralNode(node)) {\n            return EvalCallExpressionTransformer\n                .extractEvalStringFromLiteralNode(node);\n        }\n\n        if (NodeGuards.isTemplateLiteralNode(node)) {\n            return EvalCallExpressionTransformer\n                .extractEvalStringFromTemplateLiteralNode(node);\n        }\n\n        return null;\n    }\n\n    /**\n     * @param {Literal} node\n     * @returns {string | null}\n     */\n    private static extractEvalStringFromLiteralNode (node: ESTree.Literal): string | null {\n        return typeof node.value === 'string' ? node.value : null;\n    }\n\n    /**\n     * @param {TemplateLiteral} node\n     * @returns {string | null}\n     */\n    private static extractEvalStringFromTemplateLiteralNode (node: ESTree.TemplateLiteral): string | null {\n        const quasis: ESTree.TemplateElement[] = node.quasis;\n        const allowedQuasisLength: number = 1;\n\n        if (quasis.length !== allowedQuasisLength || node.expressions.length) {\n            return null;\n        }\n\n        return quasis[0].value.cooked;\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Preparing:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (\n                            parentNode\n                            && NodeGuards.isCallExpressionNode(node)\n                            && NodeGuards.isIdentifierNode(node.callee)\n                            && node.callee.name === 'eval'\n                        ) {\n                            return this.transformNode(node, parentNode);\n                        }\n                    }\n                };\n\n            case TransformationStage.Finalizing:\n                if (!this.evalRootAstHostNodeSet.size) {\n                    return null;\n                }\n\n                return {\n                    leave: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        if (parentNode && this.isEvalRootAstHostNode(node)) {\n                            return this.restoreNode(node, parentNode);\n                        }\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {CallExpression} callExpressionNode\n     * @param {Node} parentNode\n     * @returns {Node}\n     */\n    public transformNode (callExpressionNode: ESTree.CallExpression, parentNode: ESTree.Node): ESTree.Node {\n        const callExpressionFirstArgument: ESTree.Expression | ESTree.SpreadElement = callExpressionNode.arguments[0];\n\n        if (!callExpressionFirstArgument) {\n            return callExpressionNode;\n        }\n\n        const evalString: string | null = EvalCallExpressionTransformer\n            .extractEvalStringFromCallExpressionArgument(callExpressionFirstArgument);\n\n        if (!evalString) {\n            return callExpressionNode;\n        }\n\n        let ast: ESTree.Statement[];\n\n        // wrapping into try-catch to prevent parsing of incorrect `eval` string\n        try {\n            ast = NodeUtils.convertCodeToStructure(evalString);\n        } catch {\n            return callExpressionNode;\n        }\n\n        /**\n         * we should wrap AST-tree into the parent function expression node (ast root host node).\n         * This function expression node will help to correctly transform AST-tree.\n         */\n        const evalRootAstHostNode: ESTree.FunctionExpression = NodeFactory\n            .functionExpressionNode([], NodeFactory.blockStatementNode(ast));\n\n        /**\n         * we should store that host node and then extract AST-tree on the `finalizing` stage\n         */\n        this.evalRootAstHostNodeSet.add(evalRootAstHostNode);\n\n        return evalRootAstHostNode;\n    }\n\n    /**\n     * @param {FunctionExpression} evalRootAstHostNode\n     * @param {Node} parentNode\n     * @returns {Node}\n     */\n    public restoreNode (evalRootAstHostNode: ESTree.FunctionExpression, parentNode: ESTree.Node): ESTree.Node {\n        const targetAst: ESTree.Statement[] = evalRootAstHostNode.body.body;\n        const obfuscatedCode: string = NodeUtils.convertStructureToCode(targetAst);\n\n        return NodeFactory.callExpressionNode(\n            NodeFactory.identifierNode('eval'),\n            [\n                NodeFactory.literalNode(jsStringEscape(obfuscatedCode))\n            ]\n        );\n    }\n\n    /**\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    private isEvalRootAstHostNode (node: ESTree.Node): node is ESTree.FunctionExpression {\n        return NodeGuards.isFunctionExpressionNode(node) && this.evalRootAstHostNodeSet.has(node);\n    }\n}\n","module.exports = require(\"js-string-escape\");","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeGuards } from '../../node/NodeGuards';\nimport { NodeMetadata } from '../../node/NodeMetadata';\n\n/**\n * Adds metadata properties to each node\n */\n@injectable()\nexport class MetadataTransformer extends AbstractNodeTransformer {\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Preparing:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        return this.transformNode(node, parentNode);\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {Node}\n     */\n    public transformNode (node: ESTree.Node, parentNode: ESTree.Node | null): ESTree.Node {\n        NodeMetadata.set(node, { ignoredNode: false });\n\n        if (NodeGuards.isIdentifierNode(node)) {\n            NodeMetadata.set(node, { renamedIdentifier: false });\n        }\n\n        if (NodeGuards.isLiteralNode(node)) {\n            NodeMetadata.set(node, { replacedLiteral: false });\n        }\n\n        return node;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { TObfuscatingGuardFactory } from '../../types/container/node-transformers/TObfuscatingGuardFactory';\n\nimport { IObfuscatingGuard } from '../../interfaces/node-transformers/preparing-transformers/obfuscating-guards/IObfuscatingGuard';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { ObfuscatingGuard } from '../../enums/node-transformers/preparing-transformers/obfuscating-guards/ObfuscatingGuard';\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeMetadata } from '../../node/NodeMetadata';\n\n/**\n * Adds `ignoredNode` properties to each node\n */\n@injectable()\nexport class ObfuscatingGuardsTransformer extends AbstractNodeTransformer {\n    /**\n     * @type {ObfuscatingGuard[]}\n     */\n    private static readonly obfuscatingGuardsList: ObfuscatingGuard[] = [\n        ObfuscatingGuard.BlackListNodeGuard,\n        ObfuscatingGuard.ConditionalCommentNodeGuard\n    ];\n\n    /**\n     * @type {IObfuscatingGuard[]}\n     */\n    private readonly obfuscatingGuards: IObfuscatingGuard[];\n\n    /**\n     * @param {TObfuscatingGuardFactory} obfuscatingGuardFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__INodeGuard) obfuscatingGuardFactory: TObfuscatingGuardFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.obfuscatingGuards = ObfuscatingGuardsTransformer.obfuscatingGuardsList.map(obfuscatingGuardFactory);\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Preparing:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        return this.transformNode(node, parentNode);\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {Node}\n     */\n    public transformNode (node: ESTree.Node, parentNode: ESTree.Node | null): ESTree.Node {\n        const obfuscationAllowed: boolean = this.obfuscatingGuards\n            .every((nodeGuard: IObfuscatingGuard) => nodeGuard.check(node));\n\n        NodeMetadata.set(node, {\n            ignoredNode: !obfuscationAllowed\n        });\n\n        return node;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport * as ESTree from 'estree';\n\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\nimport { IVisitor } from '../../interfaces/node-transformers/IVisitor';\n\nimport { TransformationStage } from '../../enums/node-transformers/TransformationStage';\n\nimport { AbstractNodeTransformer } from '../AbstractNodeTransformer';\nimport { NodeUtils } from '../../node/NodeUtils';\n\n/**\n * Adds `parentNode` properties to each node\n */\n@injectable()\nexport class ParentificationTransformer extends AbstractNodeTransformer {\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n\n    /**\n     * @param {TransformationStage} transformationStage\n     * @returns {IVisitor | null}\n     */\n    public getVisitor (transformationStage: TransformationStage): IVisitor | null {\n        switch (transformationStage) {\n            case TransformationStage.Preparing:\n                return {\n                    enter: (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n                        return this.transformNode(node, parentNode);\n                    }\n                };\n\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * @param {Node} node\n     * @param {Node} parentNode\n     * @returns {Node}\n     */\n    public transformNode (node: ESTree.Node, parentNode: ESTree.Node | null): ESTree.Node {\n        return NodeUtils.parentizeNode(node, parentNode);\n    }\n}\n","import { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { TControlFlowStorage } from '../../../types/storages/TControlFlowStorage';\nimport { TCustomNodeGroupStorage } from '../../../types/storages/TCustomNodeGroupStorage';\nimport { TStringArrayStorage } from '../../../types/storages/TStringArrayStorage';\n\nimport { IOptions } from '../../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { ControlFlowStorage } from '../../../storages/control-flow/ControlFlowStorage';\nimport { CustomNodeGroupStorage } from '../../../storages/custom-node-group/CustomNodeGroupStorage';\nimport { StringArrayStorage } from '../../../storages/string-array/StringArrayStorage';\n\nexport const storagesModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // storages\n    bind<TCustomNodeGroupStorage>(ServiceIdentifiers.TCustomNodeGroupStorage)\n        .to(CustomNodeGroupStorage)\n        .inSingletonScope();\n\n    bind<TStringArrayStorage>(ServiceIdentifiers.TStringArrayStorage)\n        .to(StringArrayStorage)\n        .inSingletonScope();\n\n    bind<interfaces.Newable<TControlFlowStorage>>(ServiceIdentifiers.Newable__TControlFlowStorage)\n        .toConstructor(ControlFlowStorage);\n\n    // controlFlowStorage factory\n    bind<TControlFlowStorage>(ServiceIdentifiers.Factory__TControlFlowStorage)\n        .toFactory<TControlFlowStorage>((context: interfaces.Context) => {\n            return () => {\n                const constructor: interfaces.Newable<TControlFlowStorage> = context.container\n                    .get<interfaces.Newable<TControlFlowStorage>>(ServiceIdentifiers.Newable__TControlFlowStorage);\n                const randomGenerator: IRandomGenerator = context.container\n                    .get<IRandomGenerator>(ServiceIdentifiers.IRandomGenerator);\n                const options: IOptions = context.container\n                    .get<IOptions>(ServiceIdentifiers.IOptions);\n\n                const storage: TControlFlowStorage = new constructor(randomGenerator, options);\n\n                storage.initialize();\n\n                return storage;\n            };\n        });\n});\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { ICustomNode } from '../../interfaces/custom-nodes/ICustomNode';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { MapStorage } from '../MapStorage';\n\n@injectable()\nexport class ControlFlowStorage extends MapStorage <string, ICustomNode> {\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n    }\n}\n","import { inject, injectable, postConstruct } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { TCustomNodeGroupFactory } from '../../types/container/custom-nodes/TCustomNodeGroupFactory';\n\nimport { ICustomNodeGroup } from '../../interfaces/custom-nodes/ICustomNodeGroup';\nimport { IOptions } from '../../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { CustomNodeGroup } from '../../enums/custom-nodes/CustomNodeGroup';\n\nimport { MapStorage } from '../MapStorage';\n\n@injectable()\nexport class CustomNodeGroupStorage extends MapStorage <string, ICustomNodeGroup> {\n    /**\n     * @type {CustomNodeGroup[]}\n     */\n    private static readonly customNodeGroupsList: CustomNodeGroup[] = [\n        CustomNodeGroup.ConsoleOutputCustomNodeGroup,\n        CustomNodeGroup.DebugProtectionCustomNodeGroup,\n        CustomNodeGroup.DomainLockCustomNodeGroup,\n        CustomNodeGroup.SelfDefendingCustomNodeGroup,\n        CustomNodeGroup.StringArrayCustomNodeGroup\n    ];\n\n    /**\n     * @type {TCustomNodesFactoriesFactory}\n     */\n    private readonly customNodeGroupFactory: TCustomNodeGroupFactory;\n\n    /**\n     * @param {TCustomNodeGroupFactory} customNodeGroupFactory\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__ICustomNodeGroup) customNodeGroupFactory: TCustomNodeGroupFactory,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.customNodeGroupFactory = customNodeGroupFactory;\n    }\n\n    @postConstruct()\n    public initialize (): void {\n        super.initialize();\n\n        CustomNodeGroupStorage.customNodeGroupsList.forEach((customNodeGroupName: CustomNodeGroup) => {\n            const customNodeGroup: ICustomNodeGroup = this.customNodeGroupFactory(\n                customNodeGroupName\n            );\n\n            if (!customNodeGroup) {\n                return;\n            }\n\n            this.storage.set(customNodeGroupName, customNodeGroup);\n        });\n    }\n}\n","import { inject, injectable, postConstruct } from 'inversify';\nimport { ServiceIdentifiers } from '../../container/ServiceIdentifiers';\n\nimport { IArrayUtils } from '../../interfaces/utils/IArrayUtils';\nimport { IRandomGenerator } from '../../interfaces/utils/IRandomGenerator';\n\nimport { TIdentifierNamesGeneratorFactory } from '../../types/container/generators/TIdentifierNamesGeneratorFactory';\nimport { IIdentifierNamesGenerator } from '../../interfaces/generators/identifier-names-generators/IIdentifierNamesGenerator';\nimport { IOptions } from '../../interfaces/options/IOptions';\n\nimport { ArrayStorage } from '../ArrayStorage';\n\n@injectable()\nexport class StringArrayStorage extends ArrayStorage <string> {\n    /**\n     * @type {number}\n     */\n    private static readonly stringArrayNameLength: number = 7;\n\n    /**\n     * @type {IArrayUtils}\n     */\n    private readonly arrayUtils: IArrayUtils;\n\n    /**\n     * @type {IIdentifierNamesGenerator}\n     */\n    private readonly identifierNamesGenerator: IIdentifierNamesGenerator;\n\n    /**\n     * @param {TIdentifierNamesGeneratorFactory} identifierNamesGeneratorFactory\n     * @param {IArrayUtils} arrayUtils\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__IIdentifierNamesGenerator)\n            identifierNamesGeneratorFactory: TIdentifierNamesGeneratorFactory,\n        @inject(ServiceIdentifiers.IArrayUtils) arrayUtils: IArrayUtils,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        super(randomGenerator, options);\n\n        this.identifierNamesGenerator = identifierNamesGeneratorFactory(options);\n        this.arrayUtils = arrayUtils;\n    }\n\n    @postConstruct()\n    public initialize (): void {\n        super.initialize();\n\n        const baseStringArrayName: string = this.identifierNamesGenerator\n            .generate()\n            .slice(0, StringArrayStorage.stringArrayNameLength);\n        const baseStringArrayCallsWrapperName: string = this.identifierNamesGenerator\n            .generate()\n            .slice(0, StringArrayStorage.stringArrayNameLength);\n        const stringArrayName: string = `${this.options.identifiersPrefix}${baseStringArrayName}`;\n        const stringArrayCallsWrapperName: string = `${this.options.identifiersPrefix}${baseStringArrayCallsWrapperName}`;\n\n        this.storageId = `${stringArrayName}|${stringArrayCallsWrapperName}`;\n    }\n\n    /**\n     * @param {number} rotationValue\n     */\n    public rotateArray (rotationValue: number): void {\n        this.storage = this.arrayUtils.rotate(this.storage, rotationValue);\n    }\n\n    /**\n     * @returns {string}\n     */\n    public toString (): string {\n        return this.storage.map((value: string) => {\n            return `'${value}'`;\n        }).toString();\n    }\n}\n","import { inject, injectable, postConstruct } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport { IArrayStorage } from '../interfaces/storages/IArrayStorage';\nimport { IOptions } from '../interfaces/options/IOptions';\nimport { IRandomGenerator } from '../interfaces/utils/IRandomGenerator';\n\nimport { initializable } from '../decorators/Initializable';\n\n@injectable()\nexport abstract class ArrayStorage <V> implements IArrayStorage <V> {\n    /**\n     * @type {IRandomGenerator}\n     */\n    protected readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @type {IOptions}\n     */\n    protected readonly options: IOptions;\n\n    /**\n     * @type {V[]}\n     */\n    @initializable()\n    protected storage!: V[];\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    protected storageId!: string;\n\n    /**\n     * @type {number}\n     */\n    private storageLength: number = 0;\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.randomGenerator = randomGenerator;\n        this.options = options;\n    }\n\n    @postConstruct()\n    public initialize (): void {\n        this.storage = [];\n        this.storageId = this.randomGenerator.getRandomString(6);\n    }\n\n    /**\n     * @param {number} key\n     * @returns {V}\n     */\n    public get (key: number): V {\n        const value: V | undefined = this.storage[key];\n\n        if (!value) {\n            throw new Error(`No value found in array storage with key \\`${key}\\``);\n        }\n\n        return value;\n    }\n\n    /**\n     * @param {V} value\n     * @returns {number}\n     */\n    public getKeyOf (value: V): number | null {\n        const key: number = this.storage.indexOf(value);\n\n        return key >= 0 ? key : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    public getLength (): number {\n        return this.storageLength;\n    }\n\n    /**\n     * @returns {V[]}\n     */\n    public getStorage (): V[] {\n        return this.storage;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public getStorageId (): string {\n        return this.storageId;\n    }\n\n    /**\n     * @param {this} storage\n     * @param {boolean} mergeId\n     */\n    public mergeWith (storage: this, mergeId: boolean = false): void {\n        this.storage = [...this.storage, ...storage.getStorage()];\n\n        if (mergeId) {\n            this.storageId = storage.getStorageId();\n        }\n    }\n\n    /**\n     * @param {number} key\n     * @param {V} value\n     */\n    public set (key: number, value: V): void {\n        if (key === this.storageLength) {\n            this.storage.push(value);\n        } else {\n            this.storage.splice(key, 0, value);\n        }\n\n        this.storageLength++;\n    }\n}\n","import { ContainerModule, interfaces } from 'inversify';\nimport { ServiceIdentifiers } from '../../ServiceIdentifiers';\n\nimport { IArrayUtils } from '../../../interfaces/utils/IArrayUtils';\nimport { ICryptUtils } from '../../../interfaces/utils/ICryptUtils';\nimport { IEscapeSequenceEncoder } from '../../../interfaces/utils/IEscapeSequenceEncoder';\nimport { IRandomGenerator } from '../../../interfaces/utils/IRandomGenerator';\n\nimport { ArrayUtils } from '../../../utils/ArrayUtils';\nimport { CryptUtils } from '../../../utils/CryptUtils';\nimport { EscapeSequenceEncoder } from '../../../utils/EscapeSequenceEncoder';\nimport { RandomGenerator } from '../../../utils/RandomGenerator';\n\nexport const utilsModule: interfaces.ContainerModule = new ContainerModule((bind: interfaces.Bind) => {\n    // array utils\n    bind<IArrayUtils>(ServiceIdentifiers.IArrayUtils)\n        .to(ArrayUtils)\n        .inSingletonScope();\n\n    // random generator\n    bind<IRandomGenerator>(ServiceIdentifiers.IRandomGenerator)\n        .to(RandomGenerator)\n        .inSingletonScope();\n\n    // crypt utils\n    bind<ICryptUtils>(ServiceIdentifiers.ICryptUtils)\n        .to(CryptUtils)\n        .inSingletonScope();\n\n    // escape sequence encoder\n    bind<IEscapeSequenceEncoder>(ServiceIdentifiers.IEscapeSequenceEncoder)\n        .to(EscapeSequenceEncoder)\n        .inSingletonScope();\n});\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport { IArrayUtils } from '../interfaces/utils/IArrayUtils';\nimport { IRandomGenerator } from '../interfaces/utils/IRandomGenerator';\n\n@injectable()\nexport class ArrayUtils implements IArrayUtils {\n    /**\n     * @type {IRandomGenerator}\n     */\n    private readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator\n    ) {\n        this.randomGenerator = randomGenerator;\n    }\n\n    /**\n     * @param {number} length\n     * @returns {number[]}\n     */\n    public createWithRange (length: number): number[] {\n        const range: number[] = [];\n\n        for (let i: number = 0; i < length; i++) {\n            range.push(i);\n        }\n\n        return range;\n    }\n\n    /**\n     * @param {T[]} array\n     * @param {number} times\n     * @returns {T[]}\n     */\n    public rotate <T> (array: T[], times: number): T[] {\n        if (!array.length) {\n            throw new ReferenceError(`Cannot rotate empty array.`);\n        }\n\n        if (times <= 0) {\n            return array;\n        }\n\n        const newArray: T[] = array;\n\n        let temp: T | undefined;\n\n        while (times--) {\n            temp = newArray.pop();\n\n            if (temp) {\n                newArray.unshift(temp);\n            }\n        }\n\n        return newArray;\n    }\n\n    /**\n     * @param {T[]} array\n     * @returns {T[]}\n     */\n    public shuffle <T> (array: T[]): T[] {\n        const shuffledArray: T[] = [...array];\n\n        for (let i: number = shuffledArray.length; i; i--) {\n            const j: number = Math.floor(this.randomGenerator.getMathRandom() * i);\n\n            [shuffledArray[i - 1], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i - 1]];\n        }\n\n        return shuffledArray;\n    }\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport { ICryptUtils } from '../interfaces/utils/ICryptUtils';\nimport { IRandomGenerator } from '../interfaces/utils/IRandomGenerator';\n\nimport { RandomGenerator } from './RandomGenerator';\nimport { Utils } from './Utils';\n\n@injectable()\nexport class CryptUtils implements ICryptUtils {\n    /**\n     * @type {IRandomGenerator}\n     */\n    private readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @param {IRandomGenerator} randomGenerator\n     */\n    constructor (\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator\n    ) {\n        this.randomGenerator = randomGenerator;\n    }\n\n    // tslint:disable\n    /**\n     * @param {string} string\n     * @returns {string}\n     */\n    public btoa (string: string): string {\n        const chars: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n        let output: string = '';\n\n        string = encodeURIComponent(string).replace(/%([0-9A-F]{2})/g, (match, p1) => {\n            return String.fromCharCode(parseInt(`${Utils.hexadecimalPrefix}${p1}`));\n        });\n\n        for (\n            let block: number | undefined, charCode: number, idx: number = 0, map: string = chars;\n            string.charAt(idx | 0) || (map = '=', idx % 1);\n            output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n        ) {\n            charCode = string.charCodeAt(idx += 3/4);\n\n            if (charCode > 0xFF) {\n                throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n            }\n\n            block = <number>block << 8 | charCode;\n        }\n\n        return output;\n    }\n    // tslint:enable\n\n    /**\n     * Hides string inside a other random string with larger length\n     *\n     * @param {string} str\n     * @param {number} length\n     * @returns {[string , string]}\n     */\n    public hideString (str: string, length: number): [string, string] {\n        const escapeRegExp: (s: string) => string = (s: string) =>\n            s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n        const randomMerge: (s1: string, s2: string) => string = (s1: string, s2: string): string => {\n            let i1: number = -1;\n            let i2: number = -1;\n            let result: string = '';\n\n            while (i1 < s1.length || i2 < s2.length) {\n                if (this.randomGenerator.getMathRandom() < 0.5 && i2 < s2.length) {\n                    result += s2.charAt(++i2);\n                } else {\n                    result += s1.charAt(++i1);\n                }\n            }\n\n            return result;\n        };\n\n        const randomString: string = this.randomGenerator.getRandomGenerator().string({\n            length: length,\n            pool: RandomGenerator.randomGeneratorPool\n        });\n\n        let randomStringDiff: string = randomString.replace(\n            new RegExp(`[${escapeRegExp(str)}]`, 'g'),\n            ''\n        );\n\n        const randomStringDiffArray: string[] = randomStringDiff.split('');\n\n        this.randomGenerator.getRandomGenerator().shuffle(randomStringDiffArray);\n        randomStringDiff = randomStringDiffArray.join('');\n\n        return [randomMerge(str, randomStringDiff), randomStringDiff];\n    }\n\n    // tslint:disable\n    /**\n     * RC4 symmetric cipher encryption/decryption\n     * https://gist.github.com/farhadi/2185197\n     *\n     * @param {string} string\n     * @param {string} key\n     * @returns {string}\n     */\n    public rc4 (string: string, key: string): string {\n        let s: number[] = [],\n            j: number = 0,\n            x: number,\n            result: string = '';\n\n        for (var i = 0; i < 256; i++) {\n            s[i] = i;\n        }\n\n        for (i = 0; i < 256; i++) {\n            j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;\n            x = s[i];\n            s[i] = s[j];\n            s[j] = x;\n        }\n\n        i = 0;\n        j = 0;\n\n        for (let y = 0; y < string.length; y++) {\n            i = (i + 1) % 256;\n            j = (j + s[i]) % 256;\n            x = s[i];\n            s[i] = s[j];\n            s[j] = x;\n            result += String.fromCharCode(string.charCodeAt(y) ^ s[(s[i] + s[j]) % 256]);\n        }\n\n        return result;\n    }\n    // tslint:enable\n}\n","module.exports = require(\"md5\");","module.exports = require(\"chance\");","import { injectable } from 'inversify';\n\nimport { IEscapeSequenceEncoder } from '../interfaces/utils/IEscapeSequenceEncoder';\n\n@injectable()\nexport class EscapeSequenceEncoder implements IEscapeSequenceEncoder {\n    /**\n     * @type {Map<string, string>}\n     */\n    private readonly stringsCache: Map <string, string> = new Map();\n\n    /**\n     * @param {string} string\n     * @param {boolean} encodeAllSymbols\n     * @returns {string}\n     */\n    public encode (string: string, encodeAllSymbols: boolean): string {\n        const cacheKey: string = `${string}-${String(encodeAllSymbols)}`;\n\n        if (this.stringsCache.has(cacheKey)) {\n            return <string>this.stringsCache.get(cacheKey);\n        }\n\n        const radix: number = 16;\n        const replaceRegExp: RegExp = new RegExp('[\\\\s\\\\S]', 'g');\n        const escapeSequenceRegExp: RegExp = new RegExp('[\\'\\\"\\\\\\\\\\\\s]');\n        const regExp: RegExp = new RegExp('[\\\\x00-\\\\x7F]');\n\n        let prefix: string;\n        let template: string;\n\n        const result: string = string.replace(replaceRegExp, (character: string): string => {\n            if (!encodeAllSymbols && !escapeSequenceRegExp.exec(character)) {\n                return character;\n            }\n\n            if (regExp.exec(character)) {\n                prefix = '\\\\x';\n                template = '00';\n            } else {\n                prefix = '\\\\u';\n                template = '0000';\n            }\n\n            return `${prefix}${(template + character.charCodeAt(0).toString(radix)).slice(-template.length)}`;\n        });\n\n        this.stringsCache.set(cacheKey, result);\n\n        return result;\n    }\n}\n","import { inject, injectable, } from 'inversify';\nimport { ServiceIdentifiers } from './container/ServiceIdentifiers';\n\nimport * as escodegen from 'escodegen-wallaby';\nimport * as espree from 'espree';\nimport * as ESTree from 'estree';\n\nimport { TObfuscatedCodeFactory } from './types/container/source-code/TObfuscatedCodeFactory';\n\nimport { IGeneratorOutput } from './interfaces/IGeneratorOutput';\nimport { IJavaScriptObfuscator } from './interfaces/IJavaScriptObfsucator';\nimport { ILogger } from './interfaces/logger/ILogger';\nimport { IObfuscatedCode } from './interfaces/source-code/IObfuscatedCode';\nimport { IOptions } from './interfaces/options/IOptions';\nimport { IRandomGenerator } from './interfaces/utils/IRandomGenerator';\nimport { ITransformersRunner } from './interfaces/node-transformers/ITransformersRunner';\n\nimport { LoggingMessage } from './enums/logger/LoggingMessage';\nimport { NodeTransformer } from './enums/node-transformers/NodeTransformer';\nimport { TransformationStage } from './enums/node-transformers/TransformationStage';\n\nimport { EspreeFacade } from './EspreeFacade';\nimport { NodeGuards } from './node/NodeGuards';\n\n@injectable()\nexport class JavaScriptObfuscator implements IJavaScriptObfuscator {\n    /**\n     * @type {Options}\n     */\n    private static readonly espreeParseOptions: espree.ParseOptions = {\n        attachComment: true,\n        comment: true,\n        ecmaFeatures: {\n            experimentalObjectRestSpread: true\n        },\n        ecmaVersion: 9,\n        loc: true,\n        range: true\n    };\n\n    /**\n     * @type {GenerateOptions}\n     */\n    private static readonly escodegenParams: escodegen.GenerateOptions = {\n        comment: true,\n        verbatim: 'x-verbatim-property',\n        sourceMapWithCode: true\n    };\n\n    /**\n     * @type {NodeTransformer[]}\n     */\n    private static readonly transformersList: NodeTransformer[] = [\n        NodeTransformer.BlockStatementControlFlowTransformer,\n        NodeTransformer.ClassDeclarationTransformer,\n        NodeTransformer.CommentsTransformer,\n        NodeTransformer.CustomNodesTransformer,\n        NodeTransformer.DeadCodeInjectionTransformer,\n        NodeTransformer.EvalCallExpressionTransformer,\n        NodeTransformer.FunctionControlFlowTransformer,\n        NodeTransformer.CatchClauseTransformer,\n        NodeTransformer.FunctionDeclarationTransformer,\n        NodeTransformer.FunctionTransformer,\n        NodeTransformer.ImportDeclarationTransformer,\n        NodeTransformer.LabeledStatementTransformer,\n        NodeTransformer.LiteralTransformer,\n        NodeTransformer.MemberExpressionTransformer,\n        NodeTransformer.MetadataTransformer,\n        NodeTransformer.MethodDefinitionTransformer,\n        NodeTransformer.ObfuscatingGuardsTransformer,\n        NodeTransformer.ObjectExpressionKeysTransformer,\n        NodeTransformer.ObjectExpressionTransformer,\n        NodeTransformer.ParentificationTransformer,\n        NodeTransformer.TemplateLiteralTransformer,\n        NodeTransformer.VariableDeclarationTransformer\n    ];\n\n    /**\n     * @type {ILogger}\n     */\n    private readonly logger: ILogger;\n\n    /**\n     * @type {TObfuscatedCodeFactory}\n     */\n    private readonly obfuscatedCodeFactory: TObfuscatedCodeFactory;\n\n    /**\n     * @type {IOptions}\n     */\n    private readonly options: IOptions;\n\n    /**\n     * @type {IRandomGenerator}\n     */\n    private readonly randomGenerator: IRandomGenerator;\n\n    /**\n     * @type {ITransformersRunner}\n     */\n    private readonly transformersRunner: ITransformersRunner;\n\n    /**\n     * @param {ITransformersRunner} transformersRunner\n     * @param {IRandomGenerator} randomGenerator\n     * @param {TObfuscatedCodeFactory} obfuscatedCodeFactory\n     * @param {ILogger} logger\n     * @param {IOptions} options\n     */\n    constructor (\n        @inject(ServiceIdentifiers.ITransformersRunner) transformersRunner: ITransformersRunner,\n        @inject(ServiceIdentifiers.IRandomGenerator) randomGenerator: IRandomGenerator,\n        @inject(ServiceIdentifiers.Factory__IObfuscatedCode) obfuscatedCodeFactory: TObfuscatedCodeFactory,\n        @inject(ServiceIdentifiers.ILogger) logger: ILogger,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.transformersRunner = transformersRunner;\n        this.randomGenerator = randomGenerator;\n        this.obfuscatedCodeFactory = obfuscatedCodeFactory;\n        this.logger = logger;\n        this.options = options;\n    }\n\n    /**\n     * @param {string} sourceCode\n     * @returns {IObfuscatedCode}\n     */\n    public obfuscate (sourceCode: string): IObfuscatedCode {\n        const timeStart: number = Date.now();\n        this.logger.info(LoggingMessage.Version, process.env.VERSION);\n        this.logger.info(LoggingMessage.ObfuscationStarted);\n        this.logger.info(LoggingMessage.RandomGeneratorSeed, this.randomGenerator.getSeed());\n\n        // parse AST tree\n        const astTree: ESTree.Program = this.parseCode(sourceCode);\n\n        // obfuscate AST tree\n        const obfuscatedAstTree: ESTree.Program = this.transformAstTree(astTree);\n\n        // generate code\n        const generatorOutput: IGeneratorOutput = this.generateCode(sourceCode, obfuscatedAstTree);\n\n        const obfuscationTime: number = (Date.now() - timeStart) / 1000;\n        this.logger.success(LoggingMessage.ObfuscationCompleted, obfuscationTime);\n\n        return this.getObfuscatedCode(generatorOutput);\n    }\n\n    /**\n     * @param {string} sourceCode\n     * @returns {Program}\n     */\n    private parseCode (sourceCode: string): ESTree.Program {\n        return EspreeFacade.parse(sourceCode, JavaScriptObfuscator.espreeParseOptions);\n    }\n\n    /**\n     * @param {Program} astTree\n     * @returns {Program}\n     */\n    private transformAstTree (astTree: ESTree.Program): ESTree.Program {\n        const isEmptyAstTree: boolean = NodeGuards.isProgramNode(astTree)\n            && !astTree.body.length\n            && !astTree.leadingComments\n            && !astTree.trailingComments;\n\n        if (isEmptyAstTree) {\n            this.logger.warn(LoggingMessage.EmptySourceCode);\n\n            return astTree;\n        }\n\n        astTree = this.runTransformationStage(astTree, TransformationStage.Preparing);\n\n        if (this.options.deadCodeInjection) {\n            astTree = this.runTransformationStage(astTree, TransformationStage.DeadCodeInjection);\n        }\n\n        if (this.options.controlFlowFlattening) {\n            astTree = this.runTransformationStage(astTree, TransformationStage.ControlFlowFlattening);\n        }\n\n        astTree = this.runTransformationStage(astTree, TransformationStage.Converting);\n        astTree = this.runTransformationStage(astTree, TransformationStage.Obfuscating);\n        astTree = this.runTransformationStage(astTree, TransformationStage.Finalizing);\n\n        return astTree;\n    }\n\n    /**\n     * @param {string} sourceCode\n     * @param {Program} astTree\n     * @returns {IGeneratorOutput}\n     */\n    private generateCode (sourceCode: string, astTree: ESTree.Program): IGeneratorOutput {\n        const escodegenParams: escodegen.GenerateOptions = {\n            ...JavaScriptObfuscator.escodegenParams\n        };\n\n        if (this.options.sourceMap) {\n            escodegenParams.sourceMap = this.options.inputFileName || 'sourceMap';\n            escodegenParams.sourceContent = sourceCode;\n        }\n\n        const generatorOutput: IGeneratorOutput = escodegen.generate(astTree, {\n            ...escodegenParams,\n            format: {\n                compact: this.options.compact\n            }\n        });\n\n        generatorOutput.map = generatorOutput.map ? generatorOutput.map.toString() : '';\n\n        return generatorOutput;\n    }\n\n    /**\n     * @param {IGeneratorOutput} generatorOutput\n     * @returns {IObfuscatedCode}\n     */\n    private getObfuscatedCode (generatorOutput: IGeneratorOutput): IObfuscatedCode {\n        return this.obfuscatedCodeFactory(generatorOutput.code, generatorOutput.map);\n    }\n\n    /**\n     * @param {Program} astTree\n     * @param {TransformationStage} transformationStage\n     * @returns {Program}\n     */\n    private runTransformationStage (astTree: ESTree.Program, transformationStage: TransformationStage): ESTree.Program {\n        this.logger.info(LoggingMessage.TransformationStage, transformationStage);\n\n        return this.transformersRunner.transform(\n            astTree,\n            JavaScriptObfuscator.transformersList,\n            transformationStage\n        );\n    }\n}\n","export enum LoggingMessage {\n    EmptySourceCode = 'Empty source code. Obfuscation canceled...',\n    ObfuscationCompleted = 'Obfuscation completed. Total time: %s sec.',\n    ObfuscationStarted = 'Obfuscation started...',\n    RandomGeneratorSeed = 'Random generator seed: %s...',\n    TransformationStage = 'Transformation stage: %s...',\n    Version = 'Version: %s'\n}\n","import * as espree from 'espree';\nimport * as ESTree from 'estree';\n\nimport chalk, { Chalk } from 'chalk';\n\n/**\n * Facade over `espree`\n */\nexport class EspreeFacade {\n    /**\n     * @type {Chalk}\n     */\n    private static readonly colorError: Chalk = chalk.red;\n\n    /**\n     * @type {number}\n     */\n    private static readonly nearestSymbolsCount: number = 15;\n\n    /**\n     * @type {SourceType[]}\n     */\n    private static readonly sourceTypes: espree.SourceType[] = [\n        'script',\n        'module'\n    ];\n\n    /**\n     * @param {string} input\n     * @param {Options} config\n     * @returns {Program}\n     */\n    public static parse (input: string, config: espree.ParseOptions): ESTree.Program | never {\n        const sourceTypeLength: number = EspreeFacade.sourceTypes.length;\n\n        for (let i: number = 0; i < sourceTypeLength; i++) {\n            try {\n                return EspreeFacade.parseType(input, config, EspreeFacade.sourceTypes[i]);\n            } catch (error) {\n                if (i < sourceTypeLength - 1) {\n                    continue;\n                }\n\n                throw new Error(EspreeFacade.processParsingError(\n                    input,\n                    error.message,\n                    {\n                        line: error.lineNumber,\n                        column: error.column,\n                    }\n                ));\n            }\n        }\n\n        throw new Error(`Espree parsing error`);\n    }\n\n    /**\n     * @param {string} input\n     * @param {ParseOptions} inputConfig\n     * @param {SourceType} sourceType\n     * @returns {Program}\n     */\n    private static parseType (\n        input: string,\n        inputConfig: espree.ParseOptions,\n        sourceType: espree.SourceType\n    ): ESTree.Program {\n        const config: espree.ParseOptions = { ...inputConfig, sourceType };\n\n        return espree.parse(input, config);\n    }\n\n    /**\n     * @param {string} sourceCode\n     * @param {string} errorMessage\n     * @param {Position} position\n     * @returns {never}\n     */\n    private static processParsingError (sourceCode: string, errorMessage: string, position: ESTree.Position | null): never {\n        if (!position || !position.line || !position.column) {\n            throw new Error(errorMessage);\n        }\n\n        const sourceCodeLines: string[] = sourceCode.split(/\\r?\\n/);\n        const errorLine: string | undefined = sourceCodeLines[position.line - 1];\n\n        if (!errorLine) {\n            throw new Error(errorMessage);\n        }\n\n        const startErrorIndex: number = Math.max(0, position.column - EspreeFacade.nearestSymbolsCount);\n        const endErrorIndex: number = Math.min(errorLine.length, position.column + EspreeFacade.nearestSymbolsCount);\n\n        const formattedPointer: string = EspreeFacade.colorError('>');\n        const formattedCodeSlice: string = `...${\n            errorLine.substring(startErrorIndex, endErrorIndex).replace(/^\\s+/, '')\n        }...`;\n\n        throw new Error(`Line ${position.line}: ${errorMessage}\\n${formattedPointer} ${formattedCodeSlice}`);\n    }\n}\n","import { decorate, injectable } from 'inversify';\n\nimport { IObfuscationEventEmitter } from '../interfaces/event-emitters/IObfuscationEventEmitter';\n\nimport { EventEmitter } from 'events';\n\ndecorate(injectable(), EventEmitter);\n\n@injectable()\nexport class ObfuscationEventEmitter extends EventEmitter implements IObfuscationEventEmitter {}\n","module.exports = require(\"events\");","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport { ICryptUtils } from '../interfaces/utils/ICryptUtils';\nimport { IObfuscatedCode } from '../interfaces/source-code/IObfuscatedCode';\n\nimport { initializable } from '../decorators/Initializable';\nimport { SourceMapMode } from '../enums/source-map/SourceMapMode';\nimport { IOptions } from '../interfaces/options/IOptions';\n\n@injectable()\nexport class ObfuscatedCode implements IObfuscatedCode {\n    /**\n     * @type {ICryptUtils}\n     */\n    private readonly cryptUtils: ICryptUtils;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private obfuscatedCode!: string;\n\n    /**\n     * @type {IOptions}\n     */\n    private readonly options: IOptions;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private sourceMap!: string;\n\n    constructor (\n        @inject(ServiceIdentifiers.ICryptUtils) cryptUtils: ICryptUtils,\n        @inject(ServiceIdentifiers.IOptions) options: IOptions\n    ) {\n        this.cryptUtils = cryptUtils;\n        this.options = options;\n    }\n\n    /**\n     * @param {string} obfuscatedCode\n     * @param {string} sourceMap\n     */\n    public initialize (obfuscatedCode: string, sourceMap: string): void {\n        this.obfuscatedCode = obfuscatedCode;\n        this.sourceMap = sourceMap;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public getObfuscatedCode (): string {\n        return this.correctObfuscatedCode();\n    }\n\n    /**\n     * @returns {string}\n     */\n    public getSourceMap (): string {\n        return this.sourceMap;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public toString (): string {\n        return this.obfuscatedCode;\n    }\n\n    /**\n     * @returns {string}\n     */\n    private correctObfuscatedCode (): string {\n        if (!this.sourceMap) {\n            return this.obfuscatedCode;\n        }\n\n        const sourceMapUrl: string = this.options.sourceMapBaseUrl + this.options.sourceMapFileName;\n\n        let sourceMappingUrl: string = '//# sourceMappingURL=';\n\n        switch (this.options.sourceMapMode) {\n            case SourceMapMode.Inline:\n                sourceMappingUrl += `data:application/json;base64,${this.cryptUtils.btoa(this.sourceMap)}`;\n\n                break;\n\n            case SourceMapMode.Separate:\n            default:\n                if (!sourceMapUrl) {\n                    return this.obfuscatedCode;\n                }\n\n                sourceMappingUrl += sourceMapUrl;\n        }\n\n        return `${this.obfuscatedCode}\\n${sourceMappingUrl}`;\n    }\n}\n","import { ISourceCode } from '../interfaces/source-code/ISourceCode';\n\nexport class SourceCode implements ISourceCode {\n    /**\n     * @type {string}\n     */\n    private readonly sourceCode: string;\n\n    /**\n     * @type {string}\n     */\n    private readonly sourceMap: string;\n\n    /**\n     * @param {string} sourceCode\n     * @param {string} sourceMap\n     */\n    constructor (sourceCode: string, sourceMap: string) {\n        this.sourceCode = sourceCode;\n        this.sourceMap = sourceMap;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public getSourceCode (): string {\n        return this.sourceCode;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public getSourceMap (): string {\n        return this.sourceMap;\n    }\n\n    /**\n     * @returns {string}\n     */\n    public toString (): string {\n        return this.sourceCode;\n    }\n}\n","import { inject, injectable } from 'inversify';\nimport { ServiceIdentifiers } from '../container/ServiceIdentifiers';\n\nimport * as estraverse from 'estraverse';\nimport * as ESTree from 'estree';\n\nimport { TNodeTransformerFactory } from '../types/container/node-transformers/TNodeTransformerFactory';\nimport { TVisitorDirection } from '../types/node-transformers/TVisitorDirection';\nimport { TVisitorFunction } from '../types/node-transformers/TVisitorFunction';\nimport { TVisitorResult } from '../types/node-transformers/TVisitorResult';\n\nimport { ITransformersRunner } from '../interfaces/node-transformers/ITransformersRunner';\nimport { IVisitor } from '../interfaces/node-transformers/IVisitor';\n\nimport { NodeTransformer } from '../enums/node-transformers/NodeTransformer';\nimport { TransformationStage } from '../enums/node-transformers/TransformationStage';\nimport { VisitorDirection } from '../enums/node-transformers/VisitorDirection';\n\nimport { NodeGuards } from '../node/NodeGuards';\nimport { NodeMetadata } from '../node/NodeMetadata';\n\n@injectable()\nexport class TransformersRunner implements ITransformersRunner {\n    /**\n     * @type {TNodeTransformerFactory}\n     */\n    private readonly nodeTransformerFactory: TNodeTransformerFactory;\n\n    /**\n     * @param {TNodeTransformerFactory} nodeTransformerFactory\n     */\n    constructor (\n        @inject(ServiceIdentifiers.Factory__INodeTransformer) nodeTransformerFactory: TNodeTransformerFactory,\n    ) {\n        this.nodeTransformerFactory = nodeTransformerFactory;\n    }\n\n    /**\n     * @param {T} astTree\n     * @param {NodeTransformer[]} nodeTransformers\n     * @param {TransformationStage} transformationStage\n     * @returns {T}\n     */\n    public transform <T extends ESTree.Node = ESTree.Program> (\n        astTree: T,\n        nodeTransformers: NodeTransformer[],\n        transformationStage: TransformationStage\n    ): T {\n        if (!nodeTransformers.length) {\n            return astTree;\n        }\n\n        const enterVisitors: IVisitor[] = [];\n        const leaveVisitors: IVisitor[] = [];\n        const nodeTransformersLength: number = nodeTransformers.length;\n\n        let visitor: IVisitor | null;\n\n        for (let i: number = 0; i < nodeTransformersLength; i++) {\n            visitor = this.nodeTransformerFactory(nodeTransformers[i]).getVisitor(transformationStage);\n\n            if (!visitor) {\n                continue;\n            }\n\n            if (visitor.enter) {\n                enterVisitors.push({ enter: visitor.enter });\n            }\n\n            if (visitor.leave) {\n                leaveVisitors.push({ leave: visitor.leave });\n            }\n        }\n\n        if (!enterVisitors.length && !leaveVisitors.length) {\n            return astTree;\n        }\n\n        estraverse.replace(astTree, {\n            enter: this.mergeVisitorsForDirection(enterVisitors, VisitorDirection.Enter),\n            leave: this.mergeVisitorsForDirection(leaveVisitors, VisitorDirection.Leave)\n        });\n\n        return astTree;\n    }\n\n    /**\n     * @param {IVisitor[]} visitors\n     * @param {TVisitorDirection} direction\n     * @returns {TVisitorFunction}\n     */\n    private mergeVisitorsForDirection (visitors: IVisitor[], direction: TVisitorDirection): TVisitorFunction {\n        const visitorsLength: number = visitors.length;\n\n        if (!visitorsLength) {\n            return (node: ESTree.Node, parentNode: ESTree.Node | null) => node;\n        }\n\n        return (node: ESTree.Node, parentNode: ESTree.Node | null) => {\n            if (NodeMetadata.isIgnoredNode(node)) {\n                return estraverse.VisitorOption.Skip;\n            }\n\n            for (let i: number = 0; i < visitorsLength; i++) {\n                const visitorFunction: TVisitorFunction | undefined = visitors[i][direction];\n\n                if (!visitorFunction) {\n                    continue;\n                }\n\n                const visitorResult: TVisitorResult = visitorFunction(node, parentNode);\n\n                if (!visitorResult || !NodeGuards.isNode(visitorResult)) {\n                    continue;\n                }\n\n                node = visitorResult;\n            }\n\n            return node;\n        };\n    }\n}\n","export enum VisitorDirection {\n    Enter = 'enter',\n    Leave = 'leave'\n}\n","import * as commander from 'commander';\nimport * as path from 'path';\n\nimport { TInputCLIOptions } from '../types/options/TInputCLIOptions';\nimport { TInputOptions } from '../types/options/TInputOptions';\nimport { TSourceCodeData } from '../types/cli/TSourceCodeData';\n\nimport { IFileData } from '../interfaces/cli/IFileData';\nimport { IInitializable } from '../interfaces/IInitializable';\nimport { IObfuscatedCode } from '../interfaces/source-code/IObfuscatedCode';\n\nimport { initializable } from '../decorators/Initializable';\n\nimport { DEFAULT_PRESET } from '../options/presets/Default';\n\nimport { ArraySanitizer } from './sanitizers/ArraySanitizer';\nimport { BooleanSanitizer } from './sanitizers/BooleanSanitizer';\nimport { IdentifierNamesGeneratorSanitizer } from './sanitizers/IdentifierNamesGeneratorSanitizer';\nimport { ObfuscationTargetSanitizer } from './sanitizers/ObfuscatingTargetSanitizer';\nimport { SourceMapModeSanitizer } from './sanitizers/SourceMapModeSanitizer';\nimport { StringArrayEncodingSanitizer } from './sanitizers/StringArrayEncodingSanitizer';\n\nimport { CLIUtils } from './utils/CLIUtils';\nimport { JavaScriptObfuscator } from '../JavaScriptObfuscatorFacade';\nimport { SourceCodeReader } from './utils/SourceCodeReader';\n\nexport class JavaScriptObfuscatorCLI implements IInitializable {\n    /**\n     * @type {BufferEncoding}\n     */\n    public static readonly encoding: BufferEncoding = 'utf8';\n\n    /**\n     * @type {string}\n     */\n    public static obfuscatedFilePrefix: string = '-obfuscated';\n\n    /**\n     * @type {string}\n     */\n    private static readonly baseIdentifiersPrefix: string = 'a';\n\n    /**\n     * @type {string[]}\n     */\n    private readonly arguments: string[];\n\n    /**\n     * @type {string[]}\n     */\n    private readonly rawArguments: string[];\n\n    /**\n     * @type {commander.CommanderStatic}\n     */\n    @initializable()\n    private commands!: commander.CommanderStatic;\n\n    /**\n     * @type {TInputCLIOptions}\n     */\n    @initializable()\n    private inputCLIOptions!: TInputCLIOptions;\n\n    /**\n     * @type {string}\n     */\n    @initializable()\n    private inputPath!: string;\n\n    /**\n     * @param {string[]} argv\n     */\n    constructor (argv: string[]) {\n        this.rawArguments = argv;\n        this.arguments = argv.slice(2);\n    }\n\n    /**\n     * @param {TObject} options\n     * @returns {TInputOptions}\n     */\n    private static filterOptions (options: TInputCLIOptions): TInputOptions {\n        const filteredOptions: TInputOptions = {};\n\n        Object\n            .keys(options)\n            .forEach((option: keyof TInputCLIOptions) => {\n                if (options[option] === undefined) {\n                    return;\n                }\n\n                filteredOptions[option] = options[option];\n            });\n\n        return filteredOptions;\n    }\n\n    /**\n     * @param {string} sourceCode\n     * @param {string} outputCodePath\n     * @param {TInputOptions} options\n     */\n    private static processSourceCodeWithoutSourceMap (\n        sourceCode: string,\n        outputCodePath: string,\n        options: TInputOptions\n    ): void {\n        const obfuscatedCode: string = JavaScriptObfuscator.obfuscate(sourceCode, options).getObfuscatedCode();\n\n        CLIUtils.writeFile(outputCodePath, obfuscatedCode);\n    }\n\n    /**\n     * @param {string} sourceCode\n     * @param {string} outputCodePath\n     * @param {TInputOptions} options\n     */\n    private static processSourceCodeWithSourceMap (\n        sourceCode: string,\n        outputCodePath: string,\n        options: TInputOptions\n    ): void {\n        const outputSourceMapPath: string = CLIUtils.getOutputSourceMapPath(\n            outputCodePath,\n            options.sourceMapFileName || ''\n        );\n\n        options = {\n            ...options,\n            sourceMapFileName: path.basename(outputSourceMapPath)\n        };\n\n        const obfuscatedCode: IObfuscatedCode = JavaScriptObfuscator.obfuscate(sourceCode, options);\n\n        CLIUtils.writeFile(outputCodePath, obfuscatedCode.getObfuscatedCode());\n\n        if (options.sourceMapMode === 'separate' && obfuscatedCode.getSourceMap()) {\n            CLIUtils.writeFile(outputSourceMapPath, obfuscatedCode.getSourceMap());\n        }\n    }\n\n    public initialize (): void {\n        this.inputPath = path.normalize(this.arguments[0] || '');\n        this.commands = <commander.CommanderStatic>(new commander.Command());\n\n        this.configureCommands();\n        this.configureHelp();\n\n        this.inputCLIOptions = this.commands.opts();\n    }\n\n    public run (): void {\n        const canShowHelp: boolean = !this.arguments.length || this.arguments.includes('--help');\n\n        if (canShowHelp) {\n            this.commands.outputHelp();\n\n            return;\n        }\n\n        const sourceCodeData: TSourceCodeData = new SourceCodeReader(this.inputCLIOptions)\n            .readSourceCode(this.inputPath);\n\n        this.processSourceCodeData(sourceCodeData);\n    }\n\n    /**\n     * @returns {TInputOptions}\n     */\n    private buildOptions (): TInputOptions {\n        const inputCLIOptions: TInputOptions = JavaScriptObfuscatorCLI.filterOptions(this.inputCLIOptions);\n        const configFilePath: string | undefined = this.inputCLIOptions.config;\n        const configFileLocation: string = configFilePath ? path.resolve(configFilePath, '.') : '';\n        const configFileOptions: TInputOptions = configFileLocation ? CLIUtils.getUserConfig(configFileLocation) : {};\n        const inputFileName: string = path.basename(this.inputPath);\n\n        return {\n            ...DEFAULT_PRESET,\n            ...configFileOptions,\n            ...inputCLIOptions,\n            inputFileName\n        };\n    }\n\n    private configureCommands (): void {\n        this.commands\n            .usage('<inputPath> [options]')\n            .version(\n                process.env.VERSION || 'unknown',\n                '-v, --version'\n            )\n            .option(\n                '-o, --output <path>',\n                'Output path for obfuscated code'\n            )\n            .option(\n                '--compact <boolean>',\n                'Disable one line output code compacting',\n                BooleanSanitizer\n            )\n            .option(\n                '--config <boolean>',\n                'Name of js / json config file'\n            )\n            .option(\n                '--control-flow-flattening <boolean>',\n                'Enables control flow flattening',\n                BooleanSanitizer\n            )\n            .option(\n                '--control-flow-flattening-threshold <number>',\n                'The probability that the control flow flattening transformation will be applied to the node',\n                parseFloat\n            )\n            .option(\n                '--dead-code-injection <boolean>',\n                'Enables dead code injection',\n                BooleanSanitizer\n            )\n            .option(\n                '--dead-code-injection-threshold <number>',\n                'The probability that the dead code injection transformation will be applied to the node',\n                parseFloat\n            )\n            .option(\n                '--debug-protection <boolean>',\n                'Disable browser Debug panel (can cause DevTools enabled browser freeze)',\n                BooleanSanitizer\n            )\n            .option(\n                '--debug-protection-interval <boolean>',\n                'Disable browser Debug panel even after page was loaded (can cause DevTools enabled browser freeze)',\n                BooleanSanitizer\n            )\n            .option(\n                '--disable-console-output <boolean>',\n                'Allow console.log, console.info, console.error and console.warn messages output into browser console',\n                BooleanSanitizer\n            )\n            .option(\n                '--domain-lock <list> (comma separated, without whitespaces)',\n                'Blocks the execution of the code in domains that do not match the passed RegExp patterns (comma separated)',\n                ArraySanitizer\n            )\n            .option(\n                '--exclude <list> (comma separated, without whitespaces)',\n                'A filename or glob which indicates files to exclude from obfuscation',\n                ArraySanitizer\n            )\n            .option(\n                '--identifier-names-generator <string>',\n                'Sets identifier names generator. ' +\n                'Values: hexadecimal, mangled. ' +\n                'Default: hexadecimal',\n                IdentifierNamesGeneratorSanitizer\n            )\n            .option(\n                '--identifiers-prefix <string>',\n                'Sets prefix for all global identifiers.'\n            )\n            .option(\n                '--log <boolean>', 'Enables logging of the information to the console',\n                BooleanSanitizer\n            )\n            .option(\n                '--reserved-names <list> (comma separated, without whitespaces)',\n                'Disables obfuscation and generation of identifiers, which being matched by passed RegExp patterns (comma separated)',\n                ArraySanitizer\n            )\n            .option(\n                '--reserved-strings <list> (comma separated, without whitespaces)',\n                'Disables transformation of string literals, which being matched by passed RegExp patterns (comma separated)',\n                ArraySanitizer\n            )\n            .option(\n                '--rename-globals <boolean>', 'Allows to enable obfuscation of global variable and function names with declaration.',\n                BooleanSanitizer\n            )\n            .option(\n                '--rotate-string-array <boolean>', 'Disable rotation of unicode array values during obfuscation',\n                BooleanSanitizer\n            )\n            .option(\n                '--seed <number>',\n                'Sets seed for random generator. This is useful for creating repeatable results.',\n                parseFloat\n            )\n            .option(\n                '--self-defending <boolean>',\n                'Disables self-defending for obfuscated code',\n                BooleanSanitizer\n            )\n            .option(\n                '--source-map <boolean>',\n                'Enables source map generation',\n                BooleanSanitizer\n            )\n            .option(\n                '--source-map-base-url <string>',\n                'Sets base url to the source map import url when `--source-map-mode=separate`'\n            )\n            .option(\n                '--source-map-file-name <string>',\n                'Sets file name for output source map when `--source-map-mode=separate`'\n            )\n            .option(\n                '--source-map-mode <string>',\n                'Specify source map output mode. ' +\n                'Values: inline, separate. ' +\n                'Default: separate',\n                SourceMapModeSanitizer\n            )\n            .option(\n                '--string-array <boolean>',\n                'Disables gathering of all literal strings into an array and replacing every literal string with an array call',\n                BooleanSanitizer\n            )\n            .option(\n                '--string-array-encoding <string|boolean>',\n                'Encodes all strings in strings array using base64 or rc4 (this option can slow down your code speed. ' +\n                'Values: true, false, base64, rc4. ' +\n                'Default: false',\n                StringArrayEncodingSanitizer\n            )\n            .option(\n                '--string-array-threshold <number>',\n                'The probability that the literal string will be inserted into stringArray (Default: 0.8, Min: 0, Max: 1)',\n                parseFloat\n            )\n            .option(\n                '--target <string>',\n                'Allows to set target environment for obfuscated code. ' +\n                'Values: browser, browser-no-eval, node. ' +\n                'Default: browser',\n                ObfuscationTargetSanitizer\n            )\n            .option(\n                '--transform-object-keys <boolean>',\n                'Enables transformation of object keys',\n                BooleanSanitizer\n            )\n            .option(\n                '--unicode-escape-sequence <boolean>',\n                'Allows to enable/disable string conversion to unicode escape sequence',\n                BooleanSanitizer\n            )\n            .parse(this.rawArguments);\n    }\n\n    private configureHelp (): void {\n        this.commands.on('--help', () => {\n            console.log('  Examples:\\n');\n            console.log('    %> javascript-obfuscator input_file_name.js --compact true --self-defending false');\n            console.log('    %> javascript-obfuscator input_file_name.js --output output_file_name.js --compact true --self-defending false');\n            console.log('    %> javascript-obfuscator input_directory_name --compact true --self-defending false');\n            console.log('');\n        });\n    }\n\n    /**\n     * @param {TSourceCodeData} sourceCodeData\n     */\n    private processSourceCodeData (sourceCodeData: TSourceCodeData): void {\n        const outputPath: string = this.inputCLIOptions.output\n            ? path.normalize(this.inputCLIOptions.output)\n            : '';\n\n        if (!Array.isArray(sourceCodeData)) {\n            const outputCodePath: string = outputPath || CLIUtils.getOutputCodePath(this.inputPath);\n\n            this.processSourceCode(sourceCodeData, outputCodePath, null);\n        } else {\n            sourceCodeData.forEach(({ filePath, content }: IFileData, index: number) => {\n                const outputCodePath: string = outputPath\n                    ? path.join(outputPath, filePath)\n                    : CLIUtils.getOutputCodePath(filePath);\n\n                this.processSourceCode(content, outputCodePath, index);\n            });\n        }\n    }\n\n    /**\n     * @param {string} sourceCode\n     * @param {string} outputCodePath\n     * @param {number | null} sourceCodeIndex\n     */\n    private processSourceCode (\n        sourceCode: string,\n        outputCodePath: string,\n        sourceCodeIndex: number | null\n    ): void {\n        let options: TInputOptions = this.buildOptions();\n\n        if (sourceCodeIndex !== null) {\n            const baseIdentifiersPrefix: string = this.inputCLIOptions.identifiersPrefix\n                || JavaScriptObfuscatorCLI.baseIdentifiersPrefix;\n            const identifiersPrefix: string = `${baseIdentifiersPrefix}${sourceCodeIndex}`;\n\n            options = {\n                ...options,\n                identifiersPrefix\n            };\n        }\n\n        if (options.sourceMap) {\n            JavaScriptObfuscatorCLI.processSourceCodeWithSourceMap(sourceCode, outputCodePath, options);\n        } else {\n            JavaScriptObfuscatorCLI.processSourceCodeWithoutSourceMap(sourceCode, outputCodePath, options);\n        }\n    }\n}\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","\"use strict\";\n\nimport { JavaScriptObfuscatorCLI } from './src/JavaScriptObfuscatorCLIFacade';\n\nmodule.exports = JavaScriptObfuscatorCLI;\n","import 'reflect-metadata';\n\nimport { JavaScriptObfuscatorCLI } from './cli/JavaScriptObfuscatorCLI';\n\nclass JavaScriptObfuscatorCLIFacade {\n    /**\n     * @param {string[]} argv\n     */\n    public static obfuscate (argv: string[]): void {\n        const javaScriptObfuscatorCLI: JavaScriptObfuscatorCLI = new JavaScriptObfuscatorCLI(argv);\n\n        javaScriptObfuscatorCLI.initialize();\n        javaScriptObfuscatorCLI.run();\n    }\n}\n\nexport { JavaScriptObfuscatorCLIFacade as JavaScriptObfuscatorCLI };\n","module.exports = require(\"commander\");","import { TCLISanitizer } from '../../types/cli/TCLISanitizer';\n\n/**\n * @param {string} value\n * @returns {string[]}\n */\nexport const ArraySanitizer: TCLISanitizer <string[]> = (value: string): string[] => {\n    if (/,$/.test(value)) {\n        throw new SyntaxError(`Multiple <list> values should be wrapped inside quotes: --option-name 'value1','value2'`);\n    }\n\n    return value.split(',').map((string: string) => string.trim());\n};\n","import { TCLISanitizer } from '../../types/cli/TCLISanitizer';\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nexport const BooleanSanitizer: TCLISanitizer <boolean> = (value: string): boolean => {\n    return value === 'true' || value === '1';\n};\n","import { TCLISanitizer } from '../../types/cli/TCLISanitizer';\n\nimport { IdentifierNamesGenerator } from '../../enums/generators/identifier-names-generators/IdentifierNamesGenerator';\n\n/**\n * @param {string} value\n * @returns {string}\n */\nexport const IdentifierNamesGeneratorSanitizer: TCLISanitizer <string> = (value: string): string => {\n    const isCorrectIdentifierNamesGenerator: boolean = Object\n        .keys(IdentifierNamesGenerator)\n        .some((key: string): boolean => {\n            return IdentifierNamesGenerator[<keyof typeof IdentifierNamesGenerator>key] === value;\n        });\n\n    if (!isCorrectIdentifierNamesGenerator) {\n        throw new ReferenceError('Invalid value of `--identifier-names-generator` option');\n    }\n\n    return value;\n};\n","import { TCLISanitizer } from '../../types/cli/TCLISanitizer';\n\nimport { ObfuscationTarget } from '../../enums/ObfuscationTarget';\n\n/**\n * @param {string} value\n * @returns {string}\n */\nexport const ObfuscationTargetSanitizer: TCLISanitizer <string> = (value: string): string => {\n    const isCorrectTarget: boolean = Object\n        .keys(ObfuscationTarget)\n        .some((key: string): boolean => {\n            return ObfuscationTarget[<keyof typeof ObfuscationTarget>key] === value;\n        });\n\n    if (!isCorrectTarget) {\n        throw new ReferenceError('Invalid value of `--target` option');\n    }\n\n    return value;\n};\n","import { TCLISanitizer } from '../../types/cli/TCLISanitizer';\n\nimport { SourceMapMode } from '../../enums/source-map/SourceMapMode';\n\n/**\n * @param {string} value\n * @returns {string}\n */\nexport const SourceMapModeSanitizer: TCLISanitizer <string> = (value: string): string => {\n    const isCorrectSourceMapMode: boolean = Object\n        .keys(SourceMapMode)\n        .some((key: string): boolean => {\n            return SourceMapMode[<keyof typeof SourceMapMode>key] === value;\n        });\n\n    if (!isCorrectSourceMapMode) {\n        throw new ReferenceError('Invalid value of `--source-map-mode` option');\n    }\n\n    return value;\n};\n","import { TCLISanitizer } from '../../types/cli/TCLISanitizer';\nimport { TStringArrayEncoding } from '../../types/options/TStringArrayEncoding';\n\nimport { StringArrayEncoding } from '../../enums/StringArrayEncoding';\n\n/**\n * @param {string} value\n * @returns {TStringArrayEncoding}\n */\nexport const StringArrayEncodingSanitizer: TCLISanitizer <TStringArrayEncoding> = (value: string): TStringArrayEncoding => {\n    switch (value) {\n        case 'true':\n        case '1':\n        case StringArrayEncoding.Base64:\n            return true;\n\n        case StringArrayEncoding.Rc4:\n            return StringArrayEncoding.Rc4;\n\n        default:\n            return false;\n    }\n};\n","import * as fs from 'fs';\nimport * as mkdirp from 'mkdirp';\nimport * as path from 'path';\n\nimport { TObject } from '../../types/TObject';\n\nimport { JavaScriptObfuscatorCLI } from '../JavaScriptObfuscatorCLI';\n\nexport class CLIUtils {\n    /**\n     * @param {string} inputPath\n     * @returns {string}\n     */\n    public static getOutputCodePath (inputPath: string): string {\n        return path\n            .normalize(inputPath)\n            .split('.')\n            .map((value: string, index: number) => {\n                return index === 0 ? `${value}${JavaScriptObfuscatorCLI.obfuscatedFilePrefix}` : value;\n            })\n            .join('.');\n    }\n\n    /**\n     * @param {string} outputCodePath\n     * @param {string} sourceMapFileName\n     * @returns {string}\n     */\n    public static getOutputSourceMapPath (outputCodePath: string, sourceMapFileName: string = ''): string {\n        if (sourceMapFileName) {\n            outputCodePath = `${outputCodePath.substring(\n                0, outputCodePath.lastIndexOf('/')\n            )}/${sourceMapFileName}`;\n        }\n\n        if (!/\\.js\\.map$/.test(outputCodePath)) {\n            outputCodePath = `${outputCodePath.split('.')[0]}.js.map`;\n        } else if (/\\.js$/.test(outputCodePath)) {\n            outputCodePath += '.map';\n        }\n\n        return outputCodePath;\n    }\n\n    /**\n     * @param {string} configPath\n     * @returns {TObject}\n     */\n    public static getUserConfig (configPath: string): TObject {\n        let config: Object;\n\n        try {\n            config = require(configPath);\n        } catch {\n            try {\n                config = __non_webpack_require__(configPath);\n            } catch {\n                throw new ReferenceError('Given config path must be a valid `.js` or `.json` file path');\n            }\n        }\n\n        return config;\n    }\n\n    /**\n     * @param {string} outputPath\n     * @param {string} data\n     */\n    public static writeFile (outputPath: string, data: string): void {\n        mkdirp.sync(path.dirname(outputPath));\n\n        fs.writeFileSync(outputPath, data, {\n            encoding: JavaScriptObfuscatorCLI.encoding\n        });\n    }\n}\n","module.exports = require(\"mkdirp\");","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 212;","import * as fs from 'fs';\nimport * as path from 'path';\nimport multimatch from 'multimatch';\n\nimport { TInputCLIOptions } from '../../types/options/TInputCLIOptions';\nimport { TSourceCodeData } from '../../types/cli/TSourceCodeData';\n\nimport { IFileData } from '../../interfaces/cli/IFileData';\n\nimport { LoggingPrefix } from '../../enums/logger/LoggingPrefix';\n\nimport { JavaScriptObfuscatorCLI } from '../JavaScriptObfuscatorCLI';\nimport { Logger } from '../../logger/Logger';\n\nexport class SourceCodeReader {\n    /**\n     * @type {string[]}\n     */\n    public static readonly availableInputExtensions: string[] = [\n        '.js'\n    ];\n\n    /**\n     * @type {TInputCLIOptions}\n     */\n    private readonly options: TInputCLIOptions;\n\n    /**\n     * @param {TInputCLIOptions} options\n     */\n    constructor (options: TInputCLIOptions) {\n        this.options = options;\n    }\n\n    /**\n     * @param {string} filePath\n     * @param {string[]} excludePatterns\n     * @returns {boolean}\n     */\n    private static isExcludedPath (filePath: string, excludePatterns: string[] = []): boolean {\n        if (!excludePatterns.length) {\n            return false;\n        }\n\n        const fileName: string = path.basename(filePath);\n        const isExcludedFilePathByGlobPattern: boolean = !!multimatch([filePath], excludePatterns).length;\n        const isExcludedFilePathByInclusion: boolean = excludePatterns.some((excludePattern: string) =>\n            filePath.includes(excludePattern) || fileName.includes(excludePattern)\n        );\n\n        return isExcludedFilePathByInclusion || isExcludedFilePathByGlobPattern;\n    }\n\n    /**\n     * @param {string} filePath\n     * @returns {boolean}\n     */\n    private static isDirectoryPath (filePath: string): boolean {\n        try {\n            return fs.statSync(filePath).isDirectory();\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * @param {string} filePath\n     * @returns {boolean}\n     */\n    private static isFilePath (filePath: string): boolean {\n        try {\n            return fs.statSync(filePath).isFile();\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * @param {string} filePath\n     */\n    private static logFilePath (filePath: string): void {\n        const normalizedFilePath: string = path.normalize(filePath);\n\n        Logger.log(\n            Logger.colorInfo,\n            LoggingPrefix.CLI,\n            `Obfuscating file: ${normalizedFilePath}...`\n        );\n    }\n\n    /**\n     * @param {string} inputPath\n     * @returns {TSourceCodeData}\n     */\n    public readSourceCode (inputPath: string): TSourceCodeData {\n        if (SourceCodeReader.isFilePath(inputPath) && this.isValidFile(inputPath)) {\n            return this.readFile(inputPath);\n        }\n\n        if (SourceCodeReader.isDirectoryPath(inputPath) && this.isValidDirectory(inputPath)) {\n            return this.readDirectoryRecursive(inputPath);\n        }\n\n        const availableFilePaths: string = SourceCodeReader\n            .availableInputExtensions\n            .map((extension: string) => `\\`${extension}\\``)\n            .join(', ');\n\n        throw new ReferenceError(`Given input path must be a valid ${availableFilePaths} file or directory path`);\n    }\n\n    /**\n     * @param {string} directoryPath\n     * @param {IFileData[]} fileData\n     * @returns {IFileData[]}\n     */\n    private readDirectoryRecursive (directoryPath: string, fileData: IFileData[] = []): IFileData[] {\n        fs.readdirSync(directoryPath, JavaScriptObfuscatorCLI.encoding)\n            .forEach((fileName: string) => {\n                const filePath: string = `${directoryPath}/${fileName}`;\n\n                if (SourceCodeReader.isDirectoryPath(filePath) && this.isValidDirectory(filePath)) {\n                    fileData.push(...this.readDirectoryRecursive(filePath));\n                } else if (SourceCodeReader.isFilePath(filePath) && this.isValidFile(filePath)) {\n                    const content: string = this.readFile(filePath);\n\n                    fileData.push({ filePath, content });\n                }\n            });\n\n        return fileData;\n    }\n\n    /**\n     * @param {string} filePath\n     * @returns {string}\n     */\n    private readFile (filePath: string): string {\n        SourceCodeReader.logFilePath(filePath);\n\n        return fs.readFileSync(filePath, JavaScriptObfuscatorCLI.encoding);\n    }\n\n    /**\n     * @param {string} directoryPath\n     * @returns {boolean}\n     */\n    private isValidDirectory (directoryPath: string): boolean {\n        return !SourceCodeReader.isExcludedPath(directoryPath, this.options.exclude);\n    }\n\n    /**\n     * @param {string} filePath\n     * @returns {boolean}\n     */\n    private isValidFile (filePath: string): boolean {\n        return SourceCodeReader.availableInputExtensions.includes(path.extname(filePath))\n            && !filePath.includes(JavaScriptObfuscatorCLI.obfuscatedFilePrefix)\n            && !SourceCodeReader.isExcludedPath(filePath, this.options.exclude);\n    }\n}\n","module.exports = require(\"multimatch\");"],"sourceRoot":""}